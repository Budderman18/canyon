From 86f2803bbe8395415a5c43f1827567130ce681eb Mon Sep 17 00:00:00 2001
From: cool <nyeheh@mail.com>
Date: Sun, 11 Apr 2021 15:46:13 -0500
Subject: [PATCH] the big manual fucking fix


diff --git a/src/main/java/net/minecraft/server/Achievement.java b/src/main/java/net/minecraft/server/Achievement.java
new file mode 100644
index 00000000..eab80f4e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Achievement.java
@@ -0,0 +1,60 @@
+package net.minecraft.server;
+
+public class Achievement extends Statistic {
+
+    public final int a;
+    public final int b;
+    public final Achievement c;
+    private final String l;
+    public final ItemStack d;
+    private boolean m;
+
+    public Achievement(int i, String s, int j, int k, Item item, Achievement achievement) {
+        this(i, s, j, k, new ItemStack(item), achievement);
+    }
+
+    public Achievement(int i, String s, int j, int k, Block block, Achievement achievement) {
+        this(i, s, j, k, new ItemStack(block), achievement);
+    }
+
+    public Achievement(int i, String s, int j, int k, ItemStack itemstack, Achievement achievement) {
+        super(5242880 + i, StatisticCollector.a("achievement." + s));
+        this.d = itemstack;
+        this.l = StatisticCollector.a("achievement." + s + ".desc");
+        this.a = j;
+        this.b = k;
+        if (j < AchievementList.a) {
+        	AchievementList.a = j;
+        }
+
+        if (k < AchievementList.b) {
+            AchievementList.b = k;
+        }
+
+        if (j > AchievementList.c) {
+            AchievementList.c = j;
+        }
+
+        if (k > AchievementList.d) {
+            AchievementList.d = k;
+        }
+
+        this.c = achievement;
+    }
+
+    public Achievement a() {
+        this.g = true;
+        return this;
+    }
+
+    public Achievement b() {
+        this.m = true;
+        return this;
+    }
+
+    public Achievement c() {
+        super.d();
+        AchievementList.e.add(this);
+        return this;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AchievementList.java b/src/main/java/net/minecraft/server/AchievementList.java
new file mode 100644
index 00000000..f6b4a899
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AchievementList.java
@@ -0,0 +1,37 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AchievementList {
+
+    public static int a;
+    public static int b;
+    public static int c;
+    public static int d;
+    public static List e = new ArrayList();
+    public static Achievement f = (new Achievement(0, "openInventory", 0, 0, Item.BOOK, (Achievement) null)).a().c();
+    public static Achievement g = (new Achievement(1, "mineWood", 2, 1, Block.LOG, f)).c();
+    public static Achievement h = (new Achievement(2, "buildWorkBench", 4, -1, Block.WORKBENCH, g)).c();
+    public static Achievement i = (new Achievement(3, "buildPickaxe", 4, 2, Item.WOOD_PICKAXE, h)).c();
+    public static Achievement j = (new Achievement(4, "buildFurnace", 3, 4, Block.BURNING_FURNACE, i)).c();
+    public static Achievement k = (new Achievement(5, "acquireIron", 1, 4, Item.IRON_INGOT, j)).c();
+    public static Achievement l = (new Achievement(6, "buildHoe", 2, -3, Item.WOOD_HOE, h)).c();
+    public static Achievement m = (new Achievement(7, "makeBread", -1, -3, Item.BREAD, l)).c();
+    public static Achievement n = (new Achievement(8, "bakeCake", 0, -5, Item.CAKE, l)).c();
+    public static Achievement o = (new Achievement(9, "buildBetterPickaxe", 6, 2, Item.STONE_PICKAXE, i)).c();
+    public static Achievement p = (new Achievement(10, "cookFish", 2, 6, Item.COOKED_FISH, j)).c();
+    public static Achievement q = (new Achievement(11, "onARail", 2, 3, Block.RAILS, k)).b().c();
+    public static Achievement r = (new Achievement(12, "buildSword", 6, -1, Item.WOOD_SWORD, h)).c();
+    public static Achievement s = (new Achievement(13, "killEnemy", 8, -1, Item.BONE, r)).c();
+    public static Achievement t = (new Achievement(14, "killCow", 7, -3, Item.LEATHER, r)).c();
+    public static Achievement u = (new Achievement(15, "flyPig", 8, -4, Item.SADDLE, t)).b().c();
+
+    public AchievementList() {}
+
+    public static void a() {}
+
+    static {
+        System.out.println(e.size() + " achievements");
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AchievementMap.java b/src/main/java/net/minecraft/server/AchievementMap.java
new file mode 100644
index 00000000..ab48b194
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AchievementMap.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.Map;
+
+public class AchievementMap {
+
+    public static AchievementMap a = new AchievementMap();
+    private Map b = new HashMap();
+
+    private AchievementMap() {
+        try {
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(AchievementMap.class.getResourceAsStream("/achievement/map.txt")));
+
+            String s;
+
+            while ((s = bufferedreader.readLine()) != null) {
+                String[] astring = s.split(",");
+                int i = Integer.parseInt(astring[0]);
+
+                this.b.put(Integer.valueOf(i), astring[1]);
+            }
+
+            bufferedreader.close();
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    public static String a(int i) {
+        return (String) a.b.get(Integer.valueOf(i));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AxisAlignedBB.java b/src/main/java/net/minecraft/server/AxisAlignedBB.java
new file mode 100644
index 00000000..1a95cdfa
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AxisAlignedBB.java
@@ -0,0 +1,334 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AxisAlignedBB {
+
+    private static List g = new ArrayList();
+    private static int h = 0;
+    public double a;
+    public double b;
+    public double c;
+    public double d;
+    public double e;
+    public double f;
+
+    public static AxisAlignedBB a(double d0, double d1, double d2, double d3, double d4, double d5) {
+        return new AxisAlignedBB(d0, d1, d2, d3, d4, d5);
+    }
+
+    public static void a() {
+        h = 0;
+    }
+
+    public static AxisAlignedBB b(double d0, double d1, double d2, double d3, double d4, double d5) {
+        if (h >= g.size()) {
+            g.add(a(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D));
+        }
+
+        return ((AxisAlignedBB) g.get(h++)).c(d0, d1, d2, d3, d4, d5);
+    }
+
+    private AxisAlignedBB(double d0, double d1, double d2, double d3, double d4, double d5) {
+        this.a = d0;
+        this.b = d1;
+        this.c = d2;
+        this.d = d3;
+        this.e = d4;
+        this.f = d5;
+    }
+
+    public AxisAlignedBB c(double d0, double d1, double d2, double d3, double d4, double d5) {
+        this.a = d0;
+        this.b = d1;
+        this.c = d2;
+        this.d = d3;
+        this.e = d4;
+        this.f = d5;
+        return this;
+    }
+
+    public AxisAlignedBB a(double d0, double d1, double d2) {
+        double d3 = this.a;
+        double d4 = this.b;
+        double d5 = this.c;
+        double d6 = this.d;
+        double d7 = this.e;
+        double d8 = this.f;
+
+        if (d0 < 0.0D) {
+            d3 += d0;
+        }
+
+        if (d0 > 0.0D) {
+            d6 += d0;
+        }
+
+        if (d1 < 0.0D) {
+            d4 += d1;
+        }
+
+        if (d1 > 0.0D) {
+            d7 += d1;
+        }
+
+        if (d2 < 0.0D) {
+            d5 += d2;
+        }
+
+        if (d2 > 0.0D) {
+            d8 += d2;
+        }
+
+        return b(d3, d4, d5, d6, d7, d8);
+    }
+
+    public AxisAlignedBB b(double d0, double d1, double d2) {
+        double d3 = this.a - d0;
+        double d4 = this.b - d1;
+        double d5 = this.c - d2;
+        double d6 = this.d + d0;
+        double d7 = this.e + d1;
+        double d8 = this.f + d2;
+
+        return b(d3, d4, d5, d6, d7, d8);
+    }
+
+    public AxisAlignedBB c(double d0, double d1, double d2) {
+        return b(this.a + d0, this.b + d1, this.c + d2, this.d + d0, this.e + d1, this.f + d2);
+    }
+
+    public double a(AxisAlignedBB axisalignedbb, double d0) {
+        if (axisalignedbb.e > this.b && axisalignedbb.b < this.e) {
+            if (axisalignedbb.f > this.c && axisalignedbb.c < this.f) {
+                double d1;
+
+                if (d0 > 0.0D && axisalignedbb.d <= this.a) {
+                    d1 = this.a - axisalignedbb.d;
+                    if (d1 < d0) {
+                        d0 = d1;
+                    }
+                }
+
+                if (d0 < 0.0D && axisalignedbb.a >= this.d) {
+                    d1 = this.d - axisalignedbb.a;
+                    if (d1 > d0) {
+                        d0 = d1;
+                    }
+                }
+
+                return d0;
+            } else {
+                return d0;
+            }
+        } else {
+            return d0;
+        }
+    }
+
+    public double b(AxisAlignedBB axisalignedbb, double d0) {
+        if (axisalignedbb.d > this.a && axisalignedbb.a < this.d) {
+            if (axisalignedbb.f > this.c && axisalignedbb.c < this.f) {
+                double d1;
+
+                if (d0 > 0.0D && axisalignedbb.e <= this.b) {
+                    d1 = this.b - axisalignedbb.e;
+                    if (d1 < d0) {
+                        d0 = d1;
+                    }
+                }
+
+                if (d0 < 0.0D && axisalignedbb.b >= this.e) {
+                    d1 = this.e - axisalignedbb.b;
+                    if (d1 > d0) {
+                        d0 = d1;
+                    }
+                }
+
+                return d0;
+            } else {
+                return d0;
+            }
+        } else {
+            return d0;
+        }
+    }
+
+    public double c(AxisAlignedBB axisalignedbb, double d0) {
+        if (axisalignedbb.d > this.a && axisalignedbb.a < this.d) {
+            if (axisalignedbb.e > this.b && axisalignedbb.b < this.e) {
+                double d1;
+
+                if (d0 > 0.0D && axisalignedbb.f <= this.c) {
+                    d1 = this.c - axisalignedbb.f;
+                    if (d1 < d0) {
+                        d0 = d1;
+                    }
+                }
+
+                if (d0 < 0.0D && axisalignedbb.c >= this.f) {
+                    d1 = this.f - axisalignedbb.c;
+                    if (d1 > d0) {
+                        d0 = d1;
+                    }
+                }
+
+                return d0;
+            } else {
+                return d0;
+            }
+        } else {
+            return d0;
+        }
+    }
+
+    public boolean a(AxisAlignedBB axisalignedbb) {
+        return axisalignedbb.d > this.a && axisalignedbb.a < this.d ? (axisalignedbb.e > this.b && axisalignedbb.b < this.e ? axisalignedbb.f > this.c && axisalignedbb.c < this.f : false) : false;
+    }
+
+    public AxisAlignedBB d(double d0, double d1, double d2) {
+        this.a += d0;
+        this.b += d1;
+        this.c += d2;
+        this.d += d0;
+        this.e += d1;
+        this.f += d2;
+        return this;
+    }
+
+    public boolean a(Vec3D vec3d) {
+        return vec3d.a > this.a && vec3d.a < this.d ? (vec3d.b > this.b && vec3d.b < this.e ? vec3d.c > this.c && vec3d.c < this.f : false) : false;
+    }
+
+    public AxisAlignedBB shrink(double d0, double d1, double d2) {
+        double d3 = this.a + d0;
+        double d4 = this.b + d1;
+        double d5 = this.c + d2;
+        double d6 = this.d - d0;
+        double d7 = this.e - d1;
+        double d8 = this.f - d2;
+
+        return b(d3, d4, d5, d6, d7, d8);
+    }
+
+    public AxisAlignedBB clone() {
+        return b(this.a, this.b, this.c, this.d, this.e, this.f);
+    }
+
+    public MovingObjectPosition a(Vec3D vec3d, Vec3D vec3d1) {
+        Vec3D vec3d2 = vec3d.a(vec3d1, this.a);
+        Vec3D vec3d3 = vec3d.a(vec3d1, this.d);
+        Vec3D vec3d4 = vec3d.b(vec3d1, this.b);
+        Vec3D vec3d5 = vec3d.b(vec3d1, this.e);
+        Vec3D vec3d6 = vec3d.c(vec3d1, this.c);
+        Vec3D vec3d7 = vec3d.c(vec3d1, this.f);
+
+        if (!this.b(vec3d2)) {
+            vec3d2 = null;
+        }
+
+        if (!this.b(vec3d3)) {
+            vec3d3 = null;
+        }
+
+        if (!this.c(vec3d4)) {
+            vec3d4 = null;
+        }
+
+        if (!this.c(vec3d5)) {
+            vec3d5 = null;
+        }
+
+        if (!this.d(vec3d6)) {
+            vec3d6 = null;
+        }
+
+        if (!this.d(vec3d7)) {
+            vec3d7 = null;
+        }
+
+        Vec3D vec3d8 = null;
+
+        if (vec3d2 != null && (vec3d8 == null || vec3d.b(vec3d2) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d2;
+        }
+
+        if (vec3d3 != null && (vec3d8 == null || vec3d.b(vec3d3) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d3;
+        }
+
+        if (vec3d4 != null && (vec3d8 == null || vec3d.b(vec3d4) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d4;
+        }
+
+        if (vec3d5 != null && (vec3d8 == null || vec3d.b(vec3d5) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d5;
+        }
+
+        if (vec3d6 != null && (vec3d8 == null || vec3d.b(vec3d6) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d6;
+        }
+
+        if (vec3d7 != null && (vec3d8 == null || vec3d.b(vec3d7) < vec3d.b(vec3d8))) {
+            vec3d8 = vec3d7;
+        }
+
+        if (vec3d8 == null) {
+            return null;
+        } else {
+            byte b0 = -1;
+
+            if (vec3d8 == vec3d2) {
+                b0 = 4;
+            }
+
+            if (vec3d8 == vec3d3) {
+                b0 = 5;
+            }
+
+            if (vec3d8 == vec3d4) {
+                b0 = 0;
+            }
+
+            if (vec3d8 == vec3d5) {
+                b0 = 1;
+            }
+
+            if (vec3d8 == vec3d6) {
+                b0 = 2;
+            }
+
+            if (vec3d8 == vec3d7) {
+                b0 = 3;
+            }
+
+            return new MovingObjectPosition(0, 0, 0, b0, vec3d8);
+        }
+    }
+
+    private boolean b(Vec3D vec3d) {
+        return vec3d == null ? false : vec3d.b >= this.b && vec3d.b <= this.e && vec3d.c >= this.c && vec3d.c <= this.f;
+    }
+
+    private boolean c(Vec3D vec3d) {
+        return vec3d == null ? false : vec3d.a >= this.a && vec3d.a <= this.d && vec3d.c >= this.c && vec3d.c <= this.f;
+    }
+
+    private boolean d(Vec3D vec3d) {
+        return vec3d == null ? false : vec3d.a >= this.a && vec3d.a <= this.d && vec3d.b >= this.b && vec3d.b <= this.e;
+    }
+
+    public void b(AxisAlignedBB axisalignedbb) {
+        this.a = axisalignedbb.a;
+        this.b = axisalignedbb.b;
+        this.c = axisalignedbb.c;
+        this.d = axisalignedbb.d;
+        this.e = axisalignedbb.e;
+        this.f = axisalignedbb.f;
+    }
+
+    public String toString() {
+        return "box[" + this.a + ", " + this.b + ", " + this.c + " -> " + this.d + ", " + this.e + ", " + this.f + "]";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BedBlockTextures.java b/src/main/java/net/minecraft/server/BedBlockTextures.java
new file mode 100644
index 00000000..156e2e3a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BedBlockTextures.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public class BedBlockTextures {
+
+    public static final int[] a = new int[] { 3, 4, 2, 5};
+    public static final int[] b = new int[] { 2, 3, 0, 1};
+    public static final int[][] c = new int[][] { { 1, 0, 3, 2, 5, 4}, { 1, 0, 5, 4, 2, 3}, { 1, 0, 2, 3, 4, 5}, { 1, 0, 4, 5, 3, 2}};
+
+    public BedBlockTextures() {}
+}
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
new file mode 100644
index 00000000..687e4e76
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -0,0 +1,121 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class BiomeBase {
+
+    public static final BiomeBase RAINFOREST = (new BiomeRainforest()).b(588342).a("Rainforest").a(2094168);
+    public static final BiomeBase SWAMPLAND = (new BiomeSwamp()).b(522674).a("Swampland").a(9154376);
+    public static final BiomeBase SEASONAL_FOREST = (new BiomeBase()).b(10215459).a("Seasonal Forest");
+    public static final BiomeBase FOREST = (new BiomeForest()).b(353825).a("Forest").a(5159473);
+    public static final BiomeBase SAVANNA = (new BiomeDesert()).b(14278691).a("Savanna");
+    public static final BiomeBase SHRUBLAND = (new BiomeBase()).b(10595616).a("Shrubland");
+    public static final BiomeBase TAIGA = (new BiomeTaiga()).b(3060051).a("Taiga").b().a(8107825);
+    public static final BiomeBase DESERT = (new BiomeDesert()).b(16421912).a("Desert").e();
+    public static final BiomeBase PLAINS = (new BiomeDesert()).b(16767248).a("Plains");
+    public static final BiomeBase ICE_DESERT = (new BiomeDesert()).b(16772499).a("Ice Desert").b().e().a(12899129);
+    public static final BiomeBase TUNDRA = (new BiomeBase()).b(5762041).a("Tundra").b().a(12899129);
+    public static final BiomeBase HELL = (new BiomeHell()).b(16711680).a("Hell").e();
+    public static final BiomeBase SKY = (new BiomeSky()).b(8421631).a("Sky").e();
+    public String n;
+    public int o;
+    public byte p;
+    public byte q;
+    public int r;
+    protected List s;
+    protected List t;
+    protected List u;
+    private boolean v;
+    private boolean w;
+    private static BiomeBase[] x = new BiomeBase[4096];
+
+    protected BiomeBase() {
+        this.p = (byte) Block.GRASS.id;
+        this.q = (byte) Block.DIRT.id;
+        this.r = 5169201;
+        this.s = new ArrayList();
+        this.t = new ArrayList();
+        this.u = new ArrayList();
+        this.w = true;
+        this.s.add(new BiomeMeta(EntitySpider.class, 10));
+        this.s.add(new BiomeMeta(EntityZombie.class, 10));
+        this.s.add(new BiomeMeta(EntitySkeleton.class, 10));
+        this.s.add(new BiomeMeta(EntityCreeper.class, 10));
+        this.s.add(new BiomeMeta(EntitySlime.class, 10));
+        this.t.add(new BiomeMeta(EntitySheep.class, 12));
+        this.t.add(new BiomeMeta(EntityPig.class, 10));
+        this.t.add(new BiomeMeta(EntityChicken.class, 10));
+        this.t.add(new BiomeMeta(EntityCow.class, 8));
+        this.u.add(new BiomeMeta(EntitySquid.class, 10));
+    }
+
+    private BiomeBase e() {
+        this.w = false;
+        return this;
+    }
+
+    public static void a() {
+        for (int i = 0; i < 64; ++i) {
+            for (int j = 0; j < 64; ++j) {
+                x[i + j * 64] = a((float) i / 63.0F, (float) j / 63.0F);
+            }
+        }
+
+        DESERT.p = DESERT.q = (byte) Block.SAND.id;
+        ICE_DESERT.p = ICE_DESERT.q = (byte) Block.SAND.id;
+    }
+
+    public WorldGenerator a(Random random) {
+        return (WorldGenerator) (random.nextInt(10) == 0 ? new WorldGenBigTree() : new WorldGenTrees());
+    }
+
+    protected BiomeBase b() {
+        this.v = true;
+        return this;
+    }
+
+    protected BiomeBase a(String s) {
+        this.n = s;
+        return this;
+    }
+
+    protected BiomeBase a(int i) {
+        this.r = i;
+        return this;
+    }
+
+    protected BiomeBase b(int i) {
+        this.o = i;
+        return this;
+    }
+
+    public static BiomeBase a(double d0, double d1) {
+        int i = (int) (d0 * 63.0D);
+        int j = (int) (d1 * 63.0D);
+
+        return x[i + j * 64];
+    }
+
+    public static BiomeBase a(float f, float f1) {
+        f1 *= f;
+        return f < 0.1F ? TUNDRA : (f1 < 0.2F ? (f < 0.5F ? TUNDRA : (f < 0.95F ? SAVANNA : DESERT)) : (f1 > 0.5F && f < 0.7F ? SWAMPLAND : (f < 0.5F ? TAIGA : (f < 0.97F ? (f1 < 0.35F ? SHRUBLAND : FOREST) : (f1 < 0.45F ? PLAINS : (f1 < 0.9F ? SEASONAL_FOREST : RAINFOREST))))));
+    }
+
+    public List a(EnumCreatureType enumcreaturetype) {
+        return enumcreaturetype == EnumCreatureType.MONSTER ? this.s : (enumcreaturetype == EnumCreatureType.CREATURE ? this.t : (enumcreaturetype == EnumCreatureType.WATER_CREATURE ? this.u : null));
+    }
+
+    public boolean c() {
+        return this.v;
+    }
+
+    public boolean d() {
+        return this.v ? false : this.w;
+    }
+
+    static {
+        a();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeDesert.java b/src/main/java/net/minecraft/server/BiomeDesert.java
new file mode 100644
index 00000000..e4815a65
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeDesert.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+public class BiomeDesert extends BiomeBase {
+
+    public BiomeDesert() {}
+}
diff --git a/src/main/java/net/minecraft/server/BiomeForest.java b/src/main/java/net/minecraft/server/BiomeForest.java
new file mode 100644
index 00000000..48005be9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeForest.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BiomeForest extends BiomeBase {
+
+    public BiomeForest() {
+        this.t.add(new BiomeMeta(EntityWolf.class, 2));
+    }
+
+    public WorldGenerator a(Random random) {
+        return (WorldGenerator) (random.nextInt(5) == 0 ? new WorldGenForest() : (random.nextInt(3) == 0 ? new WorldGenBigTree() : new WorldGenTrees()));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeHell.java b/src/main/java/net/minecraft/server/BiomeHell.java
new file mode 100644
index 00000000..08ee915b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeHell.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class BiomeHell extends BiomeBase {
+
+    public BiomeHell() {
+        this.s.clear();
+        this.t.clear();
+        this.u.clear();
+        this.s.add(new BiomeMeta(EntityGhast.class, 10));
+        this.s.add(new BiomeMeta(EntityPigZombie.class, 10));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeMeta.java b/src/main/java/net/minecraft/server/BiomeMeta.java
new file mode 100644
index 00000000..3e32b12b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeMeta.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class BiomeMeta {
+
+    public Class a;
+    public int b;
+
+    public BiomeMeta(Class oclass, int i) {
+        this.a = oclass;
+        this.b = i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeRainforest.java b/src/main/java/net/minecraft/server/BiomeRainforest.java
new file mode 100644
index 00000000..5bdae2ca
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeRainforest.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BiomeRainforest extends BiomeBase {
+
+    public BiomeRainforest() {}
+
+    public WorldGenerator a(Random random) {
+        return (WorldGenerator) (random.nextInt(3) == 0 ? new WorldGenBigTree() : new WorldGenTrees());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeSky.java b/src/main/java/net/minecraft/server/BiomeSky.java
new file mode 100644
index 00000000..f920305d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeSky.java
@@ -0,0 +1,11 @@
+package net.minecraft.server;
+
+public class BiomeSky extends BiomeBase {
+
+    public BiomeSky() {
+        this.s.clear();
+        this.t.clear();
+        this.u.clear();
+        this.t.add(new BiomeMeta(EntityChicken.class, 10));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BiomeSwamp.java b/src/main/java/net/minecraft/server/BiomeSwamp.java
new file mode 100644
index 00000000..44c2a9b1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeSwamp.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+public class BiomeSwamp extends BiomeBase {
+
+    public BiomeSwamp() {}
+}
diff --git a/src/main/java/net/minecraft/server/BiomeTaiga.java b/src/main/java/net/minecraft/server/BiomeTaiga.java
new file mode 100644
index 00000000..45a53b07
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BiomeTaiga.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BiomeTaiga extends BiomeBase {
+
+    public BiomeTaiga() {
+        this.t.add(new BiomeMeta(EntityWolf.class, 2));
+    }
+
+    public WorldGenerator a(Random random) {
+        return (WorldGenerator) (random.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockBed.java b/src/main/java/net/minecraft/server/BlockBed.java
new file mode 100644
index 00000000..fae57564
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockBed.java
@@ -0,0 +1,199 @@
+package net.minecraft.server;
+
+import java.util.Iterator;
+import java.util.Random;
+
+public class BlockBed extends Block {
+
+    public static final int[][] a = new int[][] { { 0, 1}, { -1, 0}, { 0, -1}, { 1, 0}};
+
+    public BlockBed(int i) {
+        super(i, 134, Material.CLOTH);
+        this.o();
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (world.isStatic) {
+            return true;
+        } else {
+            int l = world.getData(i, j, k);
+
+            if (!d(l)) {
+                int i1 = c(l);
+
+                i += a[i1][0];
+                k += a[i1][1];
+                if (world.getTypeId(i, j, k) != this.id) {
+                    return true;
+                }
+
+                l = world.getData(i, j, k);
+            }
+
+            if (!world.worldProvider.d()) {
+                double d0 = (double) i + 0.5D;
+                double d1 = (double) j + 0.5D;
+                double d2 = (double) k + 0.5D;
+
+                world.setTypeId(i, j, k, 0);
+                int j1 = c(l);
+
+                i += a[j1][0];
+                k += a[j1][1];
+                if (world.getTypeId(i, j, k) == this.id) {
+                    world.setTypeId(i, j, k, 0);
+                    d0 = (d0 + (double) i + 0.5D) / 2.0D;
+                    d1 = (d1 + (double) j + 0.5D) / 2.0D;
+                    d2 = (d2 + (double) k + 0.5D) / 2.0D;
+                }
+
+                world.createExplosion((Entity) null, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), 5.0F, true);
+                return true;
+            } else {
+                if (e(l)) {
+                    EntityHuman entityhuman1 = null;
+                    Iterator iterator = world.players.iterator();
+
+                    while (iterator.hasNext()) {
+                        EntityHuman entityhuman2 = (EntityHuman) iterator.next();
+
+                        if (entityhuman2.isSleeping()) {
+                            ChunkCoordinates chunkcoordinates = entityhuman2.A;
+
+                            if (chunkcoordinates.x == i && chunkcoordinates.y == j && chunkcoordinates.z == k) {
+                                entityhuman1 = entityhuman2;
+                            }
+                        }
+                    }
+
+                    if (entityhuman1 != null) {
+                        entityhuman.a("tile.bed.occupied");
+                        return true;
+                    }
+
+                    a(world, i, j, k, false);
+                }
+
+                EnumBedError enumbederror = entityhuman.a(i, j, k);
+
+                if (enumbederror == EnumBedError.OK) {
+                    a(world, i, j, k, true);
+                    return true;
+                } else {
+                    if (enumbederror == EnumBedError.NOT_POSSIBLE_NOW) {
+                        entityhuman.a("tile.bed.noSleep");
+                    }
+
+                    return true;
+                }
+            }
+        }
+    }
+
+    public int a(int i, int j) {
+        if (i == 0) {
+            return Block.WOOD.textureId;
+        } else {
+            int k = c(j);
+            int l = BedBlockTextures.c[k][i];
+
+            return d(j) ? (l == 2 ? this.textureId + 2 + 16 : (l != 5 && l != 4 ? this.textureId + 1 : this.textureId + 1 + 16)) : (l == 3 ? this.textureId - 1 + 16 : (l != 5 && l != 4 ? this.textureId : this.textureId + 16));
+        }
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        this.o();
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+        int j1 = c(i1);
+
+        if (d(i1)) {
+            if (world.getTypeId(i - a[j1][0], j, k - a[j1][1]) != this.id) {
+                world.setTypeId(i, j, k, 0);
+            }
+        } else if (world.getTypeId(i + a[j1][0], j, k + a[j1][1]) != this.id) {
+            world.setTypeId(i, j, k, 0);
+            if (!world.isStatic) {
+                this.g(world, i, j, k, i1);
+            }
+        }
+    }
+
+    public int a(int i, Random random) {
+        return d(i) ? 0 : Item.BED.id;
+    }
+
+    private void o() {
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.5625F, 1.0F);
+    }
+
+    public static int c(int i) {
+        return i & 3;
+    }
+
+    public static boolean d(int i) {
+        return (i & 8) != 0;
+    }
+
+    public static boolean e(int i) {
+        return (i & 4) != 0;
+    }
+
+    public static void a(World world, int i, int j, int k, boolean flag) {
+        int l = world.getData(i, j, k);
+
+        if (flag) {
+            l |= 4;
+        } else {
+            l &= -5;
+        }
+
+        world.setData(i, j, k, l);
+    }
+
+    public static ChunkCoordinates f(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+        int j1 = c(i1);
+
+        for (int k1 = 0; k1 <= 1; ++k1) {
+            int l1 = i - a[j1][0] * k1 - 1;
+            int i2 = k - a[j1][1] * k1 - 1;
+            int j2 = l1 + 2;
+            int k2 = i2 + 2;
+
+            for (int l2 = l1; l2 <= j2; ++l2) {
+                for (int i3 = i2; i3 <= k2; ++i3) {
+                    if (world.e(l2, j - 1, i3) && world.isEmpty(l2, j, i3) && world.isEmpty(l2, j + 1, i3)) {
+                        if (l <= 0) {
+                            return new ChunkCoordinates(l2, j, i3);
+                        }
+
+                        --l;
+                    }
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public void dropNaturally(World world, int i, int j, int k, int l, float f) {
+        if (!d(l)) {
+            super.dropNaturally(world, i, j, k, l, f);
+        }
+    }
+
+    public int e() {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockBookshelf.java b/src/main/java/net/minecraft/server/BlockBookshelf.java
new file mode 100644
index 00000000..ce70e2b8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockBookshelf.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockBookshelf extends Block {
+
+    public BlockBookshelf(int i, int j) {
+        super(i, j, Material.WOOD);
+    }
+
+    public int a(int i) {
+        return i <= 1 ? 4 : this.textureId;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockBreakable.java b/src/main/java/net/minecraft/server/BlockBreakable.java
new file mode 100644
index 00000000..d5b2a6e5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockBreakable.java
@@ -0,0 +1,15 @@
+package net.minecraft.server;
+
+public class BlockBreakable extends Block {
+
+    private boolean a;
+
+    protected BlockBreakable(int i, int j, Material material, boolean flag) {
+        super(i, j, material);
+        this.a = flag;
+    }
+
+    public boolean a() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockCake.java b/src/main/java/net/minecraft/server/BlockCake.java
new file mode 100644
index 00000000..7705fbd5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockCake.java
@@ -0,0 +1,91 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockCake extends Block {
+
+    protected BlockCake(int i, int j) {
+        super(i, j, Material.CAKE);
+        this.a(true);
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        int l = iblockaccess.getData(i, j, k);
+        float f = 0.0625F;
+        float f1 = (float) (1 + l * 2) / 16.0F;
+        float f2 = 0.5F;
+
+        this.a(f1, 0.0F, f, 1.0F - f, f2, 1.0F - f);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        int l = world.getData(i, j, k);
+        float f = 0.0625F;
+        float f1 = (float) (1 + l * 2) / 16.0F;
+        float f2 = 0.5F;
+
+        return AxisAlignedBB.b((double) ((float) i + f1), (double) j, (double) ((float) k + f), (double) ((float) (i + 1) - f), (double) ((float) j + f2 - f), (double) ((float) (k + 1) - f));
+    }
+
+    public int a(int i, int j) {
+        return i == 1 ? this.textureId : (i == 0 ? this.textureId + 3 : (j > 0 && i == 4 ? this.textureId + 2 : this.textureId + 1));
+    }
+
+    public int a(int i) {
+        return i == 1 ? this.textureId : (i == 0 ? this.textureId + 3 : this.textureId + 1);
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        this.c(world, i, j, k, entityhuman);
+        return true;
+    }
+
+    public void b(World world, int i, int j, int k, EntityHuman entityhuman) {
+        this.c(world, i, j, k, entityhuman);
+    }
+
+    private void c(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (entityhuman.health < 20) {
+            entityhuman.b(3);
+            int l = world.getData(i, j, k) + 1;
+
+            if (l >= 6) {
+                world.setTypeId(i, j, k, 0);
+            } else {
+                world.setData(i, j, k, l);
+                world.i(i, j, k);
+            }
+        }
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return !super.canPlace(world, i, j, k) ? false : this.f(world, i, j, k);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (!this.f(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+
+    public boolean f(World world, int i, int j, int k) {
+        return world.getMaterial(i, j - 1, k).isBuildable();
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    public int a(int i, Random random) {
+        return 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockClay.java b/src/main/java/net/minecraft/server/BlockClay.java
new file mode 100644
index 00000000..c0c1581c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockClay.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockClay extends Block {
+
+    public BlockClay(int i, int j) {
+        super(i, j, Material.CLAY);
+    }
+
+    public int a(int i, Random random) {
+        return Item.CLAY_BALL.id;
+    }
+
+    public int a(Random random) {
+        return 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockCloth.java b/src/main/java/net/minecraft/server/BlockCloth.java
new file mode 100644
index 00000000..c51c3b4f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockCloth.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+public class BlockCloth extends Block {
+
+    public BlockCloth() {
+        super(35, 64, Material.CLOTH);
+    }
+
+    public int a(int i, int j) {
+        if (j == 0) {
+            return this.textureId;
+        } else {
+            j = ~(j & 15);
+            return 113 + ((j & 8) >> 3) + (j & 7) * 16;
+        }
+    }
+
+    protected int a_(int i) {
+        return i;
+    }
+
+    public static int c(int i) {
+        return ~i & 15;
+    }
+
+    public static int d(int i) {
+        return ~i & 15;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockContainer.java b/src/main/java/net/minecraft/server/BlockContainer.java
new file mode 100644
index 00000000..e8dd7edc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockContainer.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+public abstract class BlockContainer extends Block {
+
+    protected BlockContainer(int i, Material material) {
+        super(i, material);
+        isTileEntity[i] = true;
+    }
+
+    protected BlockContainer(int i, int j, Material material) {
+        super(i, j, material);
+        isTileEntity[i] = true;
+    }
+
+    public void c(World world, int i, int j, int k) {
+        super.c(world, i, j, k);
+        world.setTileEntity(i, j, k, this.a_());
+    }
+
+    public void remove(World world, int i, int j, int k) {
+        super.remove(world, i, j, k);
+        world.o(i, j, k);
+    }
+
+    protected abstract TileEntity a_();
+}
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
new file mode 100644
index 00000000..0025bc3d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -0,0 +1,114 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockCrops extends BlockFlower {
+
+    protected BlockCrops(int i, int j) {
+        super(i, j);
+        this.textureId = j;
+        this.a(true);
+        float f = 0.5F;
+
+        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
+    }
+
+    protected boolean c(int i) {
+        return i == Block.SOIL.id;
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        super.a(world, i, j, k, random);
+        if (world.getLightLevel(i, j + 1, k) >= 9) {
+            int l = world.getData(i, j, k);
+
+            if (l < 7) {
+                float f = this.h(world, i, j, k);
+
+                if (random.nextInt((int) (100.0F / f)) == 0) {
+                    ++l;
+                    world.setData(i, j, k, l);
+                }
+            }
+        }
+    }
+
+    public void d_(World world, int i, int j, int k) {
+        world.setData(i, j, k, 7);
+    }
+
+    private float h(World world, int i, int j, int k) {
+        float f = 1.0F;
+        int l = world.getTypeId(i, j, k - 1);
+        int i1 = world.getTypeId(i, j, k + 1);
+        int j1 = world.getTypeId(i - 1, j, k);
+        int k1 = world.getTypeId(i + 1, j, k);
+        int l1 = world.getTypeId(i - 1, j, k - 1);
+        int i2 = world.getTypeId(i + 1, j, k - 1);
+        int j2 = world.getTypeId(i + 1, j, k + 1);
+        int k2 = world.getTypeId(i - 1, j, k + 1);
+        boolean flag = j1 == this.id || k1 == this.id;
+        boolean flag1 = l == this.id || i1 == this.id;
+        boolean flag2 = l1 == this.id || i2 == this.id || j2 == this.id || k2 == this.id;
+
+        for (int l2 = i - 1; l2 <= i + 1; ++l2) {
+            for (int i3 = k - 1; i3 <= k + 1; ++i3) {
+                int j3 = world.getTypeId(l2, j - 1, i3);
+                float f1 = 0.0F;
+
+                if (j3 == Block.SOIL.id) {
+                    f1 = 1.0F;
+                    if (world.getData(l2, j - 1, i3) > 0) {
+                        f1 = 3.0F;
+                    }
+                }
+
+                if (l2 != i || i3 != k) {
+                    f1 /= 4.0F;
+                }
+
+                f += f1;
+            }
+        }
+
+        if (flag2 || flag && flag1) {
+            f /= 2.0F;
+        }
+
+        return f;
+    }
+
+    public int a(int i, int j) {
+        if (j < 0) {
+            j = 7;
+        }
+
+        return this.textureId + j;
+    }
+
+    public void dropNaturally(World world, int i, int j, int k, int l, float f) {
+        super.dropNaturally(world, i, j, k, l, f);
+        if (!world.isStatic) {
+            for (int i1 = 0; i1 < 3; ++i1) {
+                if (world.random.nextInt(15) <= l) {
+                    float f1 = 0.7F;
+                    float f2 = world.random.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                    float f3 = world.random.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                    float f4 = world.random.nextFloat() * f1 + (1.0F - f1) * 0.5F;
+                    EntityItem entityitem = new EntityItem(world, (double) ((float) i + f2), (double) ((float) j + f3), (double) ((float) k + f4), new ItemStack(Item.SEEDS));
+
+                    entityitem.pickupDelay = 10;
+                    world.addEntity(entityitem);
+                }
+            }
+        }
+    }
+
+    public int a(int i, Random random) {
+        return i == 7 ? Item.WHEAT.id : -1;
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockDeadBush.java b/src/main/java/net/minecraft/server/BlockDeadBush.java
new file mode 100644
index 00000000..5786b34c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockDeadBush.java
@@ -0,0 +1,25 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockDeadBush extends BlockFlower {
+
+    protected BlockDeadBush(int i, int j) {
+        super(i, j);
+        float f = 0.4F;
+
+        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.8F, 0.5F + f);
+    }
+
+    protected boolean c(int i) {
+        return i == Block.SAND.id;
+    }
+
+    public int a(int i, int j) {
+        return this.textureId;
+    }
+
+    public int a(int i, Random random) {
+        return -1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockDiode.java b/src/main/java/net/minecraft/server/BlockDiode.java
new file mode 100644
index 00000000..c213f505
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockDiode.java
@@ -0,0 +1,145 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockDiode extends Block {
+
+    public static final double[] a = new double[] { -0.0625D, 0.0625D, 0.1875D, 0.3125D};
+    private static final int[] b = new int[] { 1, 2, 3, 4};
+    private final boolean c;
+
+    protected BlockDiode(int i, boolean flag) {
+        super(i, 6, Material.ORIENTABLE);
+        this.c = flag;
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return !world.e(i, j - 1, k) ? false : super.canPlace(world, i, j, k);
+    }
+
+    public boolean f(World world, int i, int j, int k) {
+        return !world.e(i, j - 1, k) ? false : super.f(world, i, j, k);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        int l = world.getData(i, j, k);
+        boolean flag = this.f(world, i, j, k, l);
+
+        if (this.c && !flag) {
+            world.setTypeIdAndData(i, j, k, Block.DIODE_OFF.id, l);
+        } else if (!this.c) {
+            world.setTypeIdAndData(i, j, k, Block.DIODE_ON.id, l);
+            if (!flag) {
+                int i1 = (l & 12) >> 2;
+
+                world.c(i, j, k, Block.DIODE_ON.id, b[i1] * 2);
+            }
+        }
+    }
+
+    public int a(int i, int j) {
+        return i == 0 ? (this.c ? 99 : 115) : (i == 1 ? (this.c ? 147 : 131) : 5);
+    }
+
+    public int a(int i) {
+        return this.a(i, 0);
+    }
+
+    public boolean d(World world, int i, int j, int k, int l) {
+        return this.a(world, i, j, k, l);
+    }
+
+    public boolean a(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        if (!this.c) {
+            return false;
+        } else {
+            int i1 = iblockaccess.getData(i, j, k) & 3;
+
+            return i1 == 0 && l == 3 ? true : (i1 == 1 && l == 4 ? true : (i1 == 2 && l == 2 ? true : i1 == 3 && l == 5));
+        }
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (!this.f(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+        } else {
+            int i1 = world.getData(i, j, k);
+            boolean flag = this.f(world, i, j, k, i1);
+            int j1 = (i1 & 12) >> 2;
+
+            if (this.c && !flag) {
+                world.c(i, j, k, this.id, b[j1] * 2);
+            } else if (!this.c && flag) {
+                world.c(i, j, k, this.id, b[j1] * 2);
+            }
+        }
+    }
+
+    private boolean f(World world, int i, int j, int k, int l) {
+        int i1 = l & 3;
+
+        switch (i1) {
+        case 0:
+            return world.isBlockFaceIndirectlyPowered(i, j, k + 1, 3) || world.getTypeId(i, j, k + 1) == Block.REDSTONE_WIRE.id && world.getData(i, j, k + 1) > 0;
+
+        case 1:
+            return world.isBlockFaceIndirectlyPowered(i - 1, j, k, 4) || world.getTypeId(i - 1, j, k) == Block.REDSTONE_WIRE.id && world.getData(i - 1, j, k) > 0;
+
+        case 2:
+            return world.isBlockFaceIndirectlyPowered(i, j, k - 1, 2) || world.getTypeId(i, j, k - 1) == Block.REDSTONE_WIRE.id && world.getData(i, j, k - 1) > 0;
+
+        case 3:
+            return world.isBlockFaceIndirectlyPowered(i + 1, j, k, 5) || world.getTypeId(i + 1, j, k) == Block.REDSTONE_WIRE.id && world.getData(i + 1, j, k) > 0;
+
+        default:
+            return false;
+        }
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        int l = world.getData(i, j, k);
+        int i1 = (l & 12) >> 2;
+
+        i1 = i1 + 1 << 2 & 12;
+        world.setData(i, j, k, i1 | l & 3);
+        return true;
+    }
+
+    public boolean isPowerSource() {
+        return false;
+    }
+
+    public void postPlace(World world, int i, int j, int k, EntityLiving entityliving) {
+        int l = ((MathHelper.floor((double) (entityliving.yaw * 4.0F / 360.0F) + 0.5D) & 3) + 2) % 4;
+
+        world.setData(i, j, k, l);
+        boolean flag = this.f(world, i, j, k, l);
+
+        if (flag) {
+            world.c(i, j, k, this.id, 1);
+        }
+    }
+
+    public void c(World world, int i, int j, int k) {
+        world.applyPhysics(i + 1, j, k, this.id);
+        world.applyPhysics(i - 1, j, k, this.id);
+        world.applyPhysics(i, j, k + 1, this.id);
+        world.applyPhysics(i, j, k - 1, this.id);
+        world.applyPhysics(i, j - 1, k, this.id);
+        world.applyPhysics(i, j + 1, k, this.id);
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public int a(int i, Random random) {
+        return Item.DIODE.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockDirt.java b/src/main/java/net/minecraft/server/BlockDirt.java
new file mode 100644
index 00000000..2f33ac7d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockDirt.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public class BlockDirt extends Block {
+
+    protected BlockDirt(int i, int j) {
+        super(i, j, Material.EARTH);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockFence.java b/src/main/java/net/minecraft/server/BlockFence.java
new file mode 100644
index 00000000..b09a8de8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFence.java
@@ -0,0 +1,24 @@
+package net.minecraft.server;
+
+public class BlockFence extends Block {
+
+    public BlockFence(int i, int j) {
+        super(i, j, Material.WOOD);
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return world.getTypeId(i, j - 1, k) == this.id ? true : (!world.getMaterial(i, j - 1, k).isBuildable() ? false : super.canPlace(world, i, j, k));
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return AxisAlignedBB.b((double) i, (double) j, (double) k, (double) (i + 1), (double) ((float) j + 1.5F), (double) (k + 1));
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockFlower.java b/src/main/java/net/minecraft/server/BlockFlower.java
new file mode 100644
index 00000000..eaa0819d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFlower.java
@@ -0,0 +1,55 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockFlower extends Block {
+
+    protected BlockFlower(int i, int j) {
+        super(i, Material.PLANT);
+        this.textureId = j;
+        this.a(true);
+        float f = 0.2F;
+
+        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 3.0F, 0.5F + f);
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return super.canPlace(world, i, j, k) && this.c(world.getTypeId(i, j - 1, k));
+    }
+
+    protected boolean c(int i) {
+        return i == Block.GRASS.id || i == Block.DIRT.id || i == Block.SOIL.id;
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        super.doPhysics(world, i, j, k, l);
+        this.g(world, i, j, k);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        this.g(world, i, j, k);
+    }
+
+    protected final void g(World world, int i, int j, int k) {
+        if (!this.f(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+
+    public boolean f(World world, int i, int j, int k) {
+        return (world.k(i, j, k) >= 8 || world.isChunkLoaded(i, j, k)) && this.c(world.getTypeId(i, j - 1, k));
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
new file mode 100644
index 00000000..0670b903
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -0,0 +1,234 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public abstract class BlockFluids extends Block {
+
+    protected BlockFluids(int i, Material material) {
+        super(i, (material == Material.LAVA ? 14 : 12) * 16 + 13, material);
+        float f = 0.0F;
+        float f1 = 0.0F;
+
+        this.a(0.0F + f1, 0.0F + f, 0.0F + f1, 1.0F + f1, 1.0F + f, 1.0F + f1);
+        this.a(true);
+    }
+
+    public static float c(int i) {
+        if (i >= 8) {
+            i = 0;
+        }
+
+        float f = (float) (i + 1) / 9.0F;
+
+        return f;
+    }
+
+    public int a(int i) {
+        return i != 0 && i != 1 ? this.textureId + 1 : this.textureId;
+    }
+
+    protected int g(World world, int i, int j, int k) {
+        return world.getMaterial(i, j, k) != this.material ? -1 : world.getData(i, j, k);
+    }
+
+    protected int b(IBlockAccess iblockaccess, int i, int j, int k) {
+        if (iblockaccess.getMaterial(i, j, k) != this.material) {
+            return -1;
+        } else {
+            int l = iblockaccess.getData(i, j, k);
+
+            if (l >= 8) {
+                l = 0;
+            }
+
+            return l;
+        }
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean a(int i, boolean flag) {
+        return flag && i == 0;
+    }
+
+    public boolean b(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        Material material = iblockaccess.getMaterial(i, j, k);
+
+        return material == this.material ? false : (material == Material.ICE ? false : (l == 1 ? true : super.b(iblockaccess, i, j, k, l)));
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public int a(int i, Random random) {
+        return 0;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    private Vec3D c(IBlockAccess iblockaccess, int i, int j, int k) {
+        Vec3D vec3d = Vec3D.create(0.0D, 0.0D, 0.0D);
+        int l = this.b(iblockaccess, i, j, k);
+
+        for (int i1 = 0; i1 < 4; ++i1) {
+            int j1 = i;
+            int k1 = k;
+
+            if (i1 == 0) {
+                j1 = i - 1;
+            }
+
+            if (i1 == 1) {
+                k1 = k - 1;
+            }
+
+            if (i1 == 2) {
+                ++j1;
+            }
+
+            if (i1 == 3) {
+                ++k1;
+            }
+
+            int l1 = this.b(iblockaccess, j1, j, k1);
+            int i2;
+
+            if (l1 < 0) {
+                if (!iblockaccess.getMaterial(j1, j, k1).isSolid()) {
+                    l1 = this.b(iblockaccess, j1, j - 1, k1);
+                    if (l1 >= 0) {
+                        i2 = l1 - (l - 8);
+                        vec3d = vec3d.add((double) ((j1 - i) * i2), (double) ((j - j) * i2), (double) ((k1 - k) * i2));
+                    }
+                }
+            } else if (l1 >= 0) {
+                i2 = l1 - l;
+                vec3d = vec3d.add((double) ((j1 - i) * i2), (double) ((j - j) * i2), (double) ((k1 - k) * i2));
+            }
+        }
+
+        if (iblockaccess.getData(i, j, k) >= 8) {
+            boolean flag = false;
+
+            if (flag || this.b(iblockaccess, i, j, k - 1, 2)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i, j, k + 1, 3)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i - 1, j, k, 4)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i + 1, j, k, 5)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i, j + 1, k - 1, 2)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i, j + 1, k + 1, 3)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i - 1, j + 1, k, 4)) {
+                flag = true;
+            }
+
+            if (flag || this.b(iblockaccess, i + 1, j + 1, k, 5)) {
+                flag = true;
+            }
+
+            if (flag) {
+                vec3d = vec3d.b().add(0.0D, -6.0D, 0.0D);
+            }
+        }
+
+        vec3d = vec3d.b();
+        return vec3d;
+    }
+
+    public void a(World world, int i, int j, int k, Entity entity, Vec3D vec3d) {
+        Vec3D vec3d1 = this.c((IBlockAccess) world, i, j, k);
+
+        vec3d.a += vec3d1.a;
+        vec3d.b += vec3d1.b;
+        vec3d.c += vec3d1.c;
+    }
+
+    public int c() {
+        return this.material == Material.WATER ? 5 : (this.material == Material.LAVA ? 30 : 0);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        super.a(world, i, j, k, random);
+    }
+
+    public void c(World world, int i, int j, int k) {
+        this.i(world, i, j, k);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        this.i(world, i, j, k);
+    }
+
+    private void i(World world, int i, int j, int k) {
+        if (world.getTypeId(i, j, k) == this.id) {
+            if (this.material == Material.LAVA) {
+                boolean flag = false;
+
+                if (flag || world.getMaterial(i, j, k - 1) == Material.WATER) {
+                    flag = true;
+                }
+
+                if (flag || world.getMaterial(i, j, k + 1) == Material.WATER) {
+                    flag = true;
+                }
+
+                if (flag || world.getMaterial(i - 1, j, k) == Material.WATER) {
+                    flag = true;
+                }
+
+                if (flag || world.getMaterial(i + 1, j, k) == Material.WATER) {
+                    flag = true;
+                }
+
+                if (flag || world.getMaterial(i, j + 1, k) == Material.WATER) {
+                    flag = true;
+                }
+
+                if (flag) {
+                    int l = world.getData(i, j, k);
+
+                    if (l == 0) {
+                        world.setTypeId(i, j, k, Block.OBSIDIAN.id);
+                    } else if (l <= 4) {
+                        world.setTypeId(i, j, k, Block.COBBLESTONE.id);
+                    }
+
+                    this.h(world, i, j, k);
+                }
+            }
+        }
+    }
+
+    protected void h(World world, int i, int j, int k) {
+        world.makeSound((double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), "random.fizz", 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+
+        for (int l = 0; l < 8; ++l) {
+            world.a("largesmoke", (double) i + Math.random(), (double) j + 1.2D, (double) k + Math.random(), 0.0D, 0.0D, 0.0D);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockGlass.java b/src/main/java/net/minecraft/server/BlockGlass.java
new file mode 100644
index 00000000..35d1887a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockGlass.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockGlass extends BlockBreakable {
+
+    public BlockGlass(int i, int j, Material material, boolean flag) {
+        super(i, j, material, flag);
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockGravel.java b/src/main/java/net/minecraft/server/BlockGravel.java
new file mode 100644
index 00000000..a180226d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockGravel.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockGravel extends BlockSand {
+
+    public BlockGravel(int i, int j) {
+        super(i, j);
+    }
+
+    public int a(int i, Random random) {
+        return random.nextInt(10) == 0 ? Item.FLINT.id : this.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLadder.java b/src/main/java/net/minecraft/server/BlockLadder.java
new file mode 100644
index 00000000..cea5732a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLadder.java
@@ -0,0 +1,99 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLadder extends Block {
+
+    protected BlockLadder(int i, int j) {
+        super(i, j, Material.ORIENTABLE);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        int l = world.getData(i, j, k);
+        float f = 0.125F;
+
+        if (l == 2) {
+            this.a(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
+        }
+
+        if (l == 3) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
+        }
+
+        if (l == 4) {
+            this.a(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        }
+
+        if (l == 5) {
+            this.a(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
+        }
+
+        return super.e(world, i, j, k);
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return world.e(i - 1, j, k) ? true : (world.e(i + 1, j, k) ? true : (world.e(i, j, k - 1) ? true : world.e(i, j, k + 1)));
+    }
+
+    public void postPlace(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+
+        if ((i1 == 0 || l == 2) && world.e(i, j, k + 1)) {
+            i1 = 2;
+        }
+
+        if ((i1 == 0 || l == 3) && world.e(i, j, k - 1)) {
+            i1 = 3;
+        }
+
+        if ((i1 == 0 || l == 4) && world.e(i + 1, j, k)) {
+            i1 = 4;
+        }
+
+        if ((i1 == 0 || l == 5) && world.e(i - 1, j, k)) {
+            i1 = 5;
+        }
+
+        world.setData(i, j, k, i1);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+        boolean flag = false;
+
+        if (i1 == 2 && world.e(i, j, k + 1)) {
+            flag = true;
+        }
+
+        if (i1 == 3 && world.e(i, j, k - 1)) {
+            flag = true;
+        }
+
+        if (i1 == 4 && world.e(i + 1, j, k)) {
+            flag = true;
+        }
+
+        if (i1 == 5 && world.e(i - 1, j, k)) {
+            flag = true;
+        }
+
+        if (!flag) {
+            this.g(world, i, j, k, i1);
+            world.setTypeId(i, j, k, 0);
+        }
+
+        super.doPhysics(world, i, j, k, l);
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLeavesBase.java b/src/main/java/net/minecraft/server/BlockLeavesBase.java
new file mode 100644
index 00000000..692862de
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLeavesBase.java
@@ -0,0 +1,15 @@
+package net.minecraft.server;
+
+public class BlockLeavesBase extends Block {
+
+    protected boolean b;
+
+    protected BlockLeavesBase(int i, int j, Material material, boolean flag) {
+        super(i, j, material);
+        this.b = flag;
+    }
+
+    public boolean a() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLightStone.java b/src/main/java/net/minecraft/server/BlockLightStone.java
new file mode 100644
index 00000000..6d142e96
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLightStone.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLightStone extends Block {
+
+    public BlockLightStone(int i, int j, Material material) {
+        super(i, j, material);
+    }
+
+    public int a(Random random) {
+        return 2 + random.nextInt(3);
+    }
+
+    public int a(int i, Random random) {
+        return Item.GLOWSTONE_DUST.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLockedChest.java b/src/main/java/net/minecraft/server/BlockLockedChest.java
new file mode 100644
index 00000000..da04f700
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLockedChest.java
@@ -0,0 +1,23 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLockedChest extends Block {
+
+    protected BlockLockedChest(int i) {
+        super(i, Material.WOOD);
+        this.textureId = 26;
+    }
+
+    public int a(int i) {
+        return i == 1 ? this.textureId - 1 : (i == 0 ? this.textureId - 1 : (i == 3 ? this.textureId + 1 : this.textureId));
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return true;
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        world.setTypeId(i, j, k, 0);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLog.java b/src/main/java/net/minecraft/server/BlockLog.java
new file mode 100644
index 00000000..68baabae
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLog.java
@@ -0,0 +1,54 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLog extends Block {
+
+    protected BlockLog(int i) {
+        super(i, Material.WOOD);
+        this.textureId = 20;
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+
+    public int a(int i, Random random) {
+        return Block.LOG.id;
+    }
+
+    public void a(World world, EntityHuman entityhuman, int i, int j, int k, int l) {
+        super.a(world, entityhuman, i, j, k, l);
+    }
+
+    public void remove(World world, int i, int j, int k) {
+        byte b0 = 4;
+        int l = b0 + 1;
+
+        if (world.a(i - l, j - l, k - l, i + l, j + l, k + l)) {
+            for (int i1 = -b0; i1 <= b0; ++i1) {
+                for (int j1 = -b0; j1 <= b0; ++j1) {
+                    for (int k1 = -b0; k1 <= b0; ++k1) {
+                        int l1 = world.getTypeId(i + i1, j + j1, k + k1);
+
+                        if (l1 == Block.LEAVES.id) {
+                            int i2 = world.getData(i + i1, j + j1, k + k1);
+
+                            if ((i2 & 8) == 0) {
+                                world.setRawData(i + i1, j + j1, k + k1, i2 | 8);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public int a(int i, int j) {
+        return i == 1 ? 21 : (i == 0 ? 21 : (j == 1 ? 116 : (j == 2 ? 117 : 20)));
+    }
+
+    protected int a_(int i) {
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLongGrass.java b/src/main/java/net/minecraft/server/BlockLongGrass.java
new file mode 100644
index 00000000..9e01676e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLongGrass.java
@@ -0,0 +1,21 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLongGrass extends BlockFlower {
+
+    protected BlockLongGrass(int i, int j) {
+        super(i, j);
+        float f = 0.4F;
+
+        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.8F, 0.5F + f);
+    }
+
+    public int a(int i, int j) {
+        return j == 1 ? this.textureId : (j == 2 ? this.textureId + 16 + 1 : (j == 0 ? this.textureId + 16 : this.textureId));
+    }
+
+    public int a(int i, Random random) {
+        return random.nextInt(8) == 0 ? Item.SEEDS.id : -1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrack.java b/src/main/java/net/minecraft/server/BlockMinecartTrack.java
new file mode 100644
index 00000000..48d78fad
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrack.java
@@ -0,0 +1,258 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockMinecartTrack extends Block {
+
+    private final boolean a;
+
+    public static final boolean g(World world, int i, int j, int k) {
+        int l = world.getTypeId(i, j, k);
+
+        return l == Block.RAILS.id || l == Block.GOLDEN_RAIL.id || l == Block.DETECTOR_RAIL.id;
+    }
+
+    public static final boolean c(int i) {
+        return i == Block.RAILS.id || i == Block.GOLDEN_RAIL.id || i == Block.DETECTOR_RAIL.id;
+    }
+
+    protected BlockMinecartTrack(int i, int j, boolean flag) {
+        super(i, j, Material.ORIENTABLE);
+        this.a = flag;
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+    }
+
+    public boolean f() {
+        return this.a;
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public MovingObjectPosition a(World world, int i, int j, int k, Vec3D vec3d, Vec3D vec3d1) {
+        this.a(world, i, j, k);
+        return super.a(world, i, j, k, vec3d, vec3d1);
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        int l = iblockaccess.getData(i, j, k);
+
+        if (l >= 2 && l <= 5) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
+        } else {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        }
+    }
+
+    public int a(int i, int j) {
+        if (this.a) {
+            if (this.id == Block.GOLDEN_RAIL.id && (j & 8) == 0) {
+                return this.textureId - 16;
+            }
+        } else if (j >= 6) {
+            return this.textureId - 16;
+        }
+
+        return this.textureId;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return world.e(i, j - 1, k);
+    }
+
+    public void c(World world, int i, int j, int k) {
+        if (!world.isStatic) {
+            this.a(world, i, j, k, true);
+        }
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (!world.isStatic) {
+            int i1 = world.getData(i, j, k);
+            int j1 = i1;
+
+            if (this.a) {
+                j1 = i1 & 7;
+            }
+
+            boolean flag = false;
+
+            if (!world.e(i, j - 1, k)) {
+                flag = true;
+            }
+
+            if (j1 == 2 && !world.e(i + 1, j, k)) {
+                flag = true;
+            }
+
+            if (j1 == 3 && !world.e(i - 1, j, k)) {
+                flag = true;
+            }
+
+            if (j1 == 4 && !world.e(i, j, k - 1)) {
+                flag = true;
+            }
+
+            if (j1 == 5 && !world.e(i, j, k + 1)) {
+                flag = true;
+            }
+
+            if (flag) {
+                this.g(world, i, j, k, world.getData(i, j, k));
+                world.setTypeId(i, j, k, 0);
+            } else if (this.id == Block.GOLDEN_RAIL.id) {
+                boolean flag1 = world.isBlockIndirectlyPowered(i, j, k) || world.isBlockIndirectlyPowered(i, j + 1, k);
+
+                flag1 = flag1 || this.a(world, i, j, k, i1, true, 0) || this.a(world, i, j, k, i1, false, 0);
+                boolean flag2 = false;
+
+                if (flag1 && (i1 & 8) == 0) {
+                    world.setData(i, j, k, j1 | 8);
+                    flag2 = true;
+                } else if (!flag1 && (i1 & 8) != 0) {
+                    world.setData(i, j, k, j1);
+                    flag2 = true;
+                }
+
+                if (flag2) {
+                    world.applyPhysics(i, j - 1, k, this.id);
+                    if (j1 == 2 || j1 == 3 || j1 == 4 || j1 == 5) {
+                        world.applyPhysics(i, j + 1, k, this.id);
+                    }
+                }
+            } else if (l > 0 && Block.byId[l].isPowerSource() && !this.a && MinecartTrackLogic.a(new MinecartTrackLogic(this, world, i, j, k)) == 3) {
+                this.a(world, i, j, k, false);
+            }
+        }
+    }
+
+    private void a(World world, int i, int j, int k, boolean flag) {
+        if (!world.isStatic) {
+            (new MinecartTrackLogic(this, world, i, j, k)).a(world.isBlockIndirectlyPowered(i, j, k), flag);
+        }
+    }
+
+    private boolean a(World world, int i, int j, int k, int l, boolean flag, int i1) {
+        if (i1 >= 8) {
+            return false;
+        } else {
+            int j1 = l & 7;
+            boolean flag1 = true;
+
+            switch (j1) {
+            case 0:
+                if (flag) {
+                    ++k;
+                } else {
+                    --k;
+                }
+                break;
+
+            case 1:
+                if (flag) {
+                    --i;
+                } else {
+                    ++i;
+                }
+                break;
+
+            case 2:
+                if (flag) {
+                    --i;
+                } else {
+                    ++i;
+                    ++j;
+                    flag1 = false;
+                }
+
+                j1 = 1;
+                break;
+
+            case 3:
+                if (flag) {
+                    --i;
+                    ++j;
+                    flag1 = false;
+                } else {
+                    ++i;
+                }
+
+                j1 = 1;
+                break;
+
+            case 4:
+                if (flag) {
+                    ++k;
+                } else {
+                    --k;
+                    ++j;
+                    flag1 = false;
+                }
+
+                j1 = 0;
+                break;
+
+            case 5:
+                if (flag) {
+                    ++k;
+                    ++j;
+                    flag1 = false;
+                } else {
+                    --k;
+                }
+
+                j1 = 0;
+            }
+
+            return this.a(world, i, j, k, flag, i1, j1) ? true : flag1 && this.a(world, i, j - 1, k, flag, i1, j1);
+        }
+    }
+
+    private boolean a(World world, int i, int j, int k, boolean flag, int l, int i1) {
+        int j1 = world.getTypeId(i, j, k);
+
+        if (j1 == Block.GOLDEN_RAIL.id) {
+            int k1 = world.getData(i, j, k);
+            int l1 = k1 & 7;
+
+            if (i1 == 1 && (l1 == 0 || l1 == 4 || l1 == 5)) {
+                return false;
+            }
+
+            if (i1 == 0 && (l1 == 1 || l1 == 2 || l1 == 3)) {
+                return false;
+            }
+
+            if ((k1 & 8) != 0) {
+                if (!world.isBlockIndirectlyPowered(i, j, k) && !world.isBlockIndirectlyPowered(i, j + 1, k)) {
+                    return this.a(world, i, j, k, k1, flag, l + 1);
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public int e() {
+        return 0;
+    }
+
+    static boolean a(BlockMinecartTrack blockminecarttrack) {
+        return blockminecarttrack.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockMobSpawner.java b/src/main/java/net/minecraft/server/BlockMobSpawner.java
new file mode 100644
index 00000000..975f0c2f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockMobSpawner.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockMobSpawner extends BlockContainer {
+
+    protected BlockMobSpawner(int i, int j) {
+        super(i, j, Material.STONE);
+    }
+
+    protected TileEntity a_() {
+        return new TileEntityMobSpawner();
+    }
+
+    public int a(int i, Random random) {
+        return 0;
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    public boolean a() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockNote.java b/src/main/java/net/minecraft/server/BlockNote.java
new file mode 100644
index 00000000..a41f86a8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockNote.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+public class BlockNote extends BlockContainer {
+
+    public BlockNote(int i) {
+        super(i, 74, Material.WOOD);
+    }
+
+    public int a(int i) {
+        return this.textureId;
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (l > 0 && Block.byId[l].isPowerSource()) {
+            boolean flag = world.isBlockPowered(i, j, k);
+            TileEntityNote tileentitynote = (TileEntityNote) world.getTileEntity(i, j, k);
+
+            if (tileentitynote.b != flag) {
+                if (flag) {
+                    tileentitynote.play(world, i, j, k);
+                }
+
+                tileentitynote.b = flag;
+            }
+        }
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (world.isStatic) {
+            return true;
+        } else {
+            TileEntityNote tileentitynote = (TileEntityNote) world.getTileEntity(i, j, k);
+
+            tileentitynote.a();
+            tileentitynote.play(world, i, j, k);
+            return true;
+        }
+    }
+
+    public void b(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (!world.isStatic) {
+            TileEntityNote tileentitynote = (TileEntityNote) world.getTileEntity(i, j, k);
+
+            tileentitynote.play(world, i, j, k);
+        }
+    }
+
+    protected TileEntity a_() {
+        return new TileEntityNote();
+    }
+
+    public void a(World world, int i, int j, int k, int l, int i1) {
+        float f = (float) Math.pow(2.0D, (double) (i1 - 12) / 12.0D);
+        String s = "harp";
+
+        if (l == 1) {
+            s = "bd";
+        }
+
+        if (l == 2) {
+            s = "snare";
+        }
+
+        if (l == 3) {
+            s = "hat";
+        }
+
+        if (l == 4) {
+            s = "bassattack";
+        }
+
+        world.makeSound((double) i + 0.5D, (double) j + 0.5D, (double) k + 0.5D, "note." + s, 3.0F, f);
+        world.a("note", (double) i + 0.5D, (double) j + 1.2D, (double) k + 0.5D, (double) i1 / 24.0D, 0.0D, 0.0D);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockObsidian.java b/src/main/java/net/minecraft/server/BlockObsidian.java
new file mode 100644
index 00000000..c2d9223d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockObsidian.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockObsidian extends BlockStone {
+
+    public BlockObsidian(int i, int j) {
+        super(i, j);
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+
+    public int a(int i, Random random) {
+        return Block.OBSIDIAN.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockOre.java b/src/main/java/net/minecraft/server/BlockOre.java
new file mode 100644
index 00000000..3ecf3e8a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockOre.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockOre extends Block {
+
+    public BlockOre(int i, int j) {
+        super(i, j, Material.STONE);
+    }
+
+    public int a(int i, Random random) {
+        return this.id == Block.COAL_ORE.id ? Item.COAL.id : (this.id == Block.DIAMOND_ORE.id ? Item.DIAMOND.id : (this.id == Block.LAPIS_ORE.id ? Item.INK_SACK.id : this.id));
+    }
+
+    public int a(Random random) {
+        return this.id == Block.LAPIS_ORE.id ? 4 + random.nextInt(5) : 1;
+    }
+
+    protected int a_(int i) {
+        return this.id == Block.LAPIS_ORE.id ? 4 : 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockOreBlock.java b/src/main/java/net/minecraft/server/BlockOreBlock.java
new file mode 100644
index 00000000..4b24687c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockOreBlock.java
@@ -0,0 +1,13 @@
+package net.minecraft.server;
+
+public class BlockOreBlock extends Block {
+
+    public BlockOreBlock(int i, int j) {
+        super(i, Material.ORE);
+        this.textureId = j;
+    }
+
+    public int a(int i) {
+        return this.textureId;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockPistonMoving.java b/src/main/java/net/minecraft/server/BlockPistonMoving.java
new file mode 100644
index 00000000..03d9ca29
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockPistonMoving.java
@@ -0,0 +1,146 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockPistonMoving extends BlockContainer {
+
+    public BlockPistonMoving(int i) {
+        super(i, Material.PISTON);
+        this.c(-1.0F);
+    }
+
+    protected TileEntity a_() {
+        return null;
+    }
+
+    public void c(World world, int i, int j, int k) {}
+
+    public void remove(World world, int i, int j, int k) {
+        TileEntity tileentity = world.getTileEntity(i, j, k);
+
+        if (tileentity != null && tileentity instanceof TileEntityPiston) {
+            ((TileEntityPiston) tileentity).k();
+        } else {
+            super.remove(world, i, j, k);
+        }
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return false;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k, int l) {
+        return false;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (!world.isStatic && world.getTileEntity(i, j, k) == null) {
+            world.setTypeId(i, j, k, 0);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public int a(int i, Random random) {
+        return 0;
+    }
+
+    public void dropNaturally(World world, int i, int j, int k, int l, float f) {
+        if (!world.isStatic) {
+            TileEntityPiston tileentitypiston = this.b(world, i, j, k);
+
+            if (tileentitypiston != null) {
+                Block.byId[tileentitypiston.a()].g(world, i, j, k, tileentitypiston.e());
+            }
+        }
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (!world.isStatic && world.getTileEntity(i, j, k) == null) {
+            ;
+        }
+    }
+
+    public static TileEntity a(int i, int j, int k, boolean flag, boolean flag1) {
+        return new TileEntityPiston(i, j, k, flag, flag1);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        TileEntityPiston tileentitypiston = this.b(world, i, j, k);
+
+        if (tileentitypiston == null) {
+            return null;
+        } else {
+            float f = tileentitypiston.a(0.0F);
+
+            if (tileentitypiston.c()) {
+                f = 1.0F - f;
+            }
+
+            return this.a(world, i, j, k, tileentitypiston.a(), f, tileentitypiston.d());
+        }
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        TileEntityPiston tileentitypiston = this.b(iblockaccess, i, j, k);
+
+        if (tileentitypiston != null) {
+            Block block = Block.byId[tileentitypiston.a()];
+
+            if (block == null || block == this) {
+                return;
+            }
+
+            block.a(iblockaccess, i, j, k);
+            float f = tileentitypiston.a(0.0F);
+
+            if (tileentitypiston.c()) {
+                f = 1.0F - f;
+            }
+
+            int l = tileentitypiston.d();
+
+            this.minX = block.minX - (double) ((float) PistonBlockTextures.b[l] * f);
+            this.minY = block.minY - (double) ((float) PistonBlockTextures.c[l] * f);
+            this.minZ = block.minZ - (double) ((float) PistonBlockTextures.d[l] * f);
+            this.maxX = block.maxX - (double) ((float) PistonBlockTextures.b[l] * f);
+            this.maxY = block.maxY - (double) ((float) PistonBlockTextures.c[l] * f);
+            this.maxZ = block.maxZ - (double) ((float) PistonBlockTextures.d[l] * f);
+        }
+    }
+
+    public AxisAlignedBB a(World world, int i, int j, int k, int l, float f, int i1) {
+        if (l != 0 && l != this.id) {
+            AxisAlignedBB axisalignedbb = Block.byId[l].e(world, i, j, k);
+
+            if (axisalignedbb == null) {
+                return null;
+            } else {
+                axisalignedbb.a -= (double) ((float) PistonBlockTextures.b[i1] * f);
+                axisalignedbb.d -= (double) ((float) PistonBlockTextures.b[i1] * f);
+                axisalignedbb.b -= (double) ((float) PistonBlockTextures.c[i1] * f);
+                axisalignedbb.e -= (double) ((float) PistonBlockTextures.c[i1] * f);
+                axisalignedbb.c -= (double) ((float) PistonBlockTextures.d[i1] * f);
+                axisalignedbb.f -= (double) ((float) PistonBlockTextures.d[i1] * f);
+                return axisalignedbb;
+            }
+        } else {
+            return null;
+        }
+    }
+
+    private TileEntityPiston b(IBlockAccess iblockaccess, int i, int j, int k) {
+        TileEntity tileentity = iblockaccess.getTileEntity(i, j, k);
+
+        return tileentity != null && tileentity instanceof TileEntityPiston ? (TileEntityPiston) tileentity : null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneOre.java b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
new file mode 100644
index 00000000..c927bb91
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockRedstoneOre.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockRedstoneOre extends Block {
+
+    private boolean a;
+
+    public BlockRedstoneOre(int i, int j, boolean flag) {
+        super(i, j, Material.STONE);
+        if (flag) {
+            this.a(true);
+        }
+
+        this.a = flag;
+    }
+
+    public int c() {
+        return 30;
+    }
+
+    public void b(World world, int i, int j, int k, EntityHuman entityhuman) {
+        this.g(world, i, j, k);
+        super.b(world, i, j, k, entityhuman);
+    }
+
+    public void b(World world, int i, int j, int k, Entity entity) {
+        this.g(world, i, j, k);
+        super.b(world, i, j, k, entity);
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        this.g(world, i, j, k);
+        return super.interact(world, i, j, k, entityhuman);
+    }
+
+    private void g(World world, int i, int j, int k) {
+        this.h(world, i, j, k);
+        if (this.id == Block.REDSTONE_ORE.id) {
+            world.setTypeId(i, j, k, Block.GLOWING_REDSTONE_ORE.id);
+        }
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        if (this.id == Block.GLOWING_REDSTONE_ORE.id) {
+            world.setTypeId(i, j, k, Block.REDSTONE_ORE.id);
+        }
+    }
+
+    public int a(int i, Random random) {
+        return Item.REDSTONE.id;
+    }
+
+    public int a(Random random) {
+        return 4 + random.nextInt(2);
+    }
+
+    private void h(World world, int i, int j, int k) {
+        Random random = world.random;
+        double d0 = 0.0625D;
+
+        for (int l = 0; l < 6; ++l) {
+            double d1 = (double) ((float) i + random.nextFloat());
+            double d2 = (double) ((float) j + random.nextFloat());
+            double d3 = (double) ((float) k + random.nextFloat());
+
+            if (l == 0 && !world.p(i, j + 1, k)) {
+                d2 = (double) (j + 1) + d0;
+            }
+
+            if (l == 1 && !world.p(i, j - 1, k)) {
+                d2 = (double) (j + 0) - d0;
+            }
+
+            if (l == 2 && !world.p(i, j, k + 1)) {
+                d3 = (double) (k + 1) + d0;
+            }
+
+            if (l == 3 && !world.p(i, j, k - 1)) {
+                d3 = (double) (k + 0) - d0;
+            }
+
+            if (l == 4 && !world.p(i + 1, j, k)) {
+                d1 = (double) (i + 1) + d0;
+            }
+
+            if (l == 5 && !world.p(i - 1, j, k)) {
+                d1 = (double) (i + 0) - d0;
+            }
+
+            if (d1 < (double) i || d1 > (double) (i + 1) || d2 < 0.0D || d2 > (double) (j + 1) || d3 < (double) k || d3 > (double) (k + 1)) {
+                world.a("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockReed.java b/src/main/java/net/minecraft/server/BlockReed.java
new file mode 100644
index 00000000..da8735d0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockReed.java
@@ -0,0 +1,73 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockReed extends Block {
+
+    protected BlockReed(int i, int j) {
+        super(i, Material.PLANT);
+        this.textureId = j;
+        float f = 0.375F;
+
+        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
+        this.a(true);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        if (world.isEmpty(i, j + 1, k)) {
+            int l;
+
+            for (l = 1; world.getTypeId(i, j - l, k) == this.id; ++l) {
+                ;
+            }
+
+            if (l < 3) {
+                int i1 = world.getData(i, j, k);
+
+                if (i1 == 15) {
+                    world.setTypeId(i, j + 1, k, this.id);
+                    world.setData(i, j, k, 0);
+                } else {
+                    world.setData(i, j, k, i1 + 1);
+                }
+            }
+        }
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        int l = world.getTypeId(i, j - 1, k);
+
+        return l == this.id ? true : (l != Block.GRASS.id && l != Block.DIRT.id ? false : (world.getMaterial(i - 1, j - 1, k) == Material.WATER ? true : (world.getMaterial(i + 1, j - 1, k) == Material.WATER ? true : (world.getMaterial(i, j - 1, k - 1) == Material.WATER ? true : world.getMaterial(i, j - 1, k + 1) == Material.WATER))));
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        this.g(world, i, j, k);
+    }
+
+    protected final void g(World world, int i, int j, int k) {
+        if (!this.f(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+
+    public boolean f(World world, int i, int j, int k) {
+        return this.canPlace(world, i, j, k);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public int a(int i, Random random) {
+        return Item.SUGAR_CANE.id;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockRegister.java b/src/main/java/net/minecraft/server/BlockRegister.java
new file mode 100644
index 00000000..79597127
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockRegister.java
@@ -0,0 +1,30 @@
+package net.minecraft.server;
+
+public class BlockRegister {
+
+    private static byte[] a = new byte[256];
+
+    public BlockRegister() {}
+
+    public static void a(byte[] abyte) {
+        for (int i = 0; i < abyte.length; ++i) {
+            abyte[i] = a[abyte[i] & 255];
+        }
+    }
+
+    static {
+        try {
+            for (int i = 0; i < 256; ++i) {
+                byte b0 = (byte) i;
+
+                if (b0 != 0 && Block.byId[b0 & 255] == null) {
+                    b0 = 0;
+                }
+
+                a[i] = b0;
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockSand.java b/src/main/java/net/minecraft/server/BlockSand.java
new file mode 100644
index 00000000..2f444bff
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockSand.java
@@ -0,0 +1,64 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockSand extends Block {
+
+    public static boolean instaFall = false;
+
+    public BlockSand(int i, int j) {
+        super(i, j, Material.SAND);
+    }
+
+    public void c(World world, int i, int j, int k) {
+        world.c(i, j, k, this.id, this.c());
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        world.c(i, j, k, this.id, this.c());
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        this.g(world, i, j, k);
+    }
+
+    private void g(World world, int i, int j, int k) {
+        if (c_(world, i, j - 1, k) && j >= 0) {
+            byte b0 = 32;
+
+            if (!instaFall && world.a(i - b0, j - b0, k - b0, i + b0, j + b0, k + b0)) {
+                EntityFallingSand entityfallingsand = new EntityFallingSand(world, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), this.id);
+
+                world.addEntity(entityfallingsand);
+            } else {
+                world.setTypeId(i, j, k, 0);
+
+                while (c_(world, i, j - 1, k) && j > 0) {
+                    --j;
+                }
+
+                if (j > 0) {
+                    world.setTypeId(i, j, k, this.id);
+                }
+            }
+        }
+    }
+
+    public int c() {
+        return 3;
+    }
+
+    public static boolean c_(World world, int i, int j, int k) {
+        int l = world.getTypeId(i, j, k);
+
+        if (l == 0) {
+            return true;
+        } else if (l == Block.FIRE.id) {
+            return true;
+        } else {
+            Material material = Block.byId[l].material;
+
+            return material == Material.WATER ? true : material == Material.LAVA;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockSandStone.java b/src/main/java/net/minecraft/server/BlockSandStone.java
new file mode 100644
index 00000000..a8dba064
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockSandStone.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class BlockSandStone extends Block {
+
+    public BlockSandStone(int i) {
+        super(i, 192, Material.STONE);
+    }
+
+    public int a(int i) {
+        return i == 1 ? this.textureId - 16 : (i == 0 ? this.textureId + 16 : this.textureId);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockSlowSand.java b/src/main/java/net/minecraft/server/BlockSlowSand.java
new file mode 100644
index 00000000..57372766
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockSlowSand.java
@@ -0,0 +1,19 @@
+package net.minecraft.server;
+
+public class BlockSlowSand extends Block {
+
+    public BlockSlowSand(int i, int j) {
+        super(i, j, Material.SAND);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        float f = 0.125F;
+
+        return AxisAlignedBB.b((double) i, (double) j, (double) k, (double) (i + 1), (double) ((float) (j + 1) - f), (double) (k + 1));
+    }
+
+    public void a(World world, int i, int j, int k, Entity entity) {
+        entity.motX *= 0.4D;
+        entity.motZ *= 0.4D;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockSnowBlock.java b/src/main/java/net/minecraft/server/BlockSnowBlock.java
new file mode 100644
index 00000000..60c586e4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockSnowBlock.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockSnowBlock extends Block {
+
+    protected BlockSnowBlock(int i, int j) {
+        super(i, j, Material.SNOW_BLOCK);
+        this.a(true);
+    }
+
+    public int a(int i, Random random) {
+        return Item.SNOW_BALL.id;
+    }
+
+    public int a(Random random) {
+        return 4;
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        if (world.a(EnumSkyBlock.BLOCK, i, j, k) > 11) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockSponge.java b/src/main/java/net/minecraft/server/BlockSponge.java
new file mode 100644
index 00000000..cd6272cf
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockSponge.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+public class BlockSponge extends Block {
+
+    protected BlockSponge(int i) {
+        super(i, Material.SPONGE);
+        this.textureId = 48;
+    }
+
+    public void c(World world, int i, int j, int k) {
+        byte b0 = 2;
+
+        for (int l = i - b0; l <= i + b0; ++l) {
+            for (int i1 = j - b0; i1 <= j + b0; ++i1) {
+                for (int j1 = k - b0; j1 <= k + b0; ++j1) {
+                    if (world.getMaterial(l, i1, j1) == Material.WATER) {
+                        ;
+                    }
+                }
+            }
+        }
+    }
+
+    public void remove(World world, int i, int j, int k) {
+        byte b0 = 2;
+
+        for (int l = i - b0; l <= i + b0; ++l) {
+            for (int i1 = j - b0; i1 <= j + b0; ++i1) {
+                for (int j1 = k - b0; j1 <= k + b0; ++j1) {
+                    world.applyPhysics(l, i1, j1, world.getTypeId(l, i1, j1));
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStairs.java b/src/main/java/net/minecraft/server/BlockStairs.java
new file mode 100644
index 00000000..67ca33cc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStairs.java
@@ -0,0 +1,159 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.Random;
+
+public class BlockStairs extends Block {
+
+    private Block a;
+
+    protected BlockStairs(int i, Block block) {
+        super(i, block.textureId, block.material);
+        this.a = block;
+        this.c(block.strength);
+        this.b(block.durability / 3.0F);
+        this.a(block.stepSound);
+        this.f(255);
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return super.e(world, i, j, k);
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public void a(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, ArrayList arraylist) {
+        int l = world.getData(i, j, k);
+
+        if (l == 0) {
+            this.a(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+            this.a(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 1) {
+            this.a(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+            this.a(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 2) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+            this.a(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 3) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+            this.a(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+            super.a(world, i, j, k, axisalignedbb, arraylist);
+        }
+
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    public void b(World world, int i, int j, int k, EntityHuman entityhuman) {
+        this.a.b(world, i, j, k, entityhuman);
+    }
+
+    public void postBreak(World world, int i, int j, int k, int l) {
+        this.a.postBreak(world, i, j, k, l);
+    }
+
+    public float a(Entity entity) {
+        return this.a.a(entity);
+    }
+
+    public int a(int i, Random random) {
+        return this.a.a(i, random);
+    }
+
+    public int a(Random random) {
+        return this.a.a(random);
+    }
+
+    public int a(int i, int j) {
+        return this.a.a(i, j);
+    }
+
+    public int a(int i) {
+        return this.a.a(i);
+    }
+
+    public int c() {
+        return this.a.c();
+    }
+
+    public void a(World world, int i, int j, int k, Entity entity, Vec3D vec3d) {
+        this.a.a(world, i, j, k, entity, vec3d);
+    }
+
+    public boolean k_() {
+        return this.a.k_();
+    }
+
+    public boolean a(int i, boolean flag) {
+        return this.a.a(i, flag);
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return this.a.canPlace(world, i, j, k);
+    }
+
+    public void c(World world, int i, int j, int k) {
+        this.doPhysics(world, i, j, k, 0);
+        this.a.c(world, i, j, k);
+    }
+
+    public void remove(World world, int i, int j, int k) {
+        this.a.remove(world, i, j, k);
+    }
+
+    public void dropNaturally(World world, int i, int j, int k, int l, float f) {
+        this.a.dropNaturally(world, i, j, k, l, f);
+    }
+
+    public void b(World world, int i, int j, int k, Entity entity) {
+        this.a.b(world, i, j, k, entity);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        this.a.a(world, i, j, k, random);
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        return this.a.interact(world, i, j, k, entityhuman);
+    }
+
+    public void d(World world, int i, int j, int k) {
+        this.a.d(world, i, j, k);
+    }
+
+    public void postPlace(World world, int i, int j, int k, EntityLiving entityliving) {
+        int l = MathHelper.floor((double) (entityliving.yaw * 4.0F / 360.0F) + 0.5D) & 3;
+
+        if (l == 0) {
+            world.setData(i, j, k, 2);
+        }
+
+        if (l == 1) {
+            world.setData(i, j, k, 1);
+        }
+
+        if (l == 2) {
+            world.setData(i, j, k, 3);
+        }
+
+        if (l == 3) {
+            world.setData(i, j, k, 0);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStep.java b/src/main/java/net/minecraft/server/BlockStep.java
new file mode 100644
index 00000000..63762d43
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStep.java
@@ -0,0 +1,64 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockStep extends Block {
+
+    public static final String[] a = new String[] { "stone", "sand", "wood", "cobble"};
+    private boolean b;
+
+    public BlockStep(int i, boolean flag) {
+        super(i, 6, Material.STONE);
+        this.b = flag;
+        if (!flag) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+        }
+
+        this.f(255);
+    }
+
+    public int a(int i, int j) {
+        return j == 0 ? (i <= 1 ? 6 : 5) : (j == 1 ? (i == 0 ? 208 : (i == 1 ? 176 : 192)) : (j == 2 ? 4 : (j == 3 ? 16 : 6)));
+    }
+
+    public int a(int i) {
+        return this.a(i, 0);
+    }
+
+    public boolean a() {
+        return this.b;
+    }
+
+    public void c(World world, int i, int j, int k) {
+        if (this != Block.STEP) {
+            super.c(world, i, j, k);
+        }
+
+        int l = world.getTypeId(i, j - 1, k);
+        int i1 = world.getData(i, j, k);
+        int j1 = world.getData(i, j - 1, k);
+
+        if (i1 == j1) {
+            if (l == STEP.id) {
+                world.setTypeId(i, j, k, 0);
+                world.setTypeIdAndData(i, j - 1, k, Block.DOUBLE_STEP.id, i1);
+            }
+        }
+    }
+
+    public int a(int i, Random random) {
+        return Block.STEP.id;
+    }
+
+    public int a(Random random) {
+        return this.b ? 2 : 1;
+    }
+
+    protected int a_(int i) {
+        return i;
+    }
+
+    public boolean b() {
+        return this.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStone.java b/src/main/java/net/minecraft/server/BlockStone.java
new file mode 100644
index 00000000..b473e2e7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStone.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockStone extends Block {
+
+    public BlockStone(int i, int j) {
+        super(i, j, Material.STONE);
+    }
+
+    public int a(int i, Random random) {
+        return Block.COBBLESTONE.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
new file mode 100644
index 00000000..c386a595
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -0,0 +1,65 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockTNT extends Block {
+
+    public BlockTNT(int i, int j) {
+        super(i, j, Material.TNT);
+    }
+
+    public int a(int i) {
+        return i == 0 ? this.textureId + 2 : (i == 1 ? this.textureId + 1 : this.textureId);
+    }
+
+    public void c(World world, int i, int j, int k) {
+        super.c(world, i, j, k);
+        if (world.isBlockIndirectlyPowered(i, j, k)) {
+            this.postBreak(world, i, j, k, 1);
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (l > 0 && Block.byId[l].isPowerSource() && world.isBlockIndirectlyPowered(i, j, k)) {
+            this.postBreak(world, i, j, k, 1);
+            world.setTypeId(i, j, k, 0);
+        }
+    }
+
+    public int a(Random random) {
+        return 0;
+    }
+
+    public void d(World world, int i, int j, int k) {
+        EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F));
+
+        entitytntprimed.fuseTicks = world.random.nextInt(entitytntprimed.fuseTicks / 4) + entitytntprimed.fuseTicks / 8;
+        world.addEntity(entitytntprimed);
+    }
+
+    public void postBreak(World world, int i, int j, int k, int l) {
+        if (!world.isStatic) {
+            if ((l & 1) == 0) {
+                this.a(world, i, j, k, new ItemStack(Block.TNT.id, 1, 0));
+            } else {
+                EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F));
+
+                world.addEntity(entitytntprimed);
+                world.makeSound(entitytntprimed, "random.fuse", 1.0F, 1.0F);
+            }
+        }
+    }
+
+    public void b(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (entityhuman.G() != null && entityhuman.G().id == Item.FLINT_AND_STEEL.id) {
+            world.setRawData(i, j, k, 1);
+        }
+
+        super.b(world, i, j, k, entityhuman);
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        return super.interact(world, i, j, k, entityhuman);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockTorch.java b/src/main/java/net/minecraft/server/BlockTorch.java
new file mode 100644
index 00000000..45e14a0e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockTorch.java
@@ -0,0 +1,142 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockTorch extends Block {
+
+    protected BlockTorch(int i, int j) {
+        super(i, j, Material.ORIENTABLE);
+        this.a(true);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    private boolean g(World world, int i, int j, int k) {
+        return world.e(i, j, k) || world.getTypeId(i, j, k) == Block.FENCE.id;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return world.e(i - 1, j, k) ? true : (world.e(i + 1, j, k) ? true : (world.e(i, j, k - 1) ? true : (world.e(i, j, k + 1) ? true : this.g(world, i, j - 1, k))));
+    }
+
+    public void postPlace(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+
+        if (l == 1 && this.g(world, i, j - 1, k)) {
+            i1 = 5;
+        }
+
+        if (l == 2 && world.e(i, j, k + 1)) {
+            i1 = 4;
+        }
+
+        if (l == 3 && world.e(i, j, k - 1)) {
+            i1 = 3;
+        }
+
+        if (l == 4 && world.e(i + 1, j, k)) {
+            i1 = 2;
+        }
+
+        if (l == 5 && world.e(i - 1, j, k)) {
+            i1 = 1;
+        }
+
+        world.setData(i, j, k, i1);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        super.a(world, i, j, k, random);
+        if (world.getData(i, j, k) == 0) {
+            this.c(world, i, j, k);
+        }
+    }
+
+    public void c(World world, int i, int j, int k) {
+        if (world.e(i - 1, j, k)) {
+            world.setData(i, j, k, 1);
+        } else if (world.e(i + 1, j, k)) {
+            world.setData(i, j, k, 2);
+        } else if (world.e(i, j, k - 1)) {
+            world.setData(i, j, k, 3);
+        } else if (world.e(i, j, k + 1)) {
+            world.setData(i, j, k, 4);
+        } else if (this.g(world, i, j - 1, k)) {
+            world.setData(i, j, k, 5);
+        }
+
+        this.h(world, i, j, k);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (this.h(world, i, j, k)) {
+            int i1 = world.getData(i, j, k);
+            boolean flag = false;
+
+            if (!world.e(i - 1, j, k) && i1 == 1) {
+                flag = true;
+            }
+
+            if (!world.e(i + 1, j, k) && i1 == 2) {
+                flag = true;
+            }
+
+            if (!world.e(i, j, k - 1) && i1 == 3) {
+                flag = true;
+            }
+
+            if (!world.e(i, j, k + 1) && i1 == 4) {
+                flag = true;
+            }
+
+            if (!this.g(world, i, j - 1, k) && i1 == 5) {
+                flag = true;
+            }
+
+            if (flag) {
+                this.g(world, i, j, k, world.getData(i, j, k));
+                world.setTypeId(i, j, k, 0);
+            }
+        }
+    }
+
+    private boolean h(World world, int i, int j, int k) {
+        if (!this.canPlace(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    public MovingObjectPosition a(World world, int i, int j, int k, Vec3D vec3d, Vec3D vec3d1) {
+        int l = world.getData(i, j, k) & 7;
+        float f = 0.15F;
+
+        if (l == 1) {
+            this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
+        } else if (l == 2) {
+            this.a(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
+        } else if (l == 3) {
+            this.a(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
+        } else if (l == 4) {
+            this.a(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
+        } else {
+            f = 0.1F;
+            this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.6F, 0.5F + f);
+        }
+
+        return super.a(world, i, j, k, vec3d, vec3d1);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockWeb.java b/src/main/java/net/minecraft/server/BlockWeb.java
new file mode 100644
index 00000000..c41e0320
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockWeb.java
@@ -0,0 +1,30 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockWeb extends Block {
+
+    public BlockWeb(int i, int j) {
+        super(i, j, Material.WEB);
+    }
+
+    public void a(World world, int i, int j, int k, Entity entity) {
+        entity.bf = true;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public int a(int i, Random random) {
+        return Item.STRING.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockWorkbench.java b/src/main/java/net/minecraft/server/BlockWorkbench.java
new file mode 100644
index 00000000..ec1f2885
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockWorkbench.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+public class BlockWorkbench extends Block {
+
+    protected BlockWorkbench(int i) {
+        super(i, Material.WOOD);
+        this.textureId = 59;
+    }
+
+    public int a(int i) {
+        return i == 1 ? this.textureId - 16 : (i == 0 ? Block.WOOD.a(0) : (i != 2 && i != 4 ? this.textureId : this.textureId + 1));
+    }
+
+    public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
+        if (world.isStatic) {
+            return true;
+        } else {
+            entityhuman.b(i, j, k);
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkBuffer.java b/src/main/java/net/minecraft/server/ChunkBuffer.java
new file mode 100644
index 00000000..a6a0be95
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkBuffer.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+import java.io.ByteArrayOutputStream;
+
+class ChunkBuffer extends ByteArrayOutputStream {
+
+    private int b;
+    private int c;
+
+    final RegionFile a;
+
+    public ChunkBuffer(RegionFile regionfile, int i, int j) {
+        super(8096);
+        this.a = regionfile;
+        this.b = i;
+        this.c = j;
+    }
+
+    public void close() {
+        this.a.a(this.b, this.c, this.buf, this.count);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
new file mode 100644
index 00000000..fbac7b30
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -0,0 +1,76 @@
+package net.minecraft.server;
+
+public class ChunkCache implements IBlockAccess {
+
+    private int a;
+    private int b;
+    private Chunk[][] c;
+    private World d;
+
+    public ChunkCache(World world, int i, int j, int k, int l, int i1, int j1) {
+        this.d = world;
+        this.a = i >> 4;
+        this.b = k >> 4;
+        int k1 = l >> 4;
+        int l1 = j1 >> 4;
+
+        this.c = new Chunk[k1 - this.a + 1][l1 - this.b + 1];
+
+        for (int i2 = this.a; i2 <= k1; ++i2) {
+            for (int j2 = this.b; j2 <= l1; ++j2) {
+                this.c[i2 - this.a][j2 - this.b] = world.getChunkAt(i2, j2);
+            }
+        }
+    }
+
+    public int getTypeId(int i, int j, int k) {
+        if (j < 0) {
+            return 0;
+        } else if (j >= 128) {
+            return 0;
+        } else {
+            int l = (i >> 4) - this.a;
+            int i1 = (k >> 4) - this.b;
+
+            if (l >= 0 && l < this.c.length && i1 >= 0 && i1 < this.c[l].length) {
+                Chunk chunk = this.c[l][i1];
+
+                return chunk == null ? 0 : chunk.getTypeId(i & 15, j, k & 15);
+            } else {
+                return 0;
+            }
+        }
+    }
+
+    public TileEntity getTileEntity(int i, int j, int k) {
+        int l = (i >> 4) - this.a;
+        int i1 = (k >> 4) - this.b;
+
+        return this.c[l][i1].d(i & 15, j, k & 15);
+    }
+
+    public int getData(int i, int j, int k) {
+        if (j < 0) {
+            return 0;
+        } else if (j >= 128) {
+            return 0;
+        } else {
+            int l = (i >> 4) - this.a;
+            int i1 = (k >> 4) - this.b;
+
+            return this.c[l][i1].getData(i & 15, j, k & 15);
+        }
+    }
+
+    public Material getMaterial(int i, int j, int k) {
+        int l = this.getTypeId(i, j, k);
+
+        return l == 0 ? Material.AIR : Block.byId[l].material;
+    }
+
+    public boolean e(int i, int j, int k) {
+        Block block = Block.byId[this.getTypeId(i, j, k)];
+
+        return block == null ? false : block.material.isSolid() && block.b();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkCoordinates.java b/src/main/java/net/minecraft/server/ChunkCoordinates.java
new file mode 100644
index 00000000..0e32980d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkCoordinates.java
@@ -0,0 +1,48 @@
+package net.minecraft.server;
+
+public class ChunkCoordinates implements Comparable<ChunkCoordinates> {
+
+    public int x;
+    public int y;
+    public int z;
+
+    public ChunkCoordinates() {}
+
+    public ChunkCoordinates(int i, int j, int k) {
+        this.x = i;
+        this.y = j;
+        this.z = k;
+    }
+
+    public ChunkCoordinates(ChunkCoordinates chunkcoordinates) {
+        this.x = chunkcoordinates.x;
+        this.y = chunkcoordinates.y;
+        this.z = chunkcoordinates.z;
+    }
+
+    public boolean equals(Object object) {
+        if (!(object instanceof ChunkCoordinates)) {
+            return false;
+        } else {
+            ChunkCoordinates chunkcoordinates = (ChunkCoordinates) object;
+
+            return this.x == chunkcoordinates.x && this.y == chunkcoordinates.y && this.z == chunkcoordinates.z;
+        }
+    }
+
+    public int hashCode() {
+        return this.x + this.z << 8 + this.y << 16;
+    }
+
+    public int compareTo(ChunkCoordinates chunkcoordinates) {
+        return this.y == chunkcoordinates.y ? (this.z == chunkcoordinates.z ? this.x - chunkcoordinates.x : this.z - chunkcoordinates.z) : this.y - chunkcoordinates.y;
+    }
+
+    public double a(int i, int j, int k) {
+        int l = this.x - i;
+        int i1 = this.y - j;
+        int j1 = this.z - k;
+
+        return Math.sqrt((double) (l * l + i1 * i1 + j1 * j1));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkFile.java b/src/main/java/net/minecraft/server/ChunkFile.java
new file mode 100644
index 00000000..d442e3f3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkFile.java
@@ -0,0 +1,50 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.util.regex.Matcher;
+
+class ChunkFile implements Comparable<ChunkFile> {
+
+    private final File a;
+    private final int b;
+    private final int c;
+
+    public ChunkFile(File file1) {
+        this.a = file1;
+        Matcher matcher = ChunkFilenameFilter.a.matcher(file1.getName());
+
+        if (matcher.matches()) {
+            this.b = Integer.parseInt(matcher.group(1), 36);
+            this.c = Integer.parseInt(matcher.group(2), 36);
+        } else {
+            this.b = 0;
+            this.c = 0;
+        }
+    }
+
+    public int compareTo(ChunkFile chunkfile) {
+        int i = this.b >> 5;
+        int j = chunkfile.b >> 5;
+
+        if (i == j) {
+            int k = this.c >> 5;
+            int l = chunkfile.c >> 5;
+
+            return k - l;
+        } else {
+            return i - j;
+        }
+    }
+
+    public File a() {
+        return this.a;
+    }
+
+    public int b() {
+        return this.b;
+    }
+
+    public int c() {
+        return this.c;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkFileFilter.java b/src/main/java/net/minecraft/server/ChunkFileFilter.java
new file mode 100644
index 00000000..987195d0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkFileFilter.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.io.FileFilter;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+class ChunkFileFilter implements FileFilter {
+
+    public static final Pattern a = Pattern.compile("[0-9a-z]|([0-9a-z][0-9a-z])");
+
+    private ChunkFileFilter() {}
+
+    public boolean accept(File file1) {
+        if (file1.isDirectory()) {
+            Matcher matcher = a.matcher(file1.getName());
+
+            return matcher.matches();
+        } else {
+            return false;
+        }
+    }
+
+    ChunkFileFilter(EmptyClass2 emptyclass2) {
+        this();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkFilenameFilter.java b/src/main/java/net/minecraft/server/ChunkFilenameFilter.java
new file mode 100644
index 00000000..320fda33
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkFilenameFilter.java
@@ -0,0 +1,23 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.io.FilenameFilter;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+class ChunkFilenameFilter implements FilenameFilter {
+
+    public static final Pattern a = Pattern.compile("c\\.(-?[0-9a-z]+)\\.(-?[0-9a-z]+)\\.dat");
+
+    private ChunkFilenameFilter() {}
+
+    public boolean accept(File file1, String s) {
+        Matcher matcher = a.matcher(s);
+
+        return matcher.matches();
+    }
+
+    ChunkFilenameFilter(EmptyClass2 emptyclass2) {
+        this();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkLoader.java b/src/main/java/net/minecraft/server/ChunkLoader.java
new file mode 100644
index 00000000..7729ea5f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkLoader.java
@@ -0,0 +1,225 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Iterator;
+
+public class ChunkLoader implements IChunkLoader {
+
+    private File a;
+    private boolean b;
+
+    public ChunkLoader(File file1, boolean flag) {
+        this.a = file1;
+        this.b = flag;
+    }
+
+    private File a(int i, int j) {
+        String s = "c." + Integer.toString(i, 36) + "." + Integer.toString(j, 36) + ".dat";
+        String s1 = Integer.toString(i & 63, 36);
+        String s2 = Integer.toString(j & 63, 36);
+        File file1 = new File(this.a, s1);
+
+        if (!file1.exists()) {
+            if (!this.b) {
+                return null;
+            }
+
+            file1.mkdir();
+        }
+
+        file1 = new File(file1, s2);
+        if (!file1.exists()) {
+            if (!this.b) {
+                return null;
+            }
+
+            file1.mkdir();
+        }
+
+        file1 = new File(file1, s);
+        return !file1.exists() && !this.b ? null : file1;
+    }
+
+    public Chunk a(World world, int i, int j) {
+        File file1 = this.a(i, j);
+
+        if (file1 != null && file1.exists()) {
+            try {
+                FileInputStream fileinputstream = new FileInputStream(file1);
+                NBTTagCompound nbttagcompound = CompressedStreamTools.a((InputStream) fileinputstream);
+
+                if (!nbttagcompound.hasKey("Level")) {
+                    System.out.println("Chunk file at " + i + "," + j + " is missing level data, skipping");
+                    return null;
+                }
+
+                if (!nbttagcompound.k("Level").hasKey("Blocks")) {
+                    System.out.println("Chunk file at " + i + "," + j + " is missing block data, skipping");
+                    return null;
+                }
+
+                Chunk chunk = a(world, nbttagcompound.k("Level"));
+
+                if (!chunk.a(i, j)) {
+                    System.out.println("Chunk file at " + i + "," + j + " is in the wrong location; relocating. (Expected " + i + ", " + j + ", got " + chunk.x + ", " + chunk.z + ")");
+                    nbttagcompound.a("xPos", i);
+                    nbttagcompound.a("zPos", j);
+                    chunk = a(world, nbttagcompound.k("Level"));
+                }
+
+                chunk.h();
+                return chunk;
+            } catch (Exception exception) {
+                exception.printStackTrace();
+            }
+        }
+
+        return null;
+    }
+
+    public void a(World world, Chunk chunk) {
+        world.k();
+        File file1 = this.a(chunk.x, chunk.z);
+
+        if (file1.exists()) {
+            WorldData worlddata = world.q();
+
+            worlddata.b(worlddata.g() - file1.length());
+        }
+
+        try {
+            File file2 = new File(this.a, "tmp_chunk.dat");
+            FileOutputStream fileoutputstream = new FileOutputStream(file2);
+            NBTTagCompound nbttagcompound = new NBTTagCompound();
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+            nbttagcompound.a("Level", (NBTBase) nbttagcompound1);
+            a(chunk, world, nbttagcompound1);
+            CompressedStreamTools.a(nbttagcompound, (OutputStream) fileoutputstream);
+            fileoutputstream.close();
+            if (file1.exists()) {
+                file1.delete();
+            }
+
+            file2.renameTo(file1);
+            WorldData worlddata1 = world.q();
+
+            worlddata1.b(worlddata1.g() + file1.length());
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    public static void a(Chunk chunk, World world, NBTTagCompound nbttagcompound) {
+        world.k();
+        nbttagcompound.a("xPos", chunk.x);
+        nbttagcompound.a("zPos", chunk.z);
+        nbttagcompound.setLong("LastUpdate", world.getTime());
+        nbttagcompound.a("Blocks", chunk.b);
+        nbttagcompound.a("Data", chunk.e.a);
+        nbttagcompound.a("SkyLight", chunk.f.a);
+        nbttagcompound.a("BlockLight", chunk.g.a);
+        nbttagcompound.a("HeightMap", chunk.heightMap);
+        nbttagcompound.a("TerrainPopulated", chunk.done);
+        chunk.q = false;
+        NBTTagList nbttaglist = new NBTTagList();
+
+        Iterator iterator;
+        NBTTagCompound nbttagcompound1;
+
+        for (int i = 0; i < chunk.entitySlices.length; ++i) {
+            iterator = chunk.entitySlices[i].iterator();
+
+            while (iterator.hasNext()) {
+                Entity entity = (Entity) iterator.next();
+
+                chunk.q = true;
+                nbttagcompound1 = new NBTTagCompound();
+                if (entity.c(nbttagcompound1)) {
+                    nbttaglist.a((NBTBase) nbttagcompound1);
+                }
+            }
+        }
+
+        nbttagcompound.a("Entities", (NBTBase) nbttaglist);
+        NBTTagList nbttaglist1 = new NBTTagList();
+
+        iterator = chunk.tileEntities.values().iterator();
+
+        while (iterator.hasNext()) {
+            TileEntity tileentity = (TileEntity) iterator.next();
+
+            nbttagcompound1 = new NBTTagCompound();
+            tileentity.b(nbttagcompound1);
+            nbttaglist1.a((NBTBase) nbttagcompound1);
+        }
+
+        nbttagcompound.a("TileEntities", (NBTBase) nbttaglist1);
+    }
+
+    public static Chunk a(World world, NBTTagCompound nbttagcompound) {
+        int i = nbttagcompound.e("xPos");
+        int j = nbttagcompound.e("zPos");
+        Chunk chunk = new Chunk(world, i, j);
+
+        chunk.b = nbttagcompound.j("Blocks");
+        chunk.e = new NibbleArray(nbttagcompound.j("Data"));
+        chunk.f = new NibbleArray(nbttagcompound.j("SkyLight"));
+        chunk.g = new NibbleArray(nbttagcompound.j("BlockLight"));
+        chunk.heightMap = nbttagcompound.j("HeightMap");
+        chunk.done = nbttagcompound.m("TerrainPopulated");
+        if (!chunk.e.a()) {
+            chunk.e = new NibbleArray(chunk.b.length);
+        }
+
+        if (chunk.heightMap == null || !chunk.f.a()) {
+            chunk.heightMap = new byte[256];
+            chunk.f = new NibbleArray(chunk.b.length);
+            chunk.initLighting();
+        }
+
+        if (!chunk.g.a()) {
+            chunk.g = new NibbleArray(chunk.b.length);
+            chunk.a();
+        }
+
+        NBTTagList nbttaglist = nbttagcompound.l("Entities");
+
+        if (nbttaglist != null) {
+            for (int k = 0; k < nbttaglist.c(); ++k) {
+                NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbttaglist.a(k);
+                Entity entity = EntityTypes.a(nbttagcompound1, world);
+
+                chunk.q = true;
+                if (entity != null) {
+                    chunk.a(entity);
+                }
+            }
+        }
+
+        NBTTagList nbttaglist1 = nbttagcompound.l("TileEntities");
+
+        if (nbttaglist1 != null) {
+            for (int l = 0; l < nbttaglist1.c(); ++l) {
+                NBTTagCompound nbttagcompound2 = (NBTTagCompound) nbttaglist1.a(l);
+                TileEntity tileentity = TileEntity.c(nbttagcompound2);
+
+                if (tileentity != null) {
+                    chunk.a(tileentity);
+                }
+            }
+        }
+
+        return chunk;
+    }
+
+    public void a() {}
+
+    public void b() {}
+
+    public void b(World world, Chunk chunk) {}
+}
diff --git a/src/main/java/net/minecraft/server/ChunkPosition.java b/src/main/java/net/minecraft/server/ChunkPosition.java
new file mode 100644
index 00000000..1fe13bb5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkPosition.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class ChunkPosition {
+
+    public final int x;
+    public final int y;
+    public final int z;
+
+    public ChunkPosition(int i, int j, int k) {
+        this.x = i;
+        this.y = j;
+        this.z = k;
+    }
+
+    public boolean equals(Object object) {
+        if (!(object instanceof ChunkPosition)) {
+            return false;
+        } else {
+            ChunkPosition chunkposition = (ChunkPosition) object;
+
+            return chunkposition.x == this.x && chunkposition.y == this.y && chunkposition.z == this.z;
+        }
+    }
+
+    public int hashCode() {
+        return this.x * 8976890 + this.y * 981131 + this.z;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
new file mode 100644
index 00000000..0775e920
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -0,0 +1,642 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class ChunkProviderGenerate implements IChunkProvider {
+
+    private Random j;
+    private NoiseGeneratorOctaves k;
+    private NoiseGeneratorOctaves l;
+    private NoiseGeneratorOctaves m;
+    private NoiseGeneratorOctaves n;
+    private NoiseGeneratorOctaves o;
+    public NoiseGeneratorOctaves a;
+    public NoiseGeneratorOctaves b;
+    public NoiseGeneratorOctaves c;
+    private World p;
+    private double[] q;
+    private double[] r = new double[256];
+    private double[] s = new double[256];
+    private double[] t = new double[256];
+    private MapGenBase u = new MapGenCaves();
+    private BiomeBase[] v;
+    double[] d;
+    double[] e;
+    double[] f;
+    double[] g;
+    double[] h;
+    int[][] i = new int[32][32];
+    private double[] w;
+
+    public ChunkProviderGenerate(World world, long i) {
+        this.p = world;
+        this.j = new Random(i);
+        this.k = new NoiseGeneratorOctaves(this.j, 16);
+        this.l = new NoiseGeneratorOctaves(this.j, 16);
+        this.m = new NoiseGeneratorOctaves(this.j, 8);
+        this.n = new NoiseGeneratorOctaves(this.j, 4);
+        this.o = new NoiseGeneratorOctaves(this.j, 4);
+        this.a = new NoiseGeneratorOctaves(this.j, 10);
+        this.b = new NoiseGeneratorOctaves(this.j, 16);
+        this.c = new NoiseGeneratorOctaves(this.j, 8);
+    }
+
+    public void a(int i, int j, byte[] abyte, BiomeBase[] abiomebase, double[] adouble) {
+        byte b0 = 4;
+        byte b1 = 64;
+        int k = b0 + 1;
+        byte b2 = 17;
+        int l = b0 + 1;
+
+        this.q = this.a(this.q, i * b0, 0, j * b0, k, b2, l);
+
+        for (int i1 = 0; i1 < b0; ++i1) {
+            for (int j1 = 0; j1 < b0; ++j1) {
+                for (int k1 = 0; k1 < 16; ++k1) {
+                    double d0 = 0.125D;
+                    double d1 = this.q[((i1 + 0) * l + j1 + 0) * b2 + k1 + 0];
+                    double d2 = this.q[((i1 + 0) * l + j1 + 1) * b2 + k1 + 0];
+                    double d3 = this.q[((i1 + 1) * l + j1 + 0) * b2 + k1 + 0];
+                    double d4 = this.q[((i1 + 1) * l + j1 + 1) * b2 + k1 + 0];
+                    double d5 = (this.q[((i1 + 0) * l + j1 + 0) * b2 + k1 + 1] - d1) * d0;
+                    double d6 = (this.q[((i1 + 0) * l + j1 + 1) * b2 + k1 + 1] - d2) * d0;
+                    double d7 = (this.q[((i1 + 1) * l + j1 + 0) * b2 + k1 + 1] - d3) * d0;
+                    double d8 = (this.q[((i1 + 1) * l + j1 + 1) * b2 + k1 + 1] - d4) * d0;
+
+                    for (int l1 = 0; l1 < 8; ++l1) {
+                        double d9 = 0.25D;
+                        double d10 = d1;
+                        double d11 = d2;
+                        double d12 = (d3 - d1) * d9;
+                        double d13 = (d4 - d2) * d9;
+
+                        for (int i2 = 0; i2 < 4; ++i2) {
+                            int j2 = i2 + i1 * 4 << 11 | 0 + j1 * 4 << 7 | k1 * 8 + l1;
+                            short short1 = 128;
+                            double d14 = 0.25D;
+                            double d15 = d10;
+                            double d16 = (d11 - d10) * d14;
+
+                            for (int k2 = 0; k2 < 4; ++k2) {
+                                double d17 = adouble[(i1 * 4 + i2) * 16 + j1 * 4 + k2];
+                                int l2 = 0;
+
+                                if (k1 * 8 + l1 < b1) {
+                                    if (d17 < 0.5D && k1 * 8 + l1 >= b1 - 1) {
+                                        l2 = Block.ICE.id;
+                                    } else {
+                                        l2 = Block.STATIONARY_WATER.id;
+                                    }
+                                }
+
+                                if (d15 > 0.0D) {
+                                    l2 = Block.STONE.id;
+                                }
+
+                                abyte[j2] = (byte) l2;
+                                j2 += short1;
+                                d15 += d16;
+                            }
+
+                            d10 += d12;
+                            d11 += d13;
+                        }
+
+                        d1 += d5;
+                        d2 += d6;
+                        d3 += d7;
+                        d4 += d8;
+                    }
+                }
+            }
+        }
+    }
+
+    public void a(int i, int j, byte[] abyte, BiomeBase[] abiomebase) {
+        byte b0 = 64;
+        double d0 = 0.03125D;
+
+        this.r = this.n.a(this.r, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0, d0, 1.0D);
+        this.s = this.n.a(this.s, (double) (i * 16), 109.0134D, (double) (j * 16), 16, 1, 16, d0, 1.0D, d0);
+        this.t = this.o.a(this.t, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0 * 2.0D, d0 * 2.0D, d0 * 2.0D);
+
+        for (int k = 0; k < 16; ++k) {
+            for (int l = 0; l < 16; ++l) {
+                BiomeBase biomebase = abiomebase[k + l * 16];
+                boolean flag = this.r[k + l * 16] + this.j.nextDouble() * 0.2D > 0.0D;
+                boolean flag1 = this.s[k + l * 16] + this.j.nextDouble() * 0.2D > 3.0D;
+                int i1 = (int) (this.t[k + l * 16] / 3.0D + 3.0D + this.j.nextDouble() * 0.25D);
+                int j1 = -1;
+                byte b1 = biomebase.p;
+                byte b2 = biomebase.q;
+
+                for (int k1 = 127; k1 >= 0; --k1) {
+                    int l1 = (l * 16 + k) * 128 + k1;
+
+                    if (k1 <= 0 + this.j.nextInt(5)) {
+                        abyte[l1] = (byte) Block.BEDROCK.id;
+                    } else {
+                        byte b3 = abyte[l1];
+
+                        if (b3 == 0) {
+                            j1 = -1;
+                        } else if (b3 == Block.STONE.id) {
+                            if (j1 == -1) {
+                                if (i1 <= 0) {
+                                    b1 = 0;
+                                    b2 = (byte) Block.STONE.id;
+                                } else if (k1 >= b0 - 4 && k1 <= b0 + 1) {
+                                    b1 = biomebase.p;
+                                    b2 = biomebase.q;
+                                    if (flag1) {
+                                        b1 = 0;
+                                    }
+
+                                    if (flag1) {
+                                        b2 = (byte) Block.GRAVEL.id;
+                                    }
+
+                                    if (flag) {
+                                        b1 = (byte) Block.SAND.id;
+                                    }
+
+                                    if (flag) {
+                                        b2 = (byte) Block.SAND.id;
+                                    }
+                                }
+
+                                if (k1 < b0 && b1 == 0) {
+                                    b1 = (byte) Block.STATIONARY_WATER.id;
+                                }
+
+                                j1 = i1;
+                                if (k1 >= b0 - 1) {
+                                    abyte[l1] = b1;
+                                } else {
+                                    abyte[l1] = b2;
+                                }
+                            } else if (j1 > 0) {
+                                --j1;
+                                abyte[l1] = b2;
+                                if (j1 == 0 && b2 == Block.SAND.id) {
+                                    j1 = this.j.nextInt(4);
+                                    b2 = (byte) Block.SANDSTONE.id;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public Chunk getChunkAt(int i, int j) {
+        return this.getOrCreateChunk(i, j);
+    }
+
+    public Chunk getOrCreateChunk(int i, int j) {
+        this.j.setSeed((long) i * 341873128712L + (long) j * 132897987541L);
+        byte[] abyte = new byte['\u8000'];
+        Chunk chunk = new Chunk(this.p, abyte, i, j);
+
+        this.v = this.p.getWorldChunkManager().a(this.v, i * 16, j * 16, 16, 16);
+        double[] adouble = this.p.getWorldChunkManager().temperature;
+
+        this.a(i, j, abyte, this.v, adouble);
+        this.a(i, j, abyte, this.v);
+        this.u.a(this, this.p, i, j, abyte);
+        chunk.initLighting();
+        return chunk;
+    }
+
+    private double[] a(double[] adouble, int i, int j, int k, int l, int i1, int j1) {
+        if (adouble == null) {
+            adouble = new double[l * i1 * j1];
+        }
+
+        double d0 = 684.412D;
+        double d1 = 684.412D;
+        double[] adouble1 = this.p.getWorldChunkManager().temperature;
+        double[] adouble2 = this.p.getWorldChunkManager().rain;
+
+        this.g = this.a.a(this.g, i, k, l, j1, 1.121D, 1.121D, 0.5D);
+        this.h = this.b.a(this.h, i, k, l, j1, 200.0D, 200.0D, 0.5D);
+        this.d = this.m.a(this.d, (double) i, (double) j, (double) k, l, i1, j1, d0 / 80.0D, d1 / 160.0D, d0 / 80.0D);
+        this.e = this.k.a(this.e, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        this.f = this.l.a(this.f, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        int k1 = 0;
+        int l1 = 0;
+        int i2 = 16 / l;
+
+        for (int j2 = 0; j2 < l; ++j2) {
+            int k2 = j2 * i2 + i2 / 2;
+
+            for (int l2 = 0; l2 < j1; ++l2) {
+                int i3 = l2 * i2 + i2 / 2;
+                double d2 = adouble1[k2 * 16 + i3];
+                double d3 = adouble2[k2 * 16 + i3] * d2;
+                double d4 = 1.0D - d3;
+
+                d4 *= d4;
+                d4 *= d4;
+                d4 = 1.0D - d4;
+                double d5 = (this.g[l1] + 256.0D) / 512.0D;
+
+                d5 *= d4;
+                if (d5 > 1.0D) {
+                    d5 = 1.0D;
+                }
+
+                double d6 = this.h[l1] / 8000.0D;
+
+                if (d6 < 0.0D) {
+                    d6 = -d6 * 0.3D;
+                }
+
+                d6 = d6 * 3.0D - 2.0D;
+                if (d6 < 0.0D) {
+                    d6 /= 2.0D;
+                    if (d6 < -1.0D) {
+                        d6 = -1.0D;
+                    }
+
+                    d6 /= 1.4D;
+                    d6 /= 2.0D;
+                    d5 = 0.0D;
+                } else {
+                    if (d6 > 1.0D) {
+                        d6 = 1.0D;
+                    }
+
+                    d6 /= 8.0D;
+                }
+
+                if (d5 < 0.0D) {
+                    d5 = 0.0D;
+                }
+
+                d5 += 0.5D;
+                d6 = d6 * (double) i1 / 16.0D;
+                double d7 = (double) i1 / 2.0D + d6 * 4.0D;
+
+                ++l1;
+
+                for (int j3 = 0; j3 < i1; ++j3) {
+                    double d8 = 0.0D;
+                    double d9 = ((double) j3 - d7) * 12.0D / d5;
+
+                    if (d9 < 0.0D) {
+                        d9 *= 4.0D;
+                    }
+
+                    double d10 = this.e[k1] / 512.0D;
+                    double d11 = this.f[k1] / 512.0D;
+                    double d12 = (this.d[k1] / 10.0D + 1.0D) / 2.0D;
+
+                    if (d12 < 0.0D) {
+                        d8 = d10;
+                    } else if (d12 > 1.0D) {
+                        d8 = d11;
+                    } else {
+                        d8 = d10 + (d11 - d10) * d12;
+                    }
+
+                    d8 -= d9;
+                    if (j3 > i1 - 4) {
+                        double d13 = (double) ((float) (j3 - (i1 - 4)) / 3.0F);
+
+                        d8 = d8 * (1.0D - d13) + -10.0D * d13;
+                    }
+
+                    adouble[k1] = d8;
+                    ++k1;
+                }
+            }
+        }
+
+        return adouble;
+    }
+
+    public boolean isChunkLoaded(int i, int j) {
+        return true;
+    }
+
+    public void getChunkAt(IChunkProvider ichunkprovider, int i, int j) {
+        BlockSand.instaFall = true;
+        int k = i * 16;
+        int l = j * 16;
+        BiomeBase biomebase = this.p.getWorldChunkManager().getBiome(k + 16, l + 16);
+
+        this.j.setSeed(this.p.getSeed());
+        long i1 = this.j.nextLong() / 2L * 2L + 1L;
+        long j1 = this.j.nextLong() / 2L * 2L + 1L;
+
+        this.j.setSeed((long) i * i1 + (long) j * j1 ^ this.p.getSeed());
+        double d0 = 0.25D;
+        int k1;
+        int l1;
+        int i2;
+
+        if (this.j.nextInt(4) == 0) {
+            k1 = k + this.j.nextInt(16) + 8;
+            l1 = this.j.nextInt(128);
+            i2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLakes(Block.STATIONARY_WATER.id)).a(this.p, this.j, k1, l1, i2);
+        }
+
+        if (this.j.nextInt(8) == 0) {
+            k1 = k + this.j.nextInt(16) + 8;
+            l1 = this.j.nextInt(this.j.nextInt(120) + 8);
+            i2 = l + this.j.nextInt(16) + 8;
+            if (l1 < 64 || this.j.nextInt(10) == 0) {
+                (new WorldGenLakes(Block.STATIONARY_LAVA.id)).a(this.p, this.j, k1, l1, i2);
+            }
+        }
+
+        int j2;
+
+        for (k1 = 0; k1 < 8; ++k1) {
+            l1 = k + this.j.nextInt(16) + 8;
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenDungeons()).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 10; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenClay(32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.DIRT.id, 32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 10; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.GRAVEL.id, 32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.COAL_ORE.id, 16)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(64);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.IRON_ORE.id, 8)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 2; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(32);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.GOLD_ORE.id, 8)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 8; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.REDSTONE_ORE.id, 7)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 1; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.DIAMOND_ORE.id, 7)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 1; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16) + this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.LAPIS_ORE.id, 6)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        d0 = 0.5D;
+        k1 = (int) ((this.c.a((double) k * d0, (double) l * d0) / 8.0D + this.j.nextDouble() * 4.0D + 4.0D) / 3.0D);
+        l1 = 0;
+        if (this.j.nextInt(10) == 0) {
+            ++l1;
+        }
+
+        if (biomebase == BiomeBase.FOREST) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.RAINFOREST) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.SEASONAL_FOREST) {
+            l1 += k1 + 2;
+        }
+
+        if (biomebase == BiomeBase.TAIGA) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.DESERT) {
+            l1 -= 20;
+        }
+
+        if (biomebase == BiomeBase.TUNDRA) {
+            l1 -= 20;
+        }
+
+        if (biomebase == BiomeBase.PLAINS) {
+            l1 -= 20;
+        }
+
+        int k2;
+
+        for (i2 = 0; i2 < l1; ++i2) {
+            j2 = k + this.j.nextInt(16) + 8;
+            k2 = l + this.j.nextInt(16) + 8;
+            WorldGenerator worldgenerator = biomebase.a(this.j);
+
+            worldgenerator.a(1.0D, 1.0D, 1.0D);
+            worldgenerator.a(this.p, this.j, j2, this.p.getHighestBlockYAt(j2, k2), k2);
+        }
+
+        byte b0 = 0;
+
+        if (biomebase == BiomeBase.FOREST) {
+            b0 = 2;
+        }
+
+        if (biomebase == BiomeBase.SEASONAL_FOREST) {
+            b0 = 4;
+        }
+
+        if (biomebase == BiomeBase.TAIGA) {
+            b0 = 2;
+        }
+
+        if (biomebase == BiomeBase.PLAINS) {
+            b0 = 3;
+        }
+
+        int l2;
+        int i3;
+
+        for (j2 = 0; j2 < b0; ++j2) {
+            k2 = k + this.j.nextInt(16) + 8;
+            i3 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.YELLOW_FLOWER.id)).a(this.p, this.j, k2, i3, l2);
+        }
+
+        byte b1 = 0;
+
+        if (biomebase == BiomeBase.FOREST) {
+            b1 = 2;
+        }
+
+        if (biomebase == BiomeBase.RAINFOREST) {
+            b1 = 10;
+        }
+
+        if (biomebase == BiomeBase.SEASONAL_FOREST) {
+            b1 = 2;
+        }
+
+        if (biomebase == BiomeBase.TAIGA) {
+            b1 = 1;
+        }
+
+        if (biomebase == BiomeBase.PLAINS) {
+            b1 = 10;
+        }
+
+        int j3;
+        int k3;
+
+        for (k2 = 0; k2 < b1; ++k2) {
+            byte b2 = 1;
+
+            if (biomebase == BiomeBase.RAINFOREST && this.j.nextInt(3) != 0) {
+                b2 = 2;
+            }
+
+            l2 = k + this.j.nextInt(16) + 8;
+            k3 = this.j.nextInt(128);
+            j3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenGrass(Block.LONG_GRASS.id, b2)).a(this.p, this.j, l2, k3, j3);
+        }
+
+        b1 = 0;
+        if (biomebase == BiomeBase.DESERT) {
+            b1 = 2;
+        }
+
+        for (k2 = 0; k2 < b1; ++k2) {
+            i3 = k + this.j.nextInt(16) + 8;
+            l2 = this.j.nextInt(128);
+            k3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenDeadBush(Block.DEAD_BUSH.id)).a(this.p, this.j, i3, l2, k3);
+        }
+
+        if (this.j.nextInt(2) == 0) {
+            k2 = k + this.j.nextInt(16) + 8;
+            i3 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.RED_ROSE.id)).a(this.p, this.j, k2, i3, l2);
+        }
+
+        if (this.j.nextInt(4) == 0) {
+            k2 = k + this.j.nextInt(16) + 8;
+            i3 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.BROWN_MUSHROOM.id)).a(this.p, this.j, k2, i3, l2);
+        }
+
+        if (this.j.nextInt(8) == 0) {
+            k2 = k + this.j.nextInt(16) + 8;
+            i3 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.RED_MUSHROOM.id)).a(this.p, this.j, k2, i3, l2);
+        }
+
+        for (k2 = 0; k2 < 10; ++k2) {
+            i3 = k + this.j.nextInt(16) + 8;
+            l2 = this.j.nextInt(128);
+            k3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenReed()).a(this.p, this.j, i3, l2, k3);
+        }
+
+        if (this.j.nextInt(32) == 0) {
+            k2 = k + this.j.nextInt(16) + 8;
+            i3 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenPumpkin()).a(this.p, this.j, k2, i3, l2);
+        }
+
+        k2 = 0;
+        if (biomebase == BiomeBase.DESERT) {
+            k2 += 10;
+        }
+
+        for (i3 = 0; i3 < k2; ++i3) {
+            l2 = k + this.j.nextInt(16) + 8;
+            k3 = this.j.nextInt(128);
+            j3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenCactus()).a(this.p, this.j, l2, k3, j3);
+        }
+
+        for (i3 = 0; i3 < 50; ++i3) {
+            l2 = k + this.j.nextInt(16) + 8;
+            k3 = this.j.nextInt(this.j.nextInt(120) + 8);
+            j3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.WATER.id)).a(this.p, this.j, l2, k3, j3);
+        }
+
+        for (i3 = 0; i3 < 20; ++i3) {
+            l2 = k + this.j.nextInt(16) + 8;
+            k3 = this.j.nextInt(this.j.nextInt(this.j.nextInt(112) + 8) + 8);
+            j3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.LAVA.id)).a(this.p, this.j, l2, k3, j3);
+        }
+
+        this.w = this.p.getWorldChunkManager().a(this.w, k + 8, l + 8, 16, 16);
+
+        for (i3 = k + 8; i3 < k + 8 + 16; ++i3) {
+            for (l2 = l + 8; l2 < l + 8 + 16; ++l2) {
+                k3 = i3 - (k + 8);
+                j3 = l2 - (l + 8);
+                int l3 = this.p.e(i3, l2);
+                double d1 = this.w[k3 * 16 + j3] - (double) (l3 - 64) / 64.0D * 0.3D;
+
+                if (d1 < 0.5D && l3 > 0 && l3 < 128 && this.p.isEmpty(i3, l3, l2) && this.p.getMaterial(i3, l3 - 1, l2).isSolid() && this.p.getMaterial(i3, l3 - 1, l2) != Material.ICE) {
+                    this.p.setTypeId(i3, l3, l2, Block.SNOW.id);
+                }
+            }
+        }
+
+        BlockSand.instaFall = false;
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+        return true;
+    }
+
+    public boolean unloadChunks() {
+        return false;
+    }
+
+    public boolean canSave() {
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderHell.java b/src/main/java/net/minecraft/server/ChunkProviderHell.java
new file mode 100644
index 00000000..e9b5f1a3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkProviderHell.java
@@ -0,0 +1,387 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class ChunkProviderHell implements IChunkProvider {
+
+    private Random h;
+    private NoiseGeneratorOctaves i;
+    private NoiseGeneratorOctaves j;
+    private NoiseGeneratorOctaves k;
+    private NoiseGeneratorOctaves l;
+    private NoiseGeneratorOctaves m;
+    public NoiseGeneratorOctaves a;
+    public NoiseGeneratorOctaves b;
+    private World n;
+    private double[] o;
+    private double[] p = new double[256];
+    private double[] q = new double[256];
+    private double[] r = new double[256];
+    private MapGenBase s = new MapGenCavesHell();
+    double[] c;
+    double[] d;
+    double[] e;
+    double[] f;
+    double[] g;
+
+    public ChunkProviderHell(World world, long i) {
+        this.n = world;
+        this.h = new Random(i);
+        this.i = new NoiseGeneratorOctaves(this.h, 16);
+        this.j = new NoiseGeneratorOctaves(this.h, 16);
+        this.k = new NoiseGeneratorOctaves(this.h, 8);
+        this.l = new NoiseGeneratorOctaves(this.h, 4);
+        this.m = new NoiseGeneratorOctaves(this.h, 4);
+        this.a = new NoiseGeneratorOctaves(this.h, 10);
+        this.b = new NoiseGeneratorOctaves(this.h, 16);
+    }
+
+    public void a(int i, int j, byte[] abyte) {
+        byte b0 = 4;
+        byte b1 = 32;
+        int k = b0 + 1;
+        byte b2 = 17;
+        int l = b0 + 1;
+
+        this.o = this.a(this.o, i * b0, 0, j * b0, k, b2, l);
+
+        for (int i1 = 0; i1 < b0; ++i1) {
+            for (int j1 = 0; j1 < b0; ++j1) {
+                for (int k1 = 0; k1 < 16; ++k1) {
+                    double d0 = 0.125D;
+                    double d1 = this.o[((i1 + 0) * l + j1 + 0) * b2 + k1 + 0];
+                    double d2 = this.o[((i1 + 0) * l + j1 + 1) * b2 + k1 + 0];
+                    double d3 = this.o[((i1 + 1) * l + j1 + 0) * b2 + k1 + 0];
+                    double d4 = this.o[((i1 + 1) * l + j1 + 1) * b2 + k1 + 0];
+                    double d5 = (this.o[((i1 + 0) * l + j1 + 0) * b2 + k1 + 1] - d1) * d0;
+                    double d6 = (this.o[((i1 + 0) * l + j1 + 1) * b2 + k1 + 1] - d2) * d0;
+                    double d7 = (this.o[((i1 + 1) * l + j1 + 0) * b2 + k1 + 1] - d3) * d0;
+                    double d8 = (this.o[((i1 + 1) * l + j1 + 1) * b2 + k1 + 1] - d4) * d0;
+
+                    for (int l1 = 0; l1 < 8; ++l1) {
+                        double d9 = 0.25D;
+                        double d10 = d1;
+                        double d11 = d2;
+                        double d12 = (d3 - d1) * d9;
+                        double d13 = (d4 - d2) * d9;
+
+                        for (int i2 = 0; i2 < 4; ++i2) {
+                            int j2 = i2 + i1 * 4 << 11 | 0 + j1 * 4 << 7 | k1 * 8 + l1;
+                            short short1 = 128;
+                            double d14 = 0.25D;
+                            double d15 = d10;
+                            double d16 = (d11 - d10) * d14;
+
+                            for (int k2 = 0; k2 < 4; ++k2) {
+                                int l2 = 0;
+
+                                if (k1 * 8 + l1 < b1) {
+                                    l2 = Block.STATIONARY_LAVA.id;
+                                }
+
+                                if (d15 > 0.0D) {
+                                    l2 = Block.NETHERRACK.id;
+                                }
+
+                                abyte[j2] = (byte) l2;
+                                j2 += short1;
+                                d15 += d16;
+                            }
+
+                            d10 += d12;
+                            d11 += d13;
+                        }
+
+                        d1 += d5;
+                        d2 += d6;
+                        d3 += d7;
+                        d4 += d8;
+                    }
+                }
+            }
+        }
+    }
+
+    public void b(int i, int j, byte[] abyte) {
+        byte b0 = 64;
+        double d0 = 0.03125D;
+
+        this.p = this.l.a(this.p, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0, d0, 1.0D);
+        this.q = this.l.a(this.q, (double) (i * 16), 109.0134D, (double) (j * 16), 16, 1, 16, d0, 1.0D, d0);
+        this.r = this.m.a(this.r, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0 * 2.0D, d0 * 2.0D, d0 * 2.0D);
+
+        for (int k = 0; k < 16; ++k) {
+            for (int l = 0; l < 16; ++l) {
+                boolean flag = this.p[k + l * 16] + this.h.nextDouble() * 0.2D > 0.0D;
+                boolean flag1 = this.q[k + l * 16] + this.h.nextDouble() * 0.2D > 0.0D;
+                int i1 = (int) (this.r[k + l * 16] / 3.0D + 3.0D + this.h.nextDouble() * 0.25D);
+                int j1 = -1;
+                byte b1 = (byte) Block.NETHERRACK.id;
+                byte b2 = (byte) Block.NETHERRACK.id;
+
+                for (int k1 = 127; k1 >= 0; --k1) {
+                    int l1 = (l * 16 + k) * 128 + k1;
+
+                    if (k1 >= 127 - this.h.nextInt(5)) {
+                        abyte[l1] = (byte) Block.BEDROCK.id;
+                    } else if (k1 <= 0 + this.h.nextInt(5)) {
+                        abyte[l1] = (byte) Block.BEDROCK.id;
+                    } else {
+                        byte b3 = abyte[l1];
+
+                        if (b3 == 0) {
+                            j1 = -1;
+                        } else if (b3 == Block.NETHERRACK.id) {
+                            if (j1 == -1) {
+                                if (i1 <= 0) {
+                                    b1 = 0;
+                                    b2 = (byte) Block.NETHERRACK.id;
+                                } else if (k1 >= b0 - 4 && k1 <= b0 + 1) {
+                                    b1 = (byte) Block.NETHERRACK.id;
+                                    b2 = (byte) Block.NETHERRACK.id;
+                                    if (flag1) {
+                                        b1 = (byte) Block.GRAVEL.id;
+                                    }
+
+                                    if (flag1) {
+                                        b2 = (byte) Block.NETHERRACK.id;
+                                    }
+
+                                    if (flag) {
+                                        b1 = (byte) Block.SOUL_SAND.id;
+                                    }
+
+                                    if (flag) {
+                                        b2 = (byte) Block.SOUL_SAND.id;
+                                    }
+                                }
+
+                                if (k1 < b0 && b1 == 0) {
+                                    b1 = (byte) Block.STATIONARY_LAVA.id;
+                                }
+
+                                j1 = i1;
+                                if (k1 >= b0 - 1) {
+                                    abyte[l1] = b1;
+                                } else {
+                                    abyte[l1] = b2;
+                                }
+                            } else if (j1 > 0) {
+                                --j1;
+                                abyte[l1] = b2;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public Chunk getChunkAt(int i, int j) {
+        return this.getOrCreateChunk(i, j);
+    }
+
+    public Chunk getOrCreateChunk(int i, int j) {
+        this.h.setSeed((long) i * 341873128712L + (long) j * 132897987541L);
+        byte[] abyte = new byte['\u8000'];
+
+        this.a(i, j, abyte);
+        this.b(i, j, abyte);
+        this.s.a(this, this.n, i, j, abyte);
+        Chunk chunk = new Chunk(this.n, abyte, i, j);
+
+        return chunk;
+    }
+
+    private double[] a(double[] adouble, int i, int j, int k, int l, int i1, int j1) {
+        if (adouble == null) {
+            adouble = new double[l * i1 * j1];
+        }
+
+        double d0 = 684.412D;
+        double d1 = 2053.236D;
+
+        this.f = this.a.a(this.f, (double) i, (double) j, (double) k, l, 1, j1, 1.0D, 0.0D, 1.0D);
+        this.g = this.b.a(this.g, (double) i, (double) j, (double) k, l, 1, j1, 100.0D, 0.0D, 100.0D);
+        this.c = this.k.a(this.c, (double) i, (double) j, (double) k, l, i1, j1, d0 / 80.0D, d1 / 60.0D, d0 / 80.0D);
+        this.d = this.i.a(this.d, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        this.e = this.j.a(this.e, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        int k1 = 0;
+        int l1 = 0;
+        double[] adouble1 = new double[i1];
+
+        int i2;
+
+        for (i2 = 0; i2 < i1; ++i2) {
+            adouble1[i2] = Math.cos((double) i2 * 3.141592653589793D * 6.0D / (double) i1) * 2.0D;
+            double d2 = (double) i2;
+
+            if (i2 > i1 / 2) {
+                d2 = (double) (i1 - 1 - i2);
+            }
+
+            if (d2 < 4.0D) {
+                d2 = 4.0D - d2;
+                adouble1[i2] -= d2 * d2 * d2 * 10.0D;
+            }
+        }
+
+        for (i2 = 0; i2 < l; ++i2) {
+            for (int j2 = 0; j2 < j1; ++j2) {
+                double d3 = (this.f[l1] + 256.0D) / 512.0D;
+
+                if (d3 > 1.0D) {
+                    d3 = 1.0D;
+                }
+
+                double d4 = 0.0D;
+                double d5 = this.g[l1] / 8000.0D;
+
+                if (d5 < 0.0D) {
+                    d5 = -d5;
+                }
+
+                d5 = d5 * 3.0D - 3.0D;
+                if (d5 < 0.0D) {
+                    d5 /= 2.0D;
+                    if (d5 < -1.0D) {
+                        d5 = -1.0D;
+                    }
+
+                    d5 /= 1.4D;
+                    d5 /= 2.0D;
+                    d3 = 0.0D;
+                } else {
+                    if (d5 > 1.0D) {
+                        d5 = 1.0D;
+                    }
+
+                    d5 /= 6.0D;
+                }
+
+                d3 += 0.5D;
+                d5 = d5 * (double) i1 / 16.0D;
+                ++l1;
+
+                for (int k2 = 0; k2 < i1; ++k2) {
+                    double d6 = 0.0D;
+                    double d7 = adouble1[k2];
+                    double d8 = this.d[k1] / 512.0D;
+                    double d9 = this.e[k1] / 512.0D;
+                    double d10 = (this.c[k1] / 10.0D + 1.0D) / 2.0D;
+
+                    if (d10 < 0.0D) {
+                        d6 = d8;
+                    } else if (d10 > 1.0D) {
+                        d6 = d9;
+                    } else {
+                        d6 = d8 + (d9 - d8) * d10;
+                    }
+
+                    d6 -= d7;
+                    double d11;
+
+                    if (k2 > i1 - 4) {
+                        d11 = (double) ((float) (k2 - (i1 - 4)) / 3.0F);
+                        d6 = d6 * (1.0D - d11) + -10.0D * d11;
+                    }
+
+                    if ((double) k2 < d4) {
+                        d11 = (d4 - (double) k2) / 4.0D;
+                        if (d11 < 0.0D) {
+                            d11 = 0.0D;
+                        }
+
+                        if (d11 > 1.0D) {
+                            d11 = 1.0D;
+                        }
+
+                        d6 = d6 * (1.0D - d11) + -10.0D * d11;
+                    }
+
+                    adouble[k1] = d6;
+                    ++k1;
+                }
+            }
+        }
+
+        return adouble;
+    }
+
+    public boolean isChunkLoaded(int i, int j) {
+        return true;
+    }
+
+    public void getChunkAt(IChunkProvider ichunkprovider, int i, int j) {
+        BlockSand.instaFall = true;
+        int k = i * 16;
+        int l = j * 16;
+
+        int i1;
+        int j1;
+        int k1;
+        int l1;
+
+        for (i1 = 0; i1 < 8; ++i1) {
+            j1 = k + this.h.nextInt(16) + 8;
+            k1 = this.h.nextInt(120) + 4;
+            l1 = l + this.h.nextInt(16) + 8;
+            (new WorldGenHellLava(Block.LAVA.id)).a(this.n, this.h, j1, k1, l1);
+        }
+
+        i1 = this.h.nextInt(this.h.nextInt(10) + 1) + 1;
+
+        int i2;
+
+        for (j1 = 0; j1 < i1; ++j1) {
+            k1 = k + this.h.nextInt(16) + 8;
+            l1 = this.h.nextInt(120) + 4;
+            i2 = l + this.h.nextInt(16) + 8;
+            (new WorldGenFire()).a(this.n, this.h, k1, l1, i2);
+        }
+
+        i1 = this.h.nextInt(this.h.nextInt(10) + 1);
+
+        for (j1 = 0; j1 < i1; ++j1) {
+            k1 = k + this.h.nextInt(16) + 8;
+            l1 = this.h.nextInt(120) + 4;
+            i2 = l + this.h.nextInt(16) + 8;
+            (new WorldGenLightStone2()).a(this.n, this.h, k1, l1, i2);
+        }
+
+        for (j1 = 0; j1 < 10; ++j1) {
+            k1 = k + this.h.nextInt(16) + 8;
+            l1 = this.h.nextInt(128);
+            i2 = l + this.h.nextInt(16) + 8;
+            (new WorldGenLightStone1()).a(this.n, this.h, k1, l1, i2);
+        }
+
+        if (this.h.nextInt(1) == 0) {
+            j1 = k + this.h.nextInt(16) + 8;
+            k1 = this.h.nextInt(128);
+            l1 = l + this.h.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.BROWN_MUSHROOM.id)).a(this.n, this.h, j1, k1, l1);
+        }
+
+        if (this.h.nextInt(1) == 0) {
+            j1 = k + this.h.nextInt(16) + 8;
+            k1 = this.h.nextInt(128);
+            l1 = l + this.h.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.RED_MUSHROOM.id)).a(this.n, this.h, j1, k1, l1);
+        }
+
+        BlockSand.instaFall = false;
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+        return true;
+    }
+
+    public boolean unloadChunks() {
+        return false;
+    }
+
+    public boolean canSave() {
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderLoadOrGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderLoadOrGenerate.java
new file mode 100644
index 00000000..28d8f8f8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkProviderLoadOrGenerate.java
@@ -0,0 +1,195 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class ChunkProviderLoadOrGenerate implements IChunkProvider {
+
+    private Set a = new HashSet();
+    private Chunk b;
+    private IChunkProvider c;
+    private IChunkLoader d;
+    private Map e = new HashMap();
+    private List f = new ArrayList();
+    private World g;
+
+    public ChunkProviderLoadOrGenerate(World world, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
+        this.b = new EmptyChunk(world, new byte['\u8000'], 0, 0);
+        this.g = world;
+        this.d = ichunkloader;
+        this.c = ichunkprovider;
+    }
+
+    public boolean isChunkLoaded(int i, int j) {
+        return this.e.containsKey(Integer.valueOf(ChunkCoordIntPair.a(i, j)));
+    }
+
+    public Chunk getChunkAt(int i, int j) {
+        int k = ChunkCoordIntPair.a(i, j);
+
+        this.a.remove(Integer.valueOf(k));
+        Chunk chunk = (Chunk) this.e.get(Integer.valueOf(k));
+
+        if (chunk == null) {
+            chunk = this.d(i, j);
+            if (chunk == null) {
+                if (this.c == null) {
+                    chunk = this.b;
+                } else {
+                    chunk = this.c.getOrCreateChunk(i, j);
+                }
+            }
+
+            this.e.put(Integer.valueOf(k), chunk);
+            this.f.add(chunk);
+            if (chunk != null) {
+                chunk.loadNOP();
+                chunk.addEntities();
+            }
+
+            if (!chunk.done && this.isChunkLoaded(i + 1, j + 1) && this.isChunkLoaded(i, j + 1) && this.isChunkLoaded(i + 1, j)) {
+                this.getChunkAt(this, i, j);
+            }
+
+            if (this.isChunkLoaded(i - 1, j) && !this.getOrCreateChunk(i - 1, j).done && this.isChunkLoaded(i - 1, j + 1) && this.isChunkLoaded(i, j + 1) && this.isChunkLoaded(i - 1, j)) {
+                this.getChunkAt(this, i - 1, j);
+            }
+
+            if (this.isChunkLoaded(i, j - 1) && !this.getOrCreateChunk(i, j - 1).done && this.isChunkLoaded(i + 1, j - 1) && this.isChunkLoaded(i, j - 1) && this.isChunkLoaded(i + 1, j)) {
+                this.getChunkAt(this, i, j - 1);
+            }
+
+            if (this.isChunkLoaded(i - 1, j - 1) && !this.getOrCreateChunk(i - 1, j - 1).done && this.isChunkLoaded(i - 1, j - 1) && this.isChunkLoaded(i, j - 1) && this.isChunkLoaded(i - 1, j)) {
+                this.getChunkAt(this, i - 1, j - 1);
+            }
+        }
+
+        return chunk;
+    }
+
+    public Chunk getOrCreateChunk(int i, int j) {
+        Chunk chunk = (Chunk) this.e.get(Integer.valueOf(ChunkCoordIntPair.a(i, j)));
+
+        return chunk == null ? this.getChunkAt(i, j) : chunk;
+    }
+
+    private Chunk d(int i, int j) {
+        if (this.d == null) {
+            return null;
+        } else {
+            try {
+                Chunk chunk = this.d.a(this.g, i, j);
+
+                if (chunk != null) {
+                    chunk.r = this.g.getTime();
+                }
+
+                return chunk;
+            } catch (Exception exception) {
+                exception.printStackTrace();
+                return null;
+            }
+        }
+    }
+
+    private void a(Chunk chunk) {
+        if (this.d != null) {
+            try {
+                this.d.b(this.g, chunk);
+            } catch (Exception exception) {
+                exception.printStackTrace();
+            }
+        }
+    }
+
+    private void b(Chunk chunk) throws IOException {
+        if (this.d != null) {
+            chunk.r = this.g.getTime();
+			this.d.a(this.g, chunk);
+        }
+    }
+
+    public void getChunkAt(IChunkProvider ichunkprovider, int i, int j) {
+        Chunk chunk = this.getOrCreateChunk(i, j);
+
+        if (!chunk.done) {
+            chunk.done = true;
+            if (this.c != null) {
+                this.c.getChunkAt(ichunkprovider, i, j);
+                chunk.f();
+            }
+        }
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+        int i = 0;
+
+        for (int j = 0; j < this.f.size(); ++j) {
+            Chunk chunk = (Chunk) this.f.get(j);
+
+            if (flag && !chunk.p) {
+                this.a(chunk);
+            }
+
+            if (chunk.a(flag)) {
+                try {
+					this.b(chunk);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+                chunk.o = false;
+                ++i;
+                if (i == 24 && !flag) {
+                    return false;
+                }
+            }
+        }
+
+        if (flag) {
+            if (this.d == null) {
+                return true;
+            }
+
+            this.d.b();
+        }
+
+        return true;
+    }
+
+    public boolean unloadChunks() {
+        for (int i = 0; i < 100; ++i) {
+            if (!this.a.isEmpty()) {
+                Integer integer = (Integer) this.a.iterator().next();
+                Chunk chunk = (Chunk) this.e.get(integer);
+
+                chunk.removeEntities();
+                try {
+					this.b(chunk);
+				} catch (IOException e1) {
+					// TODO Auto-generated catch block
+					e1.printStackTrace();
+				}
+                this.a(chunk);
+                this.a.remove(integer);
+                this.e.remove(integer);
+                this.f.remove(chunk);
+            }
+        }
+
+        if (this.d != null) {
+            this.d.a();
+        }
+
+        return this.c.unloadChunks();
+    }
+
+    public boolean canSave() {
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderSky.java b/src/main/java/net/minecraft/server/ChunkProviderSky.java
new file mode 100644
index 00000000..aec3bc08
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkProviderSky.java
@@ -0,0 +1,532 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class ChunkProviderSky implements IChunkProvider {
+
+    private Random j;
+    private NoiseGeneratorOctaves k;
+    private NoiseGeneratorOctaves l;
+    private NoiseGeneratorOctaves m;
+    private NoiseGeneratorOctaves n;
+    private NoiseGeneratorOctaves o;
+    public NoiseGeneratorOctaves a;
+    public NoiseGeneratorOctaves b;
+    public NoiseGeneratorOctaves c;
+    private World p;
+    private double[] q;
+    private double[] r = new double[256];
+    private double[] s = new double[256];
+    private double[] t = new double[256];
+    private MapGenBase u = new MapGenCaves();
+    private BiomeBase[] v;
+    double[] d;
+    double[] e;
+    double[] f;
+    double[] g;
+    double[] h;
+    int[][] i = new int[32][32];
+    private double[] w;
+
+    public ChunkProviderSky(World world, long i) {
+        this.p = world;
+        this.j = new Random(i);
+        this.k = new NoiseGeneratorOctaves(this.j, 16);
+        this.l = new NoiseGeneratorOctaves(this.j, 16);
+        this.m = new NoiseGeneratorOctaves(this.j, 8);
+        this.n = new NoiseGeneratorOctaves(this.j, 4);
+        this.o = new NoiseGeneratorOctaves(this.j, 4);
+        this.a = new NoiseGeneratorOctaves(this.j, 10);
+        this.b = new NoiseGeneratorOctaves(this.j, 16);
+        this.c = new NoiseGeneratorOctaves(this.j, 8);
+    }
+
+    public void a(int i, int j, byte[] abyte, BiomeBase[] abiomebase, double[] adouble) {
+        byte b0 = 2;
+        int k = b0 + 1;
+        byte b1 = 33;
+        int l = b0 + 1;
+
+        this.q = this.a(this.q, i * b0, 0, j * b0, k, b1, l);
+
+        for (int i1 = 0; i1 < b0; ++i1) {
+            for (int j1 = 0; j1 < b0; ++j1) {
+                for (int k1 = 0; k1 < 32; ++k1) {
+                    double d0 = 0.25D;
+                    double d1 = this.q[((i1 + 0) * l + j1 + 0) * b1 + k1 + 0];
+                    double d2 = this.q[((i1 + 0) * l + j1 + 1) * b1 + k1 + 0];
+                    double d3 = this.q[((i1 + 1) * l + j1 + 0) * b1 + k1 + 0];
+                    double d4 = this.q[((i1 + 1) * l + j1 + 1) * b1 + k1 + 0];
+                    double d5 = (this.q[((i1 + 0) * l + j1 + 0) * b1 + k1 + 1] - d1) * d0;
+                    double d6 = (this.q[((i1 + 0) * l + j1 + 1) * b1 + k1 + 1] - d2) * d0;
+                    double d7 = (this.q[((i1 + 1) * l + j1 + 0) * b1 + k1 + 1] - d3) * d0;
+                    double d8 = (this.q[((i1 + 1) * l + j1 + 1) * b1 + k1 + 1] - d4) * d0;
+
+                    for (int l1 = 0; l1 < 4; ++l1) {
+                        double d9 = 0.125D;
+                        double d10 = d1;
+                        double d11 = d2;
+                        double d12 = (d3 - d1) * d9;
+                        double d13 = (d4 - d2) * d9;
+
+                        for (int i2 = 0; i2 < 8; ++i2) {
+                            int j2 = i2 + i1 * 8 << 11 | 0 + j1 * 8 << 7 | k1 * 4 + l1;
+                            short short1 = 128;
+                            double d14 = 0.125D;
+                            double d15 = d10;
+                            double d16 = (d11 - d10) * d14;
+
+                            for (int k2 = 0; k2 < 8; ++k2) {
+                                int l2 = 0;
+
+                                if (d15 > 0.0D) {
+                                    l2 = Block.STONE.id;
+                                }
+
+                                abyte[j2] = (byte) l2;
+                                j2 += short1;
+                                d15 += d16;
+                            }
+
+                            d10 += d12;
+                            d11 += d13;
+                        }
+
+                        d1 += d5;
+                        d2 += d6;
+                        d3 += d7;
+                        d4 += d8;
+                    }
+                }
+            }
+        }
+    }
+
+    public void a(int i, int j, byte[] abyte, BiomeBase[] abiomebase) {
+        double d0 = 0.03125D;
+
+        this.r = this.n.a(this.r, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0, d0, 1.0D);
+        this.s = this.n.a(this.s, (double) (i * 16), 109.0134D, (double) (j * 16), 16, 1, 16, d0, 1.0D, d0);
+        this.t = this.o.a(this.t, (double) (i * 16), (double) (j * 16), 0.0D, 16, 16, 1, d0 * 2.0D, d0 * 2.0D, d0 * 2.0D);
+
+        for (int k = 0; k < 16; ++k) {
+            for (int l = 0; l < 16; ++l) {
+                BiomeBase biomebase = abiomebase[k + l * 16];
+                int i1 = (int) (this.t[k + l * 16] / 3.0D + 3.0D + this.j.nextDouble() * 0.25D);
+                int j1 = -1;
+                byte b0 = biomebase.p;
+                byte b1 = biomebase.q;
+
+                for (int k1 = 127; k1 >= 0; --k1) {
+                    int l1 = (l * 16 + k) * 128 + k1;
+                    byte b2 = abyte[l1];
+
+                    if (b2 == 0) {
+                        j1 = -1;
+                    } else if (b2 == Block.STONE.id) {
+                        if (j1 == -1) {
+                            if (i1 <= 0) {
+                                b0 = 0;
+                                b1 = (byte) Block.STONE.id;
+                            }
+
+                            j1 = i1;
+                            if (k1 >= 0) {
+                                abyte[l1] = b0;
+                            } else {
+                                abyte[l1] = b1;
+                            }
+                        } else if (j1 > 0) {
+                            --j1;
+                            abyte[l1] = b1;
+                            if (j1 == 0 && b1 == Block.SAND.id) {
+                                j1 = this.j.nextInt(4);
+                                b1 = (byte) Block.SANDSTONE.id;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public Chunk getChunkAt(int i, int j) {
+        return this.getOrCreateChunk(i, j);
+    }
+
+    public Chunk getOrCreateChunk(int i, int j) {
+        this.j.setSeed((long) i * 341873128712L + (long) j * 132897987541L);
+        byte[] abyte = new byte['\u8000'];
+        Chunk chunk = new Chunk(this.p, abyte, i, j);
+
+        this.v = this.p.getWorldChunkManager().a(this.v, i * 16, j * 16, 16, 16);
+        double[] adouble = this.p.getWorldChunkManager().temperature;
+
+        this.a(i, j, abyte, this.v, adouble);
+        this.a(i, j, abyte, this.v);
+        this.u.a(this, this.p, i, j, abyte);
+        chunk.initLighting();
+        return chunk;
+    }
+
+    private double[] a(double[] adouble, int i, int j, int k, int l, int i1, int j1) {
+        if (adouble == null) {
+            adouble = new double[l * i1 * j1];
+        }
+
+        double d0 = 684.412D;
+        double d1 = 684.412D;
+        double[] adouble1 = this.p.getWorldChunkManager().temperature;
+        double[] adouble2 = this.p.getWorldChunkManager().rain;
+
+        this.g = this.a.a(this.g, i, k, l, j1, 1.121D, 1.121D, 0.5D);
+        this.h = this.b.a(this.h, i, k, l, j1, 200.0D, 200.0D, 0.5D);
+        d0 *= 2.0D;
+        this.d = this.m.a(this.d, (double) i, (double) j, (double) k, l, i1, j1, d0 / 80.0D, d1 / 160.0D, d0 / 80.0D);
+        this.e = this.k.a(this.e, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        this.f = this.l.a(this.f, (double) i, (double) j, (double) k, l, i1, j1, d0, d1, d0);
+        int k1 = 0;
+        int l1 = 0;
+        int i2 = 16 / l;
+
+        for (int j2 = 0; j2 < l; ++j2) {
+            int k2 = j2 * i2 + i2 / 2;
+
+            for (int l2 = 0; l2 < j1; ++l2) {
+                int i3 = l2 * i2 + i2 / 2;
+                double d2 = adouble1[k2 * 16 + i3];
+                double d3 = adouble2[k2 * 16 + i3] * d2;
+                double d4 = 1.0D - d3;
+
+                d4 *= d4;
+                d4 *= d4;
+                d4 = 1.0D - d4;
+                double d5 = (this.g[l1] + 256.0D) / 512.0D;
+
+                d5 *= d4;
+                if (d5 > 1.0D) {
+                    d5 = 1.0D;
+                }
+
+                double d6 = this.h[l1] / 8000.0D;
+
+                if (d6 < 0.0D) {
+                    d6 = -d6 * 0.3D;
+                }
+
+                d6 = d6 * 3.0D - 2.0D;
+                if (d6 > 1.0D) {
+                    d6 = 1.0D;
+                }
+
+                d6 /= 8.0D;
+                d6 = 0.0D;
+                if (d5 < 0.0D) {
+                    d5 = 0.0D;
+                }
+
+                d5 += 0.5D;
+                d6 = d6 * (double) i1 / 16.0D;
+                ++l1;
+                double d7 = (double) i1 / 2.0D;
+
+                for (int j3 = 0; j3 < i1; ++j3) {
+                    double d8 = 0.0D;
+                    double d9 = ((double) j3 - d7) * 8.0D / d5;
+
+                    if (d9 < 0.0D) {
+                        d9 *= -1.0D;
+                    }
+
+                    double d10 = this.e[k1] / 512.0D;
+                    double d11 = this.f[k1] / 512.0D;
+                    double d12 = (this.d[k1] / 10.0D + 1.0D) / 2.0D;
+
+                    if (d12 < 0.0D) {
+                        d8 = d10;
+                    } else if (d12 > 1.0D) {
+                        d8 = d11;
+                    } else {
+                        d8 = d10 + (d11 - d10) * d12;
+                    }
+
+                    d8 -= 8.0D;
+                    byte b0 = 32;
+                    double d13;
+
+                    if (j3 > i1 - b0) {
+                        d13 = (double) ((float) (j3 - (i1 - b0)) / ((float) b0 - 1.0F));
+                        d8 = d8 * (1.0D - d13) + -30.0D * d13;
+                    }
+
+                    b0 = 8;
+                    if (j3 < b0) {
+                        d13 = (double) ((float) (b0 - j3) / ((float) b0 - 1.0F));
+                        d8 = d8 * (1.0D - d13) + -30.0D * d13;
+                    }
+
+                    adouble[k1] = d8;
+                    ++k1;
+                }
+            }
+        }
+
+        return adouble;
+    }
+
+    public boolean isChunkLoaded(int i, int j) {
+        return true;
+    }
+
+    public void getChunkAt(IChunkProvider ichunkprovider, int i, int j) {
+        BlockSand.instaFall = true;
+        int k = i * 16;
+        int l = j * 16;
+        BiomeBase biomebase = this.p.getWorldChunkManager().getBiome(k + 16, l + 16);
+
+        this.j.setSeed(this.p.getSeed());
+        long i1 = this.j.nextLong() / 2L * 2L + 1L;
+        long j1 = this.j.nextLong() / 2L * 2L + 1L;
+
+        this.j.setSeed((long) i * i1 + (long) j * j1 ^ this.p.getSeed());
+        double d0 = 0.25D;
+        int k1;
+        int l1;
+        int i2;
+
+        if (this.j.nextInt(4) == 0) {
+            k1 = k + this.j.nextInt(16) + 8;
+            l1 = this.j.nextInt(128);
+            i2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLakes(Block.STATIONARY_WATER.id)).a(this.p, this.j, k1, l1, i2);
+        }
+
+        if (this.j.nextInt(8) == 0) {
+            k1 = k + this.j.nextInt(16) + 8;
+            l1 = this.j.nextInt(this.j.nextInt(120) + 8);
+            i2 = l + this.j.nextInt(16) + 8;
+            if (l1 < 64 || this.j.nextInt(10) == 0) {
+                (new WorldGenLakes(Block.STATIONARY_LAVA.id)).a(this.p, this.j, k1, l1, i2);
+            }
+        }
+
+        int j2;
+
+        for (k1 = 0; k1 < 8; ++k1) {
+            l1 = k + this.j.nextInt(16) + 8;
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenDungeons()).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 10; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenClay(32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.DIRT.id, 32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 10; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.GRAVEL.id, 32)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(128);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.COAL_ORE.id, 16)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 20; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(64);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.IRON_ORE.id, 8)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 2; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(32);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.GOLD_ORE.id, 8)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 8; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.REDSTONE_ORE.id, 7)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 1; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.DIAMOND_ORE.id, 7)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        for (k1 = 0; k1 < 1; ++k1) {
+            l1 = k + this.j.nextInt(16);
+            i2 = this.j.nextInt(16) + this.j.nextInt(16);
+            j2 = l + this.j.nextInt(16);
+            (new WorldGenMinable(Block.LAPIS_ORE.id, 6)).a(this.p, this.j, l1, i2, j2);
+        }
+
+        d0 = 0.5D;
+        k1 = (int) ((this.c.a((double) k * d0, (double) l * d0) / 8.0D + this.j.nextDouble() * 4.0D + 4.0D) / 3.0D);
+        l1 = 0;
+        if (this.j.nextInt(10) == 0) {
+            ++l1;
+        }
+
+        if (biomebase == BiomeBase.FOREST) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.RAINFOREST) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.SEASONAL_FOREST) {
+            l1 += k1 + 2;
+        }
+
+        if (biomebase == BiomeBase.TAIGA) {
+            l1 += k1 + 5;
+        }
+
+        if (biomebase == BiomeBase.DESERT) {
+            l1 -= 20;
+        }
+
+        if (biomebase == BiomeBase.TUNDRA) {
+            l1 -= 20;
+        }
+
+        if (biomebase == BiomeBase.PLAINS) {
+            l1 -= 20;
+        }
+
+        int k2;
+
+        for (i2 = 0; i2 < l1; ++i2) {
+            j2 = k + this.j.nextInt(16) + 8;
+            k2 = l + this.j.nextInt(16) + 8;
+            WorldGenerator worldgenerator = biomebase.a(this.j);
+
+            worldgenerator.a(1.0D, 1.0D, 1.0D);
+            worldgenerator.a(this.p, this.j, j2, this.p.getHighestBlockYAt(j2, k2), k2);
+        }
+
+        int l2;
+
+        for (i2 = 0; i2 < 2; ++i2) {
+            j2 = k + this.j.nextInt(16) + 8;
+            k2 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.YELLOW_FLOWER.id)).a(this.p, this.j, j2, k2, l2);
+        }
+
+        if (this.j.nextInt(2) == 0) {
+            i2 = k + this.j.nextInt(16) + 8;
+            j2 = this.j.nextInt(128);
+            k2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.RED_ROSE.id)).a(this.p, this.j, i2, j2, k2);
+        }
+
+        if (this.j.nextInt(4) == 0) {
+            i2 = k + this.j.nextInt(16) + 8;
+            j2 = this.j.nextInt(128);
+            k2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.BROWN_MUSHROOM.id)).a(this.p, this.j, i2, j2, k2);
+        }
+
+        if (this.j.nextInt(8) == 0) {
+            i2 = k + this.j.nextInt(16) + 8;
+            j2 = this.j.nextInt(128);
+            k2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.RED_MUSHROOM.id)).a(this.p, this.j, i2, j2, k2);
+        }
+
+        for (i2 = 0; i2 < 10; ++i2) {
+            j2 = k + this.j.nextInt(16) + 8;
+            k2 = this.j.nextInt(128);
+            l2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenReed()).a(this.p, this.j, j2, k2, l2);
+        }
+
+        if (this.j.nextInt(32) == 0) {
+            i2 = k + this.j.nextInt(16) + 8;
+            j2 = this.j.nextInt(128);
+            k2 = l + this.j.nextInt(16) + 8;
+            (new WorldGenPumpkin()).a(this.p, this.j, i2, j2, k2);
+        }
+
+        i2 = 0;
+        if (biomebase == BiomeBase.DESERT) {
+            i2 += 10;
+        }
+
+        int i3;
+
+        for (j2 = 0; j2 < i2; ++j2) {
+            k2 = k + this.j.nextInt(16) + 8;
+            l2 = this.j.nextInt(128);
+            i3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenCactus()).a(this.p, this.j, k2, l2, i3);
+        }
+
+        for (j2 = 0; j2 < 50; ++j2) {
+            k2 = k + this.j.nextInt(16) + 8;
+            l2 = this.j.nextInt(this.j.nextInt(120) + 8);
+            i3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.WATER.id)).a(this.p, this.j, k2, l2, i3);
+        }
+
+        for (j2 = 0; j2 < 20; ++j2) {
+            k2 = k + this.j.nextInt(16) + 8;
+            l2 = this.j.nextInt(this.j.nextInt(this.j.nextInt(112) + 8) + 8);
+            i3 = l + this.j.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.LAVA.id)).a(this.p, this.j, k2, l2, i3);
+        }
+
+        this.w = this.p.getWorldChunkManager().a(this.w, k + 8, l + 8, 16, 16);
+
+        for (j2 = k + 8; j2 < k + 8 + 16; ++j2) {
+            for (k2 = l + 8; k2 < l + 8 + 16; ++k2) {
+                l2 = j2 - (k + 8);
+                i3 = k2 - (l + 8);
+                int j3 = this.p.e(j2, k2);
+                double d1 = this.w[l2 * 16 + i3] - (double) (j3 - 64) / 64.0D * 0.3D;
+
+                if (d1 < 0.5D && j3 > 0 && j3 < 128 && this.p.isEmpty(j2, j3, k2) && this.p.getMaterial(j2, j3 - 1, k2).isSolid() && this.p.getMaterial(j2, j3 - 1, k2) != Material.ICE) {
+                    this.p.setTypeId(j2, j3, k2, Block.SNOW.id);
+                }
+            }
+        }
+
+        BlockSand.instaFall = false;
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+        return true;
+    }
+
+    public boolean unloadChunks() {
+        return false;
+    }
+
+    public boolean canSave() {
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
new file mode 100644
index 00000000..c4401e9a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -0,0 +1,72 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.File;
+
+public class ChunkRegionLoader implements IChunkLoader {
+
+    private final File a;
+
+    public ChunkRegionLoader(File file1) {
+        this.a = file1;
+    }
+
+    public Chunk a(World world, int i, int j) {
+        DataInputStream datainputstream = RegionFileCache.c(this.a, i, j);
+
+        if (datainputstream != null) {
+            NBTTagCompound nbttagcompound = CompressedStreamTools.a((DataInput) datainputstream);
+
+            if (!nbttagcompound.hasKey("Level")) {
+                System.out.println("Chunk file at " + i + "," + j + " is missing level data, skipping");
+                return null;
+            } else if (!nbttagcompound.k("Level").hasKey("Blocks")) {
+                System.out.println("Chunk file at " + i + "," + j + " is missing block data, skipping");
+                return null;
+            } else {
+                Chunk chunk = ChunkLoader.a(world, nbttagcompound.k("Level"));
+
+                if (!chunk.a(i, j)) {
+                    System.out.println("Chunk file at " + i + "," + j + " is in the wrong location; relocating. (Expected " + i + ", " + j + ", got " + chunk.x + ", " + chunk.z + ")");
+                    nbttagcompound.a("xPos", i);
+                    nbttagcompound.a("zPos", j);
+                    chunk = ChunkLoader.a(world, nbttagcompound.k("Level"));
+                }
+
+                chunk.h();
+                return chunk;
+            }
+        } else {
+            return null;
+        }
+    }
+
+    public void a(World world, Chunk chunk) {
+        world.k();
+
+        try {
+            DataOutputStream dataoutputstream = RegionFileCache.d(this.a, chunk.x, chunk.z);
+            NBTTagCompound nbttagcompound = new NBTTagCompound();
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+            nbttagcompound.a("Level", (NBTBase) nbttagcompound1);
+            ChunkLoader.a(chunk, world, nbttagcompound1);
+            CompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
+            dataoutputstream.close();
+            WorldData worlddata = world.q();
+
+            worlddata.b(worlddata.g() + (long) RegionFileCache.b(this.a, chunk.x, chunk.z));
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    public void b(World world, Chunk chunk) {}
+
+    public void a() {}
+
+    public void b() {}
+}
diff --git a/src/main/java/net/minecraft/server/CompressedStreamTools.java b/src/main/java/net/minecraft/server/CompressedStreamTools.java
new file mode 100644
index 00000000..044e3566
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CompressedStreamTools.java
@@ -0,0 +1,76 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.zip.GZIPInputStream;
+import java.util.zip.GZIPOutputStream;
+
+public class CompressedStreamTools {
+
+    public CompressedStreamTools() {}
+
+    public static NBTTagCompound a(InputStream inputstream) {
+        DataInputStream datainputstream = null;
+		try {
+			datainputstream = new DataInputStream(new GZIPInputStream(inputstream));
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        NBTTagCompound nbttagcompound;
+
+        try {
+            nbttagcompound = a((DataInput) datainputstream);
+        } finally {
+            try {
+				datainputstream.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+
+        return nbttagcompound;
+    }
+
+    public static void a(NBTTagCompound nbttagcompound, OutputStream outputstream) {
+        DataOutputStream dataoutputstream = null;
+		try {
+			dataoutputstream = new DataOutputStream(new GZIPOutputStream(outputstream));
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        try {
+            a(nbttagcompound, (DataOutput) dataoutputstream);
+        } finally {
+            try {
+				dataoutputstream.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public static NBTTagCompound a(DataInput datainput) {
+        NBTBase nbtbase = NBTBase.b(datainput);
+
+        if (nbtbase instanceof NBTTagCompound) {
+            return (NBTTagCompound) nbtbase;
+        } else {
+            throw new IOException("Root tag must be a named compound tag");
+        }
+    }
+
+    public static void a(NBTTagCompound nbttagcompound, DataOutput dataoutput) {
+        NBTBase.a(nbttagcompound, dataoutput);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ConsoleLogFormatter.java b/src/main/java/net/minecraft/server/ConsoleLogFormatter.java
new file mode 100644
index 00000000..e2f8793d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ConsoleLogFormatter.java
@@ -0,0 +1,51 @@
+package net.minecraft.server;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.text.SimpleDateFormat;
+import java.util.logging.Formatter;
+import java.util.logging.Level;
+import java.util.logging.LogRecord;
+
+final class ConsoleLogFormatter extends Formatter {
+
+    private SimpleDateFormat a = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+
+    ConsoleLogFormatter() {}
+
+    public String format(LogRecord logrecord) {
+        StringBuilder stringbuilder = new StringBuilder();
+
+        stringbuilder.append(this.a.format(Long.valueOf(logrecord.getMillis())));
+        Level level = logrecord.getLevel();
+
+        if (level == Level.FINEST) {
+            stringbuilder.append(" [FINEST] ");
+        } else if (level == Level.FINER) {
+            stringbuilder.append(" [FINER] ");
+        } else if (level == Level.FINE) {
+            stringbuilder.append(" [FINE] ");
+        } else if (level == Level.INFO) {
+            stringbuilder.append(" [INFO] ");
+        } else if (level == Level.WARNING) {
+            stringbuilder.append(" [WARNING] ");
+        } else if (level == Level.SEVERE) {
+            stringbuilder.append(" [SEVERE] ");
+        } else if (level == Level.SEVERE) {
+            stringbuilder.append(" [" + level.getLocalizedName() + "] ");
+        }
+
+        stringbuilder.append(logrecord.getMessage());
+        stringbuilder.append('\n');
+        Throwable throwable = logrecord.getThrown();
+
+        if (throwable != null) {
+            StringWriter stringwriter = new StringWriter();
+
+            throwable.printStackTrace(new PrintWriter(stringwriter));
+            stringbuilder.append(stringwriter.toString());
+        }
+
+        return stringbuilder.toString();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
new file mode 100644
index 00000000..bb996147
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -0,0 +1,285 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public abstract class Container {
+
+    public List d = new ArrayList();
+    public List e = new ArrayList();
+    public int windowId = 0;
+    private short a = 0;
+    protected List listeners = new ArrayList();
+    private Set b = new HashSet();
+
+    public Container() {}
+
+    protected void a(Slot slot) {
+        slot.a = this.e.size();
+        this.e.add(slot);
+        this.d.add(null);
+    }
+
+    public void a(ICrafting icrafting) {
+        if (this.listeners.contains(icrafting)) {
+            throw new IllegalArgumentException("Listener already listening");
+        } else {
+            this.listeners.add(icrafting);
+            icrafting.a(this, this.b());
+            this.a();
+        }
+    }
+
+    public List b() {
+        ArrayList arraylist = new ArrayList();
+
+        for (int i = 0; i < this.e.size(); ++i) {
+            arraylist.add(((Slot) this.e.get(i)).getItem());
+        }
+
+        return arraylist;
+    }
+
+    public void a() {
+        for (int i = 0; i < this.e.size(); ++i) {
+            ItemStack itemstack = ((Slot) this.e.get(i)).getItem();
+            ItemStack itemstack1 = (ItemStack) this.d.get(i);
+
+            if (!ItemStack.equals(itemstack1, itemstack)) {
+                itemstack1 = itemstack == null ? null : itemstack.cloneItemStack();
+                this.d.set(i, itemstack1);
+
+                for (int j = 0; j < this.listeners.size(); ++j) {
+                    ((ICrafting) this.listeners.get(j)).a(this, i, itemstack1);
+                }
+            }
+        }
+    }
+
+    public Slot a(IInventory iinventory, int i) {
+        for (int j = 0; j < this.e.size(); ++j) {
+            Slot slot = (Slot) this.e.get(j);
+
+            if (slot.a(iinventory, i)) {
+                return slot;
+            }
+        }
+
+        return null;
+    }
+
+    public Slot b(int i) {
+        return (Slot) this.e.get(i);
+    }
+
+    public ItemStack a(int i) {
+        Slot slot = (Slot) this.e.get(i);
+
+        return slot != null ? slot.getItem() : null;
+    }
+
+    public ItemStack a(int i, int j, boolean flag, EntityHuman entityhuman) {
+        ItemStack itemstack = null;
+
+        if (j == 0 || j == 1) {
+            InventoryPlayer inventoryplayer = entityhuman.inventory;
+
+            if (i == -999) {
+                if (inventoryplayer.j() != null && i == -999) {
+                    if (j == 0) {
+                        entityhuman.b(inventoryplayer.j());
+                        inventoryplayer.b((ItemStack) null);
+                    }
+
+                    if (j == 1) {
+                        entityhuman.b(inventoryplayer.j().a(1));
+                        if (inventoryplayer.j().count == 0) {
+                            inventoryplayer.b((ItemStack) null);
+                        }
+                    }
+                }
+            } else {
+                int k;
+
+                if (flag) {
+                    ItemStack itemstack1 = this.a(i);
+
+                    if (itemstack1 != null) {
+                        int l = itemstack1.count;
+
+                        itemstack = itemstack1.cloneItemStack();
+                        Slot slot = (Slot) this.e.get(i);
+
+                        if (slot != null && slot.getItem() != null) {
+                            k = slot.getItem().count;
+                            if (k < l) {
+                                this.a(i, j, flag, entityhuman);
+                            }
+                        }
+                    }
+                } else {
+                    Slot slot1 = (Slot) this.e.get(i);
+
+                    if (slot1 != null) {
+                        slot1.c();
+                        ItemStack itemstack2 = slot1.getItem();
+                        ItemStack itemstack3 = inventoryplayer.j();
+
+                        if (itemstack2 != null) {
+                            itemstack = itemstack2.cloneItemStack();
+                        }
+
+                        if (itemstack2 == null) {
+                            if (itemstack3 != null && slot1.isAllowed(itemstack3)) {
+                                k = j == 0 ? itemstack3.count : 1;
+                                if (k > slot1.d()) {
+                                    k = slot1.d();
+                                }
+
+                                slot1.c(itemstack3.a(k));
+                                if (itemstack3.count == 0) {
+                                    inventoryplayer.b((ItemStack) null);
+                                }
+                            }
+                        } else if (itemstack3 == null) {
+                            k = j == 0 ? itemstack2.count : (itemstack2.count + 1) / 2;
+                            ItemStack itemstack4 = slot1.a(k);
+
+                            inventoryplayer.b(itemstack4);
+                            if (itemstack2.count == 0) {
+                                slot1.c((ItemStack) null);
+                            }
+
+                            slot1.a(inventoryplayer.j());
+                        } else if (slot1.isAllowed(itemstack3)) {
+                            if (itemstack2.id == itemstack3.id && (!itemstack2.usesData() || itemstack2.getData() == itemstack3.getData())) {
+                                k = j == 0 ? itemstack3.count : 1;
+                                if (k > slot1.d() - itemstack2.count) {
+                                    k = slot1.d() - itemstack2.count;
+                                }
+
+                                if (k > itemstack3.getMaxStackSize() - itemstack2.count) {
+                                    k = itemstack3.getMaxStackSize() - itemstack2.count;
+                                }
+
+                                itemstack3.a(k);
+                                if (itemstack3.count == 0) {
+                                    inventoryplayer.b((ItemStack) null);
+                                }
+
+                                itemstack2.count += k;
+                            } else if (itemstack3.count <= slot1.d()) {
+                                slot1.c(itemstack3);
+                                inventoryplayer.b(itemstack2);
+                            }
+                        } else if (itemstack2.id == itemstack3.id && itemstack3.getMaxStackSize() > 1 && (!itemstack2.usesData() || itemstack2.getData() == itemstack3.getData())) {
+                            k = itemstack2.count;
+                            if (k > 0 && k + itemstack3.count <= itemstack3.getMaxStackSize()) {
+                                itemstack3.count += k;
+                                itemstack2.a(k);
+                                if (itemstack2.count == 0) {
+                                    slot1.c((ItemStack) null);
+                                }
+
+                                slot1.a(inventoryplayer.j());
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return itemstack;
+    }
+
+    public void a(EntityHuman entityhuman) {
+        InventoryPlayer inventoryplayer = entityhuman.inventory;
+
+        if (inventoryplayer.j() != null) {
+            entityhuman.b(inventoryplayer.j());
+            inventoryplayer.b((ItemStack) null);
+        }
+    }
+
+    public void a(IInventory iinventory) {
+        this.a();
+    }
+
+    public boolean c(EntityHuman entityhuman) {
+        return !this.b.contains(entityhuman);
+    }
+
+    public void a(EntityHuman entityhuman, boolean flag) {
+        if (flag) {
+            this.b.remove(entityhuman);
+        } else {
+            this.b.add(entityhuman);
+        }
+    }
+
+    public abstract boolean b(EntityHuman entityhuman);
+
+    protected void a(ItemStack itemstack, int i, int j, boolean flag) {
+        int k = i;
+
+        if (flag) {
+            k = j - 1;
+        }
+
+        Slot slot;
+        ItemStack itemstack1;
+
+        if (itemstack.isStackable()) {
+            while (itemstack.count > 0 && (!flag && k < j || flag && k >= i)) {
+                slot = (Slot) this.e.get(k);
+                itemstack1 = slot.getItem();
+                if (itemstack1 != null && itemstack1.id == itemstack.id && (!itemstack.usesData() || itemstack.getData() == itemstack1.getData())) {
+                    int l = itemstack1.count + itemstack.count;
+
+                    if (l <= itemstack.getMaxStackSize()) {
+                        itemstack.count = 0;
+                        itemstack1.count = l;
+                        slot.c();
+                    } else if (itemstack1.count < itemstack.getMaxStackSize()) {
+                        itemstack.count -= itemstack.getMaxStackSize() - itemstack1.count;
+                        itemstack1.count = itemstack.getMaxStackSize();
+                        slot.c();
+                    }
+                }
+
+                if (flag) {
+                    --k;
+                } else {
+                    ++k;
+                }
+            }
+        }
+
+        if (itemstack.count > 0) {
+            if (flag) {
+                k = j - 1;
+            } else {
+                k = i;
+            }
+
+            while (!flag && k < j || flag && k >= i) {
+                slot = (Slot) this.e.get(k);
+                itemstack1 = slot.getItem();
+                if (itemstack1 == null) {
+                    slot.c(itemstack.cloneItemStack());
+                    slot.c();
+                    itemstack.count = 0;
+                    break;
+                }
+
+                if (flag) {
+                    --k;
+                } else {
+                    ++k;
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ContainerChest.java b/src/main/java/net/minecraft/server/ContainerChest.java
new file mode 100644
index 00000000..383cd280
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ContainerChest.java
@@ -0,0 +1,60 @@
+package net.minecraft.server;
+
+public class ContainerChest extends Container {
+
+    private IInventory a;
+    private int b;
+
+    public ContainerChest(IInventory iinventory, IInventory iinventory1) {
+        this.a = iinventory1;
+        this.b = iinventory1.getSize() / 9;
+        int i = (this.b - 4) * 18;
+
+        int j;
+        int k;
+
+        for (j = 0; j < this.b; ++j) {
+            for (k = 0; k < 9; ++k) {
+                this.a(new Slot(iinventory1, k + j * 9, 8 + k * 18, 18 + j * 18));
+            }
+        }
+
+        for (j = 0; j < 3; ++j) {
+            for (k = 0; k < 9; ++k) {
+                this.a(new Slot(iinventory, k + j * 9 + 9, 8 + k * 18, 103 + j * 18 + i));
+            }
+        }
+
+        for (j = 0; j < 9; ++j) {
+            this.a(new Slot(iinventory, j, 8 + j * 18, 161 + i));
+        }
+    }
+
+    public boolean b(EntityHuman entityhuman) {
+        return this.a.a_(entityhuman);
+    }
+
+    public ItemStack a(int i) {
+        ItemStack itemstack = null;
+        Slot slot = (Slot) this.e.get(i);
+
+        if (slot != null && slot.b()) {
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.cloneItemStack();
+            if (i < this.b * 9) {
+                this.a(itemstack1, this.b * 9, this.e.size(), true);
+            } else {
+                this.a(itemstack1, 0, this.b * 9, false);
+            }
+
+            if (itemstack1.count == 0) {
+                slot.c((ItemStack) null);
+            } else {
+                slot.c();
+            }
+        }
+
+        return itemstack;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ContainerDispenser.java b/src/main/java/net/minecraft/server/ContainerDispenser.java
new file mode 100644
index 00000000..ba202194
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ContainerDispenser.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+public class ContainerDispenser extends Container {
+
+    private TileEntityDispenser a;
+
+    public ContainerDispenser(IInventory iinventory, TileEntityDispenser tileentitydispenser) {
+        this.a = tileentitydispenser;
+
+        int i;
+        int j;
+
+        for (i = 0; i < 3; ++i) {
+            for (j = 0; j < 3; ++j) {
+                this.a(new Slot(tileentitydispenser, j + i * 3, 62 + j * 18, 17 + i * 18));
+            }
+        }
+
+        for (i = 0; i < 3; ++i) {
+            for (j = 0; j < 9; ++j) {
+                this.a(new Slot(iinventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
+            }
+        }
+
+        for (i = 0; i < 9; ++i) {
+            this.a(new Slot(iinventory, i, 8 + i * 18, 142));
+        }
+    }
+
+    public boolean b(EntityHuman entityhuman) {
+        return this.a.a_(entityhuman);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ContainerFurnace.java b/src/main/java/net/minecraft/server/ContainerFurnace.java
new file mode 100644
index 00000000..ca480db4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ContainerFurnace.java
@@ -0,0 +1,97 @@
+package net.minecraft.server;
+
+public class ContainerFurnace extends Container {
+
+    private TileEntityFurnace a;
+    private int b = 0;
+    private int c = 0;
+    private int h = 0;
+
+    public ContainerFurnace(InventoryPlayer inventoryplayer, TileEntityFurnace tileentityfurnace) {
+        this.a = tileentityfurnace;
+        this.a(new Slot(tileentityfurnace, 0, 56, 17));
+        this.a(new Slot(tileentityfurnace, 1, 56, 53));
+        this.a(new SlotResult2(inventoryplayer.d, tileentityfurnace, 2, 116, 35));
+
+        int i;
+
+        for (i = 0; i < 3; ++i) {
+            for (int j = 0; j < 9; ++j) {
+                this.a(new Slot(inventoryplayer, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
+            }
+        }
+
+        for (i = 0; i < 9; ++i) {
+            this.a(new Slot(inventoryplayer, i, 8 + i * 18, 142));
+        }
+    }
+
+    public void a(ICrafting icrafting) {
+        super.a(icrafting);
+        icrafting.a(this, 0, this.a.cookTime);
+        icrafting.a(this, 1, this.a.burnTime);
+        icrafting.a(this, 2, this.a.ticksForCurrentFuel);
+    }
+
+    public void a() {
+        super.a();
+
+        for (int i = 0; i < this.listeners.size(); ++i) {
+            ICrafting icrafting = (ICrafting) this.listeners.get(i);
+
+            if (this.b != this.a.cookTime) {
+                icrafting.a(this, 0, this.a.cookTime);
+            }
+
+            if (this.c != this.a.burnTime) {
+                icrafting.a(this, 1, this.a.burnTime);
+            }
+
+            if (this.h != this.a.ticksForCurrentFuel) {
+                icrafting.a(this, 2, this.a.ticksForCurrentFuel);
+            }
+        }
+
+        this.b = this.a.cookTime;
+        this.c = this.a.burnTime;
+        this.h = this.a.ticksForCurrentFuel;
+    }
+
+    public boolean b(EntityHuman entityhuman) {
+        return this.a.a_(entityhuman);
+    }
+
+    public ItemStack a(int i) {
+        ItemStack itemstack = null;
+        Slot slot = (Slot) this.e.get(i);
+
+        if (slot != null && slot.b()) {
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.cloneItemStack();
+            if (i == 2) {
+                this.a(itemstack1, 3, 39, true);
+            } else if (i >= 3 && i < 30) {
+                this.a(itemstack1, 30, 39, false);
+            } else if (i >= 30 && i < 39) {
+                this.a(itemstack1, 3, 30, false);
+            } else {
+                this.a(itemstack1, 3, 39, false);
+            }
+
+            if (itemstack1.count == 0) {
+                slot.c((ItemStack) null);
+            } else {
+                slot.c();
+            }
+
+            if (itemstack1.count == itemstack.count) {
+                return null;
+            }
+
+            slot.a(itemstack1);
+        }
+
+        return itemstack;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ConvertProgressUpdater.java b/src/main/java/net/minecraft/server/ConvertProgressUpdater.java
new file mode 100644
index 00000000..6ee2043d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ConvertProgressUpdater.java
@@ -0,0 +1,24 @@
+package net.minecraft.server;
+
+public class ConvertProgressUpdater implements IProgressUpdate {
+
+    private long b;
+
+    final MinecraftServer a;
+
+    public ConvertProgressUpdater(MinecraftServer minecraftserver) {
+        this.a = minecraftserver;
+        this.b = System.currentTimeMillis();
+    }
+
+    public void a(String s) {}
+
+    public void a(int i) {
+        if (System.currentTimeMillis() - this.b >= 1000L) {
+            this.b = System.currentTimeMillis();
+            MinecraftServer.log.info("Converting... " + i + "%");
+        }
+    }
+
+    public void b(String s) {}
+}
diff --git a/src/main/java/net/minecraft/server/Convertable.java b/src/main/java/net/minecraft/server/Convertable.java
new file mode 100644
index 00000000..9d968276
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Convertable.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public interface Convertable {
+
+    boolean isConvertable(String s);
+
+    boolean convert(String s, IProgressUpdate iprogressupdate);
+}
diff --git a/src/main/java/net/minecraft/server/Counter.java b/src/main/java/net/minecraft/server/Counter.java
new file mode 100644
index 00000000..cbfe88b9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Counter.java
@@ -0,0 +1,3 @@
+package net.minecraft.server;
+
+public interface Counter {}
diff --git a/src/main/java/net/minecraft/server/CounterStatistic.java b/src/main/java/net/minecraft/server/CounterStatistic.java
new file mode 100644
index 00000000..d09c17bb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CounterStatistic.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+public class CounterStatistic extends Statistic {
+
+    public CounterStatistic(int i, String s, Counter counter) {
+        super(i, s, counter);
+    }
+
+    public CounterStatistic(int i, String s) {
+        super(i, s);
+    }
+
+    public Statistic d() {
+        super.d();
+        StatisticList.c.add(this);
+        return this;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 78ca3c4f..093d44c2 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -8,7 +8,7 @@ import java.util.List;
 public class CraftingManager {
 
     private static final CraftingManager a = new CraftingManager();
-    private List b = new ArrayList();
+    private List<CraftingRecipe> b = new ArrayList<>();
 
     public static final CraftingManager getInstance() {
         return a;
diff --git a/src/main/java/net/minecraft/server/CraftingRecipe.java b/src/main/java/net/minecraft/server/CraftingRecipe.java
new file mode 100644
index 00000000..dee3749c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CraftingRecipe.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public interface CraftingRecipe {
+
+    boolean a(InventoryCrafting inventorycrafting);
+
+    ItemStack b(InventoryCrafting inventorycrafting);
+
+    int a();
+
+    ItemStack b();
+}
diff --git a/src/main/java/net/minecraft/server/CraftingStatistic.java b/src/main/java/net/minecraft/server/CraftingStatistic.java
new file mode 100644
index 00000000..82d776a1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CraftingStatistic.java
@@ -0,0 +1,11 @@
+package net.minecraft.server;
+
+public class CraftingStatistic extends Statistic {
+
+    private final int a;
+
+    public CraftingStatistic(int i, String s, int j) {
+        super(i, s);
+        this.a = j;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
new file mode 100644
index 00000000..f2fdaaf1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -0,0 +1,293 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class DataWatcher {
+
+    private static final HashMap a = new HashMap();
+    private final Map b = new HashMap();
+    private boolean c;
+
+    public DataWatcher() {}
+
+    public void a(int i, Object object) {
+        Integer integer = (Integer) a.get(object.getClass());
+
+        if (integer == null) {
+            throw new IllegalArgumentException("Unknown data type: " + object.getClass());
+        } else if (i > 31) {
+            throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 31 + ")");
+        } else if (this.b.containsKey(Integer.valueOf(i))) {
+            throw new IllegalArgumentException("Duplicate id value for " + i + "!");
+        } else {
+            WatchableObject watchableobject = new WatchableObject(integer.intValue(), i, object);
+
+            this.b.put(Integer.valueOf(i), watchableobject);
+        }
+    }
+
+    public byte a(int i) {
+        return ((Byte) ((WatchableObject) this.b.get(Integer.valueOf(i))).b()).byteValue();
+    }
+
+    public int b(int i) {
+        return ((Integer) ((WatchableObject) this.b.get(Integer.valueOf(i))).b()).intValue();
+    }
+
+    public String c(int i) {
+        return (String) ((WatchableObject) this.b.get(Integer.valueOf(i))).b();
+    }
+
+    public void watch(int i, Object object) {
+        WatchableObject watchableobject = (WatchableObject) this.b.get(Integer.valueOf(i));
+
+        if (!object.equals(watchableobject.b())) {
+            watchableobject.a(object);
+            watchableobject.a(true);
+            this.c = true;
+        }
+    }
+
+    public boolean a() {
+        return this.c;
+    }
+
+    public static void a(List list, DataOutputStream dataoutputstream) {
+        if (list != null) {
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+                a(dataoutputstream, watchableobject);
+            }
+        }
+
+        try {
+			dataoutputstream.writeByte(127);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public ArrayList b() {
+        ArrayList arraylist = null;
+
+        if (this.c) {
+            Iterator iterator = this.b.values().iterator();
+
+            while (iterator.hasNext()) {
+                WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+                if (watchableobject.d()) {
+                    watchableobject.a(false);
+                    if (arraylist == null) {
+                        arraylist = new ArrayList();
+                    }
+
+                    arraylist.add(watchableobject);
+                }
+            }
+        }
+
+        this.c = false;
+        return arraylist;
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        Iterator iterator = this.b.values().iterator();
+
+        while (iterator.hasNext()) {
+            WatchableObject watchableobject = (WatchableObject) iterator.next();
+
+            a(dataoutputstream, watchableobject);
+        }
+
+        try {
+			dataoutputstream.writeByte(127);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    private static void a(DataOutputStream dataoutputstream, WatchableObject watchableobject) {
+        int i = (watchableobject.c() << 5 | watchableobject.a() & 31) & 255;
+
+        try {
+			dataoutputstream.writeByte(i);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        switch (watchableobject.c()) {
+        case 0:
+            try {
+				dataoutputstream.writeByte(((Byte) watchableobject.b()).byteValue());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 1:
+            try {
+				dataoutputstream.writeShort(((Short) watchableobject.b()).shortValue());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 2:
+            try {
+				dataoutputstream.writeInt(((Integer) watchableobject.b()).intValue());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 3:
+            try {
+				dataoutputstream.writeFloat(((Float) watchableobject.b()).floatValue());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 4:
+            try {
+				Packet.a((String) watchableobject.b(), dataoutputstream);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 5:
+            ItemStack itemstack = (ItemStack) watchableobject.b();
+
+            try {
+				dataoutputstream.writeShort(itemstack.getItem().id);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(itemstack.count);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(itemstack.getData());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            break;
+
+        case 6:
+            ChunkCoordinates chunkcoordinates = (ChunkCoordinates) watchableobject.b();
+
+            try {
+				dataoutputstream.writeInt(chunkcoordinates.x);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeInt(chunkcoordinates.y);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeInt(chunkcoordinates.z);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public static List a(DataInputStream datainputstream) {
+        ArrayList arraylist = null;
+
+        try {
+			for (byte b0 = datainputstream.readByte(); b0 != 127; b0 = datainputstream.readByte()) {
+			    if (arraylist == null) {
+			        arraylist = new ArrayList();
+			    }
+
+			    int i = (b0 & 224) >> 5;
+			    int j = b0 & 31;
+			    WatchableObject watchableobject = null;
+
+			    switch (i) {
+			    case 0:
+			        watchableobject = new WatchableObject(i, j, Byte.valueOf(datainputstream.readByte()));
+			        break;
+
+			    case 1:
+			        watchableobject = new WatchableObject(i, j, Short.valueOf(datainputstream.readShort()));
+			        break;
+
+			    case 2:
+			        watchableobject = new WatchableObject(i, j, Integer.valueOf(datainputstream.readInt()));
+			        break;
+
+			    case 3:
+			        watchableobject = new WatchableObject(i, j, Float.valueOf(datainputstream.readFloat()));
+			        break;
+
+			    case 4:
+			        watchableobject = new WatchableObject(i, j, Packet.a(datainputstream, 64));
+			        break;
+
+			    case 5:
+			        short short1 = datainputstream.readShort();
+			        byte b1 = datainputstream.readByte();
+			        short short2 = datainputstream.readShort();
+
+			        watchableobject = new WatchableObject(i, j, new ItemStack(short1, b1, short2));
+			        break;
+
+			    case 6:
+			        int k = datainputstream.readInt();
+			        int l = datainputstream.readInt();
+			        int i1 = datainputstream.readInt();
+
+			        watchableobject = new WatchableObject(i, j, new ChunkCoordinates(k, l, i1));
+			    }
+
+			    arraylist.add(watchableobject);
+			}
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        return arraylist;
+    }
+
+    static {
+        a.put(Byte.class, Integer.valueOf(0));
+        a.put(Short.class, Integer.valueOf(1));
+        a.put(Integer.class, Integer.valueOf(2));
+        a.put(Float.class, Integer.valueOf(3));
+        a.put(String.class, Integer.valueOf(4));
+        a.put(ItemStack.class, Integer.valueOf(5));
+        a.put(ChunkCoordinates.class, Integer.valueOf(6));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DistancesCounter.java b/src/main/java/net/minecraft/server/DistancesCounter.java
new file mode 100644
index 00000000..d92130e1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DistancesCounter.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+final class DistancesCounter implements Counter {
+
+    DistancesCounter() {}
+}
diff --git a/src/main/java/net/minecraft/server/EmptyChunk.java b/src/main/java/net/minecraft/server/EmptyChunk.java
new file mode 100644
index 00000000..997b6fd2
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EmptyChunk.java
@@ -0,0 +1,113 @@
+package net.minecraft.server;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+
+public class EmptyChunk extends Chunk {
+
+    public EmptyChunk(World world, int i, int j) {
+        super(world, i, j);
+        this.p = true;
+    }
+
+    public EmptyChunk(World world, byte[] abyte, int i, int j) {
+        super(world, abyte, i, j);
+        this.p = true;
+    }
+
+    public boolean a(int i, int j) {
+        return i == this.x && j == this.z;
+    }
+
+    public int b(int i, int j) {
+        return 0;
+    }
+
+    public void a() {}
+
+    public void initLighting() {}
+
+    public void loadNOP() {}
+
+    public int getTypeId(int i, int j, int k) {
+        return 0;
+    }
+
+    public boolean a(int i, int j, int k, int l, int i1) {
+        return true;
+    }
+
+    public boolean a(int i, int j, int k, int l) {
+        return true;
+    }
+
+    public int getData(int i, int j, int k) {
+        return 0;
+    }
+
+    public void b(int i, int j, int k, int l) {}
+
+    public int a(EnumSkyBlock enumskyblock, int i, int j, int k) {
+        return 0;
+    }
+
+    public void a(EnumSkyBlock enumskyblock, int i, int j, int k, int l) {}
+
+    public int c(int i, int j, int k, int l) {
+        return 0;
+    }
+
+    public void a(Entity entity) {}
+
+    public void b(Entity entity) {}
+
+    public void a(Entity entity, int i) {}
+
+    public boolean c(int i, int j, int k) {
+        return false;
+    }
+
+    public TileEntity d(int i, int j, int k) {
+        return null;
+    }
+
+    public void a(TileEntity tileentity) {}
+
+    public void a(int i, int j, int k, TileEntity tileentity) {}
+
+    public void e(int i, int j, int k) {}
+
+    public void addEntities() {}
+
+    public void removeEntities() {}
+
+    public void f() {}
+
+    public void a(Entity entity, AxisAlignedBB axisalignedbb, List list) {}
+
+    public void a(Class oclass, AxisAlignedBB axisalignedbb, List list) {}
+
+    public boolean a(boolean flag) {
+        return false;
+    }
+
+    public int getData(byte[] abyte, int i, int j, int k, int l, int i1, int j1, int k1) {
+        int l1 = l - i;
+        int i2 = i1 - j;
+        int j2 = j1 - k;
+        int k2 = l1 * i2 * j2;
+        int l2 = k2 + k2 / 2 * 3;
+
+        Arrays.fill(abyte, k1, k1 + l2, (byte) 0);
+        return l2;
+    }
+
+    public Random a(long i) {
+        return new Random(this.world.getSeed() + (long) (this.x * this.x * 4987142) + (long) (this.x * 5947611) + (long) (this.z * this.z) * 4392871L + (long) (this.z * 389711) ^ i);
+    }
+
+    public boolean isEmpty() {
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EmptyClass1.java b/src/main/java/net/minecraft/server/EmptyClass1.java
new file mode 100644
index 00000000..19445178
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EmptyClass1.java
@@ -0,0 +1,3 @@
+package net.minecraft.server;
+
+class EmptyClass1 {}
diff --git a/src/main/java/net/minecraft/server/EmptyClass2.java b/src/main/java/net/minecraft/server/EmptyClass2.java
new file mode 100644
index 00000000..19e2c966
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EmptyClass2.java
@@ -0,0 +1,3 @@
+package net.minecraft.server;
+
+class EmptyClass2 {}
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
new file mode 100644
index 00000000..1d42583c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -0,0 +1,32 @@
+package net.minecraft.server;
+
+public abstract class EntityAnimal extends EntityCreature implements IAnimal {
+
+    public EntityAnimal(World world) {
+        super(world);
+    }
+
+    protected float a(int i, int j, int k) {
+        return this.world.getTypeId(i, j - 1, k) == Block.GRASS.id ? 10.0F : this.world.n(i, j, k) - 0.5F;
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+    }
+
+    public boolean d() {
+        int i = MathHelper.floor(this.locX);
+        int j = MathHelper.floor(this.boundingBox.b);
+        int k = MathHelper.floor(this.locZ);
+
+        return this.world.getTypeId(i, j - 1, k) == Block.GRASS.id && this.world.k(i, j, k) > 8 && super.d();
+    }
+
+    public int e() {
+        return 120;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
new file mode 100644
index 00000000..62994631
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -0,0 +1,76 @@
+package net.minecraft.server;
+
+public class EntityChicken extends EntityAnimal {
+
+    public boolean a = false;
+    public float b = 0.0F;
+    public float c = 0.0F;
+    public float f;
+    public float g;
+    public float h = 1.0F;
+    public int i;
+
+    public EntityChicken(World world) {
+        super(world);
+        this.texture = "/mob/chicken.png";
+        this.b(0.3F, 0.4F);
+        this.health = 4;
+        this.i = this.random.nextInt(6000) + 6000;
+    }
+
+    public void v() {
+        super.v();
+        this.g = this.b;
+        this.f = this.c;
+        this.c = (float) ((double) this.c + (double) (this.onGround ? -1 : 4) * 0.3D);
+        if (this.c < 0.0F) {
+            this.c = 0.0F;
+        }
+
+        if (this.c > 1.0F) {
+            this.c = 1.0F;
+        }
+
+        if (!this.onGround && this.h < 1.0F) {
+            this.h = 1.0F;
+        }
+
+        this.h = (float) ((double) this.h * 0.9D);
+        if (!this.onGround && this.motY < 0.0D) {
+            this.motY *= 0.6D;
+        }
+
+        this.b += this.h * 2.0F;
+        if (!this.world.isStatic && --this.i <= 0) {
+            this.world.makeSound(this, "mob.chickenplop", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            this.b(Item.EGG.id, 1);
+            this.i = this.random.nextInt(6000) + 6000;
+        }
+    }
+
+    protected void a(float f) {}
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+    }
+
+    protected String g() {
+        return "mob.chicken";
+    }
+
+    protected String h() {
+        return "mob.chickenhurt";
+    }
+
+    protected String i() {
+        return "mob.chickenhurt";
+    }
+
+    protected int j() {
+        return Item.FEATHER.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityFallingSand.java b/src/main/java/net/minecraft/server/EntityFallingSand.java
new file mode 100644
index 00000000..daea1c1f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityFallingSand.java
@@ -0,0 +1,80 @@
+package net.minecraft.server;
+
+public class EntityFallingSand extends Entity {
+
+    public int a;
+    public int b = 0;
+
+    public EntityFallingSand(World world) {
+        super(world);
+    }
+
+    public EntityFallingSand(World world, double d0, double d1, double d2, int i) {
+        super(world);
+        this.a = i;
+        this.aI = true;
+        this.b(0.98F, 0.98F);
+        this.height = this.width / 2.0F;
+        this.setPosition(d0, d1, d2);
+        this.motX = 0.0D;
+        this.motY = 0.0D;
+        this.motZ = 0.0D;
+        this.lastX = d0;
+        this.lastY = d1;
+        this.lastZ = d2;
+    }
+
+    protected boolean n() {
+        return false;
+    }
+
+    protected void b() {}
+
+    public boolean l_() {
+        return !this.dead;
+    }
+
+    public void m_() {
+        if (this.a == 0) {
+            this.die();
+        } else {
+            this.lastX = this.locX;
+            this.lastY = this.locY;
+            this.lastZ = this.locZ;
+            ++this.b;
+            this.motY -= 0.03999999910593033D;
+            this.move(this.motX, this.motY, this.motZ);
+            this.motX *= 0.9800000190734863D;
+            this.motY *= 0.9800000190734863D;
+            this.motZ *= 0.9800000190734863D;
+            int i = MathHelper.floor(this.locX);
+            int j = MathHelper.floor(this.locY);
+            int k = MathHelper.floor(this.locZ);
+
+            if (this.world.getTypeId(i, j, k) == this.a) {
+                this.world.setTypeId(i, j, k, 0);
+            }
+
+            if (this.onGround) {
+                this.motX *= 0.699999988079071D;
+                this.motZ *= 0.699999988079071D;
+                this.motY *= -0.5D;
+                this.die();
+                if ((!this.world.a(this.a, i, j, k, true, 1) || BlockSand.c_(this.world, i, j - 1, k) || !this.world.setTypeId(i, j, k, this.a)) && !this.world.isStatic) {
+                    this.b(this.a, 1);
+                }
+            } else if (this.b > 100 && !this.world.isStatic) {
+                this.b(this.a, 1);
+                this.die();
+            }
+        }
+    }
+
+    protected void b(NBTTagCompound nbttagcompound) {
+        nbttagcompound.a("Tile", (byte) this.a);
+    }
+
+    protected void a(NBTTagCompound nbttagcompound) {
+        this.a = nbttagcompound.c("Tile") & 255;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityFlying.java b/src/main/java/net/minecraft/server/EntityFlying.java
new file mode 100644
index 00000000..ecc90e5b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityFlying.java
@@ -0,0 +1,71 @@
+package net.minecraft.server;
+
+public class EntityFlying extends EntityLiving {
+
+    public EntityFlying(World world) {
+        super(world);
+    }
+
+    protected void a(float f) {}
+
+    public void a(float f, float f1) {
+        if (this.ad()) {
+            this.a(f, f1, 0.02F);
+            this.move(this.motX, this.motY, this.motZ);
+            this.motX *= 0.800000011920929D;
+            this.motY *= 0.800000011920929D;
+            this.motZ *= 0.800000011920929D;
+        } else if (this.ae()) {
+            this.a(f, f1, 0.02F);
+            this.move(this.motX, this.motY, this.motZ);
+            this.motX *= 0.5D;
+            this.motY *= 0.5D;
+            this.motZ *= 0.5D;
+        } else {
+            float f2 = 0.91F;
+
+            if (this.onGround) {
+                f2 = 0.54600006F;
+                int i = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
+
+                if (i > 0) {
+                    f2 = Block.byId[i].frictionFactor * 0.91F;
+                }
+            }
+
+            float f3 = 0.16277136F / (f2 * f2 * f2);
+
+            this.a(f, f1, this.onGround ? 0.1F * f3 : 0.02F);
+            f2 = 0.91F;
+            if (this.onGround) {
+                f2 = 0.54600006F;
+                int j = this.world.getTypeId(MathHelper.floor(this.locX), MathHelper.floor(this.boundingBox.b) - 1, MathHelper.floor(this.locZ));
+
+                if (j > 0) {
+                    f2 = Block.byId[j].frictionFactor * 0.91F;
+                }
+            }
+
+            this.move(this.motX, this.motY, this.motZ);
+            this.motX *= (double) f2;
+            this.motY *= (double) f2;
+            this.motZ *= (double) f2;
+        }
+
+        this.an = this.ao;
+        double d0 = this.locX - this.lastX;
+        double d1 = this.locZ - this.lastZ;
+        float f4 = MathHelper.a(d0 * d0 + d1 * d1) * 4.0F;
+
+        if (f4 > 1.0F) {
+            f4 = 1.0F;
+        }
+
+        this.ao += (f4 - this.ao) * 0.4F;
+        this.ap += this.ao;
+    }
+
+    public boolean p() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityGiantZombie.java b/src/main/java/net/minecraft/server/EntityGiantZombie.java
new file mode 100644
index 00000000..2fc99172
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGiantZombie.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+public class EntityGiantZombie extends EntityMonster {
+
+    public EntityGiantZombie(World world) {
+        super(world);
+        this.texture = "/mob/zombie.png";
+        this.aE = 0.5F;
+        this.damage = 50;
+        this.health *= 10;
+        this.height *= 6.0F;
+        this.b(this.length * 6.0F, this.width * 6.0F);
+    }
+
+    protected float a(int i, int j, int k) {
+        return this.world.n(i, j, k) - 0.5F;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityList.java b/src/main/java/net/minecraft/server/EntityList.java
new file mode 100644
index 00000000..8335e598
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityList.java
@@ -0,0 +1,160 @@
+package net.minecraft.server;
+
+public class EntityList {
+
+    private transient EntityListEntry[] a = new EntityListEntry[16];
+    private transient int b;
+    private int c = 12;
+    private final float d = 0.75F;
+    private transient volatile int e;
+
+    public EntityList() {}
+
+    private static int g(int i) {
+        i ^= i >>> 20 ^ i >>> 12;
+        return i ^ i >>> 7 ^ i >>> 4;
+    }
+
+    private static int a(int i, int j) {
+        return i & j - 1;
+    }
+
+    public Object a(int i) {
+        int j = g(i);
+
+        for (EntityListEntry entitylistentry = this.a[a(j, this.a.length)]; entitylistentry != null; entitylistentry = entitylistentry.c) {
+            if (entitylistentry.a == i) {
+                return entitylistentry.b;
+            }
+        }
+
+        return null;
+    }
+
+    public boolean b(int i) {
+        return this.c(i) != null;
+    }
+
+    final EntityListEntry c(int i) {
+        int j = g(i);
+
+        for (EntityListEntry entitylistentry = this.a[a(j, this.a.length)]; entitylistentry != null; entitylistentry = entitylistentry.c) {
+            if (entitylistentry.a == i) {
+                return entitylistentry;
+            }
+        }
+
+        return null;
+    }
+
+    public void a(int i, Object object) {
+        int j = g(i);
+        int k = a(j, this.a.length);
+
+        for (EntityListEntry entitylistentry = this.a[k]; entitylistentry != null; entitylistentry = entitylistentry.c) {
+            if (entitylistentry.a == i) {
+                entitylistentry.b = object;
+            }
+        }
+
+        ++this.e;
+        this.a(j, i, object, k);
+    }
+
+    private void h(int i) {
+        EntityListEntry[] aentitylistentry = this.a;
+        int j = aentitylistentry.length;
+
+        if (j == 1073741824) {
+            this.c = Integer.MAX_VALUE;
+        } else {
+            EntityListEntry[] aentitylistentry1 = new EntityListEntry[i];
+
+            this.a(aentitylistentry1);
+            this.a = aentitylistentry1;
+            this.c = (int) ((float) i * this.d);
+        }
+    }
+
+    private void a(EntityListEntry[] aentitylistentry) {
+        EntityListEntry[] aentitylistentry1 = this.a;
+        int i = aentitylistentry.length;
+
+        for (int j = 0; j < aentitylistentry1.length; ++j) {
+            EntityListEntry entitylistentry = aentitylistentry1[j];
+
+            if (entitylistentry != null) {
+                aentitylistentry1[j] = null;
+
+                EntityListEntry entitylistentry1;
+
+                do {
+                    entitylistentry1 = entitylistentry.c;
+                    int k = a(entitylistentry.d, i);
+
+                    entitylistentry.c = aentitylistentry[k];
+                    aentitylistentry[k] = entitylistentry;
+                    entitylistentry = entitylistentry1;
+                } while (entitylistentry1 != null);
+            }
+        }
+    }
+
+    public Object d(int i) {
+        EntityListEntry entitylistentry = this.e(i);
+
+        return entitylistentry == null ? null : entitylistentry.b;
+    }
+
+    final EntityListEntry e(int i) {
+        int j = g(i);
+        int k = a(j, this.a.length);
+        EntityListEntry entitylistentry = this.a[k];
+
+        EntityListEntry entitylistentry1;
+        EntityListEntry entitylistentry2;
+
+        for (entitylistentry1 = entitylistentry; entitylistentry1 != null; entitylistentry1 = entitylistentry2) {
+            entitylistentry2 = entitylistentry1.c;
+            if (entitylistentry1.a == i) {
+                ++this.e;
+                --this.b;
+                if (entitylistentry == entitylistentry1) {
+                    this.a[k] = entitylistentry2;
+                } else {
+                    entitylistentry.c = entitylistentry2;
+                }
+
+                return entitylistentry1;
+            }
+
+            entitylistentry = entitylistentry1;
+        }
+
+        return entitylistentry1;
+    }
+
+    public void a() {
+        ++this.e;
+        EntityListEntry[] aentitylistentry = this.a;
+
+        for (int i = 0; i < aentitylistentry.length; ++i) {
+            aentitylistentry[i] = null;
+        }
+
+        this.b = 0;
+    }
+
+    private void a(int i, int j, Object object, int k) {
+        EntityListEntry entitylistentry = this.a[k];
+
+        this.a[k] = new EntityListEntry(i, j, object, entitylistentry);
+        if (this.b++ >= this.c) {
+            this.h(2 * this.a.length);
+        }
+    }
+
+    static int f(int i) {
+        return g(i);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityListEntry.java b/src/main/java/net/minecraft/server/EntityListEntry.java
new file mode 100644
index 00000000..59506d90
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityListEntry.java
@@ -0,0 +1,53 @@
+package net.minecraft.server;
+
+class EntityListEntry {
+
+    final int a;
+    Object b;
+    EntityListEntry c;
+    final int d;
+
+    EntityListEntry(int i, int j, Object object, EntityListEntry entitylistentry) {
+        this.b = object;
+        this.c = entitylistentry;
+        this.a = j;
+        this.d = i;
+    }
+
+    public final int a() {
+        return this.a;
+    }
+
+    public final Object b() {
+        return this.b;
+    }
+
+    public final boolean equals(Object object) {
+        if (!(object instanceof EntityListEntry)) {
+            return false;
+        } else {
+            EntityListEntry entitylistentry = (EntityListEntry) object;
+            Integer integer = Integer.valueOf(this.a());
+            Integer integer1 = Integer.valueOf(entitylistentry.a());
+
+            if (integer == integer1 || integer != null && integer.equals(integer1)) {
+                Object object1 = this.b();
+                Object object2 = entitylistentry.b();
+
+                if (object1 == object2 || object1 != null && object1.equals(object2)) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+
+    public final int hashCode() {
+        return EntityList.f(this.a);
+    }
+
+    public final String toString() {
+        return this.a() + "=" + this.b();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
new file mode 100644
index 00000000..45832973
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -0,0 +1,149 @@
+package net.minecraft.server;
+
+public class EntitySlime extends EntityLiving implements IMonster {
+
+    public float a;
+    public float b;
+    private int size = 0;
+
+    public EntitySlime(World world) {
+        super(world);
+        this.texture = "/mob/slime.png";
+        int i = 1 << this.random.nextInt(3);
+
+        this.height = 0.0F;
+        this.size = this.random.nextInt(20) + 10;
+        this.setSize(i);
+    }
+
+    protected void b() {
+        super.b();
+        this.datawatcher.a(16, new Byte((byte) 1));
+    }
+
+    public void setSize(int i) {
+        this.datawatcher.watch(16, new Byte((byte) i));
+        this.b(0.6F * (float) i, 0.6F * (float) i);
+        this.health = i * i;
+        this.setPosition(this.locX, this.locY, this.locZ);
+    }
+
+    public int getSize() {
+        return this.datawatcher.a(16);
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+        nbttagcompound.a("Size", this.getSize() - 1);
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.setSize(nbttagcompound.e("Size") + 1);
+    }
+
+    public void m_() {
+        this.b = this.a;
+        boolean flag = this.onGround;
+
+        super.m_();
+        if (this.onGround && !flag) {
+            int i = this.getSize();
+
+            for (int j = 0; j < i * 8; ++j) {
+                float f = this.random.nextFloat() * 3.1415927F * 2.0F;
+                float f1 = this.random.nextFloat() * 0.5F + 0.5F;
+                float f2 = MathHelper.sin(f) * (float) i * 0.5F * f1;
+                float f3 = MathHelper.cos(f) * (float) i * 0.5F * f1;
+
+                this.world.a("slime", this.locX + (double) f2, this.boundingBox.b, this.locZ + (double) f3, 0.0D, 0.0D, 0.0D);
+            }
+
+            if (i > 2) {
+                this.world.makeSound(this, "mob.slime", this.k(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+            }
+
+            this.a = -0.5F;
+        }
+
+        this.a *= 0.6F;
+    }
+
+    protected void c_() {
+        this.U();
+        EntityHuman entityhuman = this.world.findNearbyPlayer(this, 16.0D);
+
+        if (entityhuman != null) {
+            this.a(entityhuman, 10.0F, 20.0F);
+        }
+
+        if (this.onGround && this.size-- <= 0) {
+            this.size = this.random.nextInt(20) + 10;
+            if (entityhuman != null) {
+                this.size /= 3;
+            }
+
+            this.aC = true;
+            if (this.getSize() > 1) {
+                this.world.makeSound(this, "mob.slime", this.k(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+            }
+
+            this.a = 1.0F;
+            this.az = 1.0F - this.random.nextFloat() * 2.0F;
+            this.aA = (float) (1 * this.getSize());
+        } else {
+            this.aC = false;
+            if (this.onGround) {
+                this.az = this.aA = 0.0F;
+            }
+        }
+    }
+
+    public void die() {
+        int i = this.getSize();
+
+        if (!this.world.isStatic && i > 1 && this.health == 0) {
+            for (int j = 0; j < 4; ++j) {
+                float f = ((float) (j % 2) - 0.5F) * (float) i / 4.0F;
+                float f1 = ((float) (j / 2) - 0.5F) * (float) i / 4.0F;
+                EntitySlime entityslime = new EntitySlime(this.world);
+
+                entityslime.setSize(i / 2);
+                entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.random.nextFloat() * 360.0F, 0.0F);
+                this.world.addEntity(entityslime);
+            }
+        }
+
+        super.die();
+    }
+
+    public void b(EntityHuman entityhuman) {
+        int i = this.getSize();
+
+        if (i > 1 && this.e(entityhuman) && (double) this.f(entityhuman) < 0.6D * (double) i && entityhuman.damageEntity(this, i)) {
+            this.world.makeSound(this, "mob.slimeattack", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+        }
+    }
+
+    protected String h() {
+        return "mob.slime";
+    }
+
+    protected String i() {
+        return "mob.slime";
+    }
+
+    protected int j() {
+        return this.getSize() == 1 ? Item.SLIME_BALL.id : 0;
+    }
+
+    public boolean d() {
+        Chunk chunk = this.world.getChunkAtWorldCoords(MathHelper.floor(this.locX), MathHelper.floor(this.locZ));
+
+        return (this.getSize() == 1 || this.world.spawnMonsters > 0) && this.random.nextInt(10) == 0 && chunk.a(987234911L).nextInt(10) == 0 && this.locY < 16.0D;
+    }
+
+    protected float k() {
+        return 0.6F;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
new file mode 100644
index 00000000..53c001db
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -0,0 +1,94 @@
+package net.minecraft.server;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class EntityTypes {
+
+    private static Map a = new HashMap();
+    private static Map b = new HashMap();
+    private static Map c = new HashMap();
+    private static Map d = new HashMap();
+
+    public EntityTypes() {}
+
+    private static void a(Class oclass, String s, int i) {
+        a.put(s, oclass);
+        b.put(oclass, s);
+        c.put(Integer.valueOf(i), oclass);
+        d.put(oclass, Integer.valueOf(i));
+    }
+
+    public static Entity a(String s, World world) {
+        Entity entity = null;
+
+        try {
+            Class oclass = (Class) a.get(s);
+
+            if (oclass != null) {
+                entity = (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        return entity;
+    }
+
+    public static Entity a(NBTTagCompound nbttagcompound, World world) {
+        Entity entity = null;
+
+        try {
+            Class oclass = (Class) a.get(nbttagcompound.getString("id"));
+
+            if (oclass != null) {
+                entity = (Entity) oclass.getConstructor(new Class[] { World.class}).newInstance(new Object[] { world});
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        if (entity != null) {
+            entity.e(nbttagcompound);
+        } else {
+            System.out.println("Skipping Entity with id " + nbttagcompound.getString("id"));
+        }
+
+        return entity;
+    }
+
+    public static int a(Entity entity) {
+        return ((Integer) d.get(entity.getClass())).intValue();
+    }
+
+    public static String b(Entity entity) {
+        return (String) b.get(entity.getClass());
+    }
+
+    static {
+        a(EntityArrow.class, "Arrow", 10);
+        a(EntitySnowball.class, "Snowball", 11);
+        a(EntityItem.class, "Item", 1);
+        a(EntityPainting.class, "Painting", 9);
+        a(EntityLiving.class, "Mob", 48);
+        a(EntityMonster.class, "Monster", 49);
+        a(EntityCreeper.class, "Creeper", 50);
+        a(EntitySkeleton.class, "Skeleton", 51);
+        a(EntitySpider.class, "Spider", 52);
+        a(EntityGiantZombie.class, "Giant", 53);
+        a(EntityZombie.class, "Zombie", 54);
+        a(EntitySlime.class, "Slime", 55);
+        a(EntityGhast.class, "Ghast", 56);
+        a(EntityPigZombie.class, "PigZombie", 57);
+        a(EntityPig.class, "Pig", 90);
+        a(EntitySheep.class, "Sheep", 91);
+        a(EntityCow.class, "Cow", 92);
+        a(EntityChicken.class, "Chicken", 93);
+        a(EntitySquid.class, "Squid", 94);
+        a(EntityWolf.class, "Wolf", 95);
+        a(EntityTNTPrimed.class, "PrimedTnt", 20);
+        a(EntityFallingSand.class, "FallingSand", 21);
+        a(EntityMinecart.class, "Minecart", 40);
+        a(EntityBoat.class, "Boat", 41);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityWaterAnimal.java b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
new file mode 100644
index 00000000..580238f2
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class EntityWaterAnimal extends EntityCreature implements IAnimal {
+
+    public EntityWaterAnimal(World world) {
+        super(world);
+    }
+
+    public boolean b_() {
+        return true;
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+    }
+
+    public boolean d() {
+        return this.world.containsEntity(this.boundingBox);
+    }
+
+    public int e() {
+        return 120;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityWeather.java b/src/main/java/net/minecraft/server/EntityWeather.java
new file mode 100644
index 00000000..03ff54cb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityWeather.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public abstract class EntityWeather extends Entity {
+
+    public EntityWeather(World world) {
+        super(world);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EnumArt.java b/src/main/java/net/minecraft/server/EnumArt.java
new file mode 100644
index 00000000..7695136d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumArt.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+public enum EnumArt {
+
+    KEBAB("Kebab", 0, "Kebab", 16, 16, 0, 0), AZTEC("Aztec", 1, "Aztec", 16, 16, 16, 0), ALBAN("Alban", 2, "Alban", 16, 16, 32, 0), AZTEC2("Aztec2", 3, "Aztec2", 16, 16, 48, 0), BOMB("Bomb", 4, "Bomb", 16, 16, 64, 0), PLANT("Plant", 5, "Plant", 16, 16, 80, 0), WASTELAND("Wasteland", 6, "Wasteland", 16, 16, 96, 0), POOL("Pool", 7, "Pool", 32, 16, 0, 32), COURBET("Courbet", 8, "Courbet", 32, 16, 32, 32), SEA("Sea", 9, "Sea", 32, 16, 64, 32), SUNSET("Sunset", 10, "Sunset", 32, 16, 96, 32), CREEBET("Creebet", 11, "Creebet", 32, 16, 128, 32), WANDERER("Wanderer", 12, "Wanderer", 16, 32, 0, 64), GRAHAM("Graham", 13, "Graham", 16, 32, 16, 64), MATCH("Match", 14, "Match", 32, 32, 0, 128), BUST("Bust", 15, "Bust", 32, 32, 32, 128), STAGE("Stage", 16, "Stage", 32, 32, 64, 128), VOID("Void", 17, "Void", 32, 32, 96, 128), SKULL_AND_ROSES("SkullAndRoses", 18, "SkullAndRoses", 32, 32, 128, 128), FIGHTERS("Fighters", 19, "Fighters", 64, 32, 0, 96), POINTER("Pointer", 20, "Pointer", 64, 64, 0, 192), PIGSCENE("Pigscene", 21, "Pigscene", 64, 64, 64, 192), BURNINGSKULL("BurningSkull", 22, "BurningSkull", 64, 64, 128, 192), SKELETON("Skeleton", 23, "Skeleton", 64, 48, 192, 64), DONKEYKONG("DonkeyKong", 24, "DonkeyKong", 64, 48, 192, 112);
+    public static final int z = "SkullAndRoses".length();
+    public final String A;
+    public final int B;
+    public final int C;
+    public final int D;
+    public final int E;
+
+    private static final EnumArt[] F = new EnumArt[] { KEBAB, AZTEC, ALBAN, AZTEC2, BOMB, PLANT, WASTELAND, POOL, COURBET, SEA, SUNSET, CREEBET, WANDERER, GRAHAM, MATCH, BUST, STAGE, VOID, SKULL_AND_ROSES, FIGHTERS, POINTER, PIGSCENE, BURNINGSKULL, SKELETON, DONKEYKONG};
+
+    private EnumArt(String s, int i, String s1, int j, int k, int l, int i1) {
+        this.A = s1;
+        this.B = j;
+        this.C = k;
+        this.D = l;
+        this.E = i1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EnumBedError.java b/src/main/java/net/minecraft/server/EnumBedError.java
new file mode 100644
index 00000000..337c2623
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumBedError.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public enum EnumBedError {
+
+    OK("OK", 0), NOT_POSSIBLE_HERE("NOT_POSSIBLE_HERE", 1), NOT_POSSIBLE_NOW("NOT_POSSIBLE_NOW", 2), TOO_FAR_AWAY("TOO_FAR_AWAY", 3), OTHER_PROBLEM("OTHER_PROBLEM", 4);
+
+    private static final EnumBedError[] f = new EnumBedError[] { OK, NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, TOO_FAR_AWAY, OTHER_PROBLEM};
+
+    private EnumBedError(String s, int i) {}
+}
diff --git a/src/main/java/net/minecraft/server/EnumCreatureType.java b/src/main/java/net/minecraft/server/EnumCreatureType.java
new file mode 100644
index 00000000..aa21ccd9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumCreatureType.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+public enum EnumCreatureType {
+
+    MONSTER("monster", 0, IMonster.class, 70, Material.AIR, false), CREATURE("creature", 1, EntityAnimal.class, 15, Material.AIR, true), WATER_CREATURE("waterCreature", 2, EntityWaterAnimal.class, 5, Material.WATER, true);
+    private final Class d;
+    private final int e;
+    private final Material f;
+    private final boolean g;
+
+    private static final EnumCreatureType[] h = new EnumCreatureType[] { MONSTER, CREATURE, WATER_CREATURE};
+
+    private EnumCreatureType(String s, int i, Class oclass, int j, Material material, boolean flag) {
+        this.d = oclass;
+        this.e = j;
+        this.f = material;
+        this.g = flag;
+    }
+
+    public Class a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.e;
+    }
+
+    public Material c() {
+        return this.f;
+    }
+
+    public boolean d() {
+        return this.g;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EnumMobType.java b/src/main/java/net/minecraft/server/EnumMobType.java
new file mode 100644
index 00000000..b8da2b01
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumMobType.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public enum EnumMobType {
+
+    EVERYTHING("everything", 0), MOBS("mobs", 1), PLAYERS("players", 2);
+
+    private static final EnumMobType[] d = new EnumMobType[] { EVERYTHING, MOBS, PLAYERS};
+
+    private EnumMobType(String s, int i) {}
+}
diff --git a/src/main/java/net/minecraft/server/EnumMovingObjectType.java b/src/main/java/net/minecraft/server/EnumMovingObjectType.java
new file mode 100644
index 00000000..b08f28b3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumMovingObjectType.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public enum EnumMovingObjectType {
+
+    TILE("TILE", 0), ENTITY("ENTITY", 1);
+
+    private static final EnumMovingObjectType[] c = new EnumMovingObjectType[] { TILE, ENTITY};
+
+    private EnumMovingObjectType(String s, int i) {}
+}
diff --git a/src/main/java/net/minecraft/server/EnumSkyBlock.java b/src/main/java/net/minecraft/server/EnumSkyBlock.java
new file mode 100644
index 00000000..d34a6159
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumSkyBlock.java
@@ -0,0 +1,13 @@
+package net.minecraft.server;
+
+public enum EnumSkyBlock {
+
+    SKY("Sky", 0, 15), BLOCK("Block", 1, 0);
+    public final int c;
+
+    private static final EnumSkyBlock[] d = new EnumSkyBlock[] { SKY, BLOCK};
+
+    private EnumSkyBlock(String s, int i, int j) {
+        this.c = j;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EnumToolMaterial.java b/src/main/java/net/minecraft/server/EnumToolMaterial.java
new file mode 100644
index 00000000..80c3e1ad
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumToolMaterial.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+public enum EnumToolMaterial {
+
+    WOOD("WOOD", 0, 0, 59, 2.0F, 0), STONE("STONE", 1, 1, 131, 4.0F, 1), IRON("IRON", 2, 2, 250, 6.0F, 2), DIAMOND("EMERALD", 3, 3, 1561, 8.0F, 3), GOLD("GOLD", 4, 0, 32, 12.0F, 0);
+    private final int f;
+    private final int g;
+    private final float h;
+    private final int i;
+
+    private static final EnumToolMaterial[] j = new EnumToolMaterial[] { WOOD, STONE, IRON, DIAMOND, GOLD};
+
+    private EnumToolMaterial(String s, int i, int j, int k, float f, int l) {
+        this.f = j;
+        this.g = k;
+        this.h = f;
+        this.i = l;
+    }
+
+    public int a() {
+        return this.g;
+    }
+
+    public float b() {
+        return this.h;
+    }
+
+    public int c() {
+        return this.i;
+    }
+
+    public int d() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/FontAllowedCharacters.java b/src/main/java/net/minecraft/server/FontAllowedCharacters.java
new file mode 100644
index 00000000..94079540
--- /dev/null
+++ b/src/main/java/net/minecraft/server/FontAllowedCharacters.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+
+public class FontAllowedCharacters {
+
+    public static final String allowedCharacters = a();
+    public static final char[] b = new char[] { '/', '\n', '\r', '\t', '\u0000', '\f', '`', '?', '*', '\\', '<', '>', '|', '\"', ':'};
+
+    public FontAllowedCharacters() {}
+
+    private static String a() {
+        String s = "";
+
+        try {
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(FontAllowedCharacters.class.getResourceAsStream("/font.txt"), "UTF-8"));
+            String s1 = "";
+
+            while ((s1 = bufferedreader.readLine()) != null) {
+                if (!s1.startsWith("#")) {
+                    s = s + s1;
+                }
+            }
+
+            bufferedreader.close();
+        } catch (Exception exception) {
+            ;
+        }
+
+        return s;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/FurnaceRecipes.java b/src/main/java/net/minecraft/server/FurnaceRecipes.java
new file mode 100644
index 00000000..fc65affe
--- /dev/null
+++ b/src/main/java/net/minecraft/server/FurnaceRecipes.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class FurnaceRecipes {
+
+    private static final FurnaceRecipes a = new FurnaceRecipes();
+    private Map b = new HashMap();
+
+    public static final FurnaceRecipes getInstance() {
+        return a;
+    }
+
+    private FurnaceRecipes() {
+        this.registerRecipe(Block.IRON_ORE.id, new ItemStack(Item.IRON_INGOT));
+        this.registerRecipe(Block.GOLD_ORE.id, new ItemStack(Item.GOLD_INGOT));
+        this.registerRecipe(Block.DIAMOND_ORE.id, new ItemStack(Item.DIAMOND));
+        this.registerRecipe(Block.SAND.id, new ItemStack(Block.GLASS));
+        this.registerRecipe(Item.PORK.id, new ItemStack(Item.GRILLED_PORK));
+        this.registerRecipe(Item.RAW_FISH.id, new ItemStack(Item.COOKED_FISH));
+        this.registerRecipe(Block.COBBLESTONE.id, new ItemStack(Block.STONE));
+        this.registerRecipe(Item.CLAY_BALL.id, new ItemStack(Item.CLAY_BRICK));
+        this.registerRecipe(Block.CACTUS.id, new ItemStack(Item.INK_SACK, 1, 2));
+        this.registerRecipe(Block.LOG.id, new ItemStack(Item.COAL, 1, 1));
+    }
+
+    public void registerRecipe(int i, ItemStack itemstack) {
+        this.b.put(Integer.valueOf(i), itemstack);
+    }
+
+    public ItemStack a(int i) {
+        return (ItemStack) this.b.get(Integer.valueOf(i));
+    }
+
+    public Map b() {
+        return this.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GuiLogFormatter.java b/src/main/java/net/minecraft/server/GuiLogFormatter.java
new file mode 100644
index 00000000..6805b428
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GuiLogFormatter.java
@@ -0,0 +1,50 @@
+package net.minecraft.server;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.util.logging.Formatter;
+import java.util.logging.Level;
+import java.util.logging.LogRecord;
+
+class GuiLogFormatter extends Formatter {
+
+    final GuiLogOutputHandler a;
+
+    GuiLogFormatter(GuiLogOutputHandler guilogoutputhandler) {
+        this.a = guilogoutputhandler;
+    }
+
+    public String format(LogRecord logrecord) {
+        StringBuilder stringbuilder = new StringBuilder();
+        Level level = logrecord.getLevel();
+
+        if (level == Level.FINEST) {
+            stringbuilder.append("[FINEST] ");
+        } else if (level == Level.FINER) {
+            stringbuilder.append("[FINER] ");
+        } else if (level == Level.FINE) {
+            stringbuilder.append("[FINE] ");
+        } else if (level == Level.INFO) {
+            stringbuilder.append("[INFO] ");
+        } else if (level == Level.WARNING) {
+            stringbuilder.append("[WARNING] ");
+        } else if (level == Level.SEVERE) {
+            stringbuilder.append("[SEVERE] ");
+        } else if (level == Level.SEVERE) {
+            stringbuilder.append("[" + level.getLocalizedName() + "] ");
+        }
+
+        stringbuilder.append(logrecord.getMessage());
+        stringbuilder.append('\n');
+        Throwable throwable = logrecord.getThrown();
+
+        if (throwable != null) {
+            StringWriter stringwriter = new StringWriter();
+
+            throwable.printStackTrace(new PrintWriter(stringwriter));
+            stringbuilder.append(stringwriter.toString());
+        }
+
+        return stringbuilder.toString();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GuiLogOutputHandler.java b/src/main/java/net/minecraft/server/GuiLogOutputHandler.java
new file mode 100644
index 00000000..8c7a2dae
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GuiLogOutputHandler.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+import java.util.logging.Formatter;
+import java.util.logging.Handler;
+import java.util.logging.LogRecord;
+import javax.swing.JTextArea;
+
+public class GuiLogOutputHandler extends Handler {
+
+    private int[] b = new int[1024];
+    private int c = 0;
+    Formatter a = new GuiLogFormatter(this);
+    private JTextArea d;
+
+    public GuiLogOutputHandler(JTextArea jtextarea) {
+        this.setFormatter(this.a);
+        this.d = jtextarea;
+    }
+
+    public void close() {}
+
+    public void flush() {}
+
+    public void publish(LogRecord logrecord) {
+        int i = this.d.getDocument().getLength();
+
+        this.d.append(this.a.format(logrecord));
+        this.d.setCaretPosition(this.d.getDocument().getLength());
+        int j = this.d.getDocument().getLength() - i;
+
+        if (this.b[this.c] != 0) {
+            this.d.replaceRange("", 0, this.b[this.c]);
+        }
+
+        this.b[this.c] = j;
+        this.c = (this.c + 1) % 1024;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GuiStatsComponent.java b/src/main/java/net/minecraft/server/GuiStatsComponent.java
new file mode 100644
index 00000000..102e0d79
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GuiStatsComponent.java
@@ -0,0 +1,60 @@
+package net.minecraft.server;
+
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import javax.swing.JComponent;
+import javax.swing.Timer;
+
+public class GuiStatsComponent extends JComponent {
+
+    private int[] a = new int[256];
+    private int b = 0;
+    private String[] c = new String[10];
+
+    public GuiStatsComponent() {
+        this.setPreferredSize(new Dimension(256, 196));
+        this.setMinimumSize(new Dimension(256, 196));
+        this.setMaximumSize(new Dimension(256, 196));
+        (new Timer(500, new GuiStatsListener(this))).start();
+        this.setBackground(Color.BLACK);
+    }
+
+    private void a() {
+        long i = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
+
+        System.gc();
+        this.c[0] = "Memory use: " + i / 1024L / 1024L + " mb (" + Runtime.getRuntime().freeMemory() * 100L / Runtime.getRuntime().maxMemory() + "% free)";
+        this.c[1] = "Threads: " + NetworkManager.b + " + " + NetworkManager.c;
+        this.a[this.b++ & 255] = (int) (i * 100L / Runtime.getRuntime().maxMemory());
+        this.repaint();
+    }
+
+    public void paint(Graphics graphics) {
+        graphics.setColor(new Color(16777215));
+        graphics.fillRect(0, 0, 256, 192);
+
+        int i;
+
+        for (i = 0; i < 256; ++i) {
+            int j = this.a[i + this.b & 255];
+
+            graphics.setColor(new Color(j + 28 << 16));
+            graphics.fillRect(i, 100 - j, 1, j);
+        }
+
+        graphics.setColor(Color.BLACK);
+
+        for (i = 0; i < this.c.length; ++i) {
+            String s = this.c[i];
+
+            if (s != null) {
+                graphics.drawString(s, 32, 116 + i * 16);
+            }
+        }
+    }
+
+    static void a(GuiStatsComponent guistatscomponent) {
+        guistatscomponent.a();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GuiStatsListener.java b/src/main/java/net/minecraft/server/GuiStatsListener.java
new file mode 100644
index 00000000..c3eae6b7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GuiStatsListener.java
@@ -0,0 +1,17 @@
+package net.minecraft.server;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
+class GuiStatsListener implements ActionListener {
+
+    final GuiStatsComponent a;
+
+    GuiStatsListener(GuiStatsComponent guistatscomponent) {
+        this.a = guistatscomponent;
+    }
+
+    public void actionPerformed(ActionEvent actionevent) {
+        GuiStatsComponent.a(this.a);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/IAnimal.java b/src/main/java/net/minecraft/server/IAnimal.java
new file mode 100644
index 00000000..78d39149
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IAnimal.java
@@ -0,0 +1,3 @@
+package net.minecraft.server;
+
+public interface IAnimal {}
diff --git a/src/main/java/net/minecraft/server/IBlockAccess.java b/src/main/java/net/minecraft/server/IBlockAccess.java
new file mode 100644
index 00000000..9f9073c6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IBlockAccess.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public interface IBlockAccess {
+
+    int getTypeId(int i, int j, int k);
+
+    TileEntity getTileEntity(int i, int j, int k);
+
+    int getData(int i, int j, int k);
+
+    Material getMaterial(int i, int j, int k);
+
+    boolean e(int i, int j, int k);
+}
diff --git a/src/main/java/net/minecraft/server/IChunkLoader.java b/src/main/java/net/minecraft/server/IChunkLoader.java
new file mode 100644
index 00000000..4dc523d5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IChunkLoader.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public interface IChunkLoader {
+
+    Chunk a(World world, int i, int j);
+
+    void a(World world, Chunk chunk);
+
+    void b(World world, Chunk chunk);
+
+    void a();
+
+    void b();
+}
diff --git a/src/main/java/net/minecraft/server/IChunkProvider.java b/src/main/java/net/minecraft/server/IChunkProvider.java
new file mode 100644
index 00000000..fe280256
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IChunkProvider.java
@@ -0,0 +1,18 @@
+package net.minecraft.server;
+
+public interface IChunkProvider {
+
+    boolean isChunkLoaded(int i, int j);
+
+    Chunk getOrCreateChunk(int i, int j);
+
+    Chunk getChunkAt(int i, int j);
+
+    void getChunkAt(IChunkProvider ichunkprovider, int i, int j);
+
+    boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate);
+
+    boolean unloadChunks();
+
+    boolean canSave();
+}
diff --git a/src/main/java/net/minecraft/server/ICommandListener.java b/src/main/java/net/minecraft/server/ICommandListener.java
new file mode 100644
index 00000000..b119c58f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ICommandListener.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public interface ICommandListener {
+
+    void sendMessage(String s);
+
+    String getName();
+}
diff --git a/src/main/java/net/minecraft/server/ICrafting.java b/src/main/java/net/minecraft/server/ICrafting.java
new file mode 100644
index 00000000..d361a7cc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ICrafting.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+import java.util.List;
+
+public interface ICrafting {
+
+    void a(Container container, List list);
+
+    void a(Container container, int i, ItemStack itemstack);
+
+    void a(Container container, int i, int j);
+}
diff --git a/src/main/java/net/minecraft/server/IMonster.java b/src/main/java/net/minecraft/server/IMonster.java
new file mode 100644
index 00000000..0891c78d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IMonster.java
@@ -0,0 +1,3 @@
+package net.minecraft.server;
+
+public interface IMonster extends IAnimal {}
diff --git a/src/main/java/net/minecraft/server/IProgressUpdate.java b/src/main/java/net/minecraft/server/IProgressUpdate.java
new file mode 100644
index 00000000..e2765e3e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IProgressUpdate.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public interface IProgressUpdate {
+
+    void a(String s);
+
+    void b(String s);
+
+    void a(int i);
+}
diff --git a/src/main/java/net/minecraft/server/IUpdatePlayerListBox.java b/src/main/java/net/minecraft/server/IUpdatePlayerListBox.java
new file mode 100644
index 00000000..c62e6f23
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IUpdatePlayerListBox.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+public interface IUpdatePlayerListBox {
+
+    void a();
+}
diff --git a/src/main/java/net/minecraft/server/IWorldAccess.java b/src/main/java/net/minecraft/server/IWorldAccess.java
new file mode 100644
index 00000000..1c236fd8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IWorldAccess.java
@@ -0,0 +1,24 @@
+package net.minecraft.server;
+
+public interface IWorldAccess {
+
+    void a(int i, int j, int k);
+
+    void a(int i, int j, int k, int l, int i1, int j1);
+
+    void a(String s, double d0, double d1, double d2, float f, float f1);
+
+    void a(String s, double d0, double d1, double d2, double d3, double d4, double d5);
+
+    void a(Entity entity);
+
+    void b(Entity entity);
+
+    void a();
+
+    void a(String s, int i, int j, int k);
+
+    void a(int i, int j, int k, TileEntity tileentity);
+
+    void a(EntityHuman entityhuman, int i, int j, int k, int l, int i1);
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 00000000..b67fe18c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,254 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class Item {
+
+    protected static Random b = new Random();
+    public static Item[] byId = new Item[32000];
+    public static Item IRON_SPADE = (new ItemSpade(0, EnumToolMaterial.IRON)).a(2, 5).a("shovelIron");
+    public static Item IRON_PICKAXE = (new ItemPickaxe(1, EnumToolMaterial.IRON)).a(2, 6).a("pickaxeIron");
+    public static Item IRON_AXE = (new ItemAxe(2, EnumToolMaterial.IRON)).a(2, 7).a("hatchetIron");
+    public static Item FLINT_AND_STEEL = (new ItemFlintAndSteel(3)).a(5, 0).a("flintAndSteel");
+    public static Item APPLE = (new ItemFood(4, 4, false)).a(10, 0).a("apple");
+    public static Item BOW = (new ItemBow(5)).a(5, 1).a("bow");
+    public static Item ARROW = (new Item(6)).a(5, 2).a("arrow");
+    public static Item COAL = (new ItemCoal(7)).a(7, 0).a("coal");
+    public static Item DIAMOND = (new Item(8)).a(7, 3).a("emerald");
+    public static Item IRON_INGOT = (new Item(9)).a(7, 1).a("ingotIron");
+    public static Item GOLD_INGOT = (new Item(10)).a(7, 2).a("ingotGold");
+    public static Item IRON_SWORD = (new ItemSword(11, EnumToolMaterial.IRON)).a(2, 4).a("swordIron");
+    public static Item WOOD_SWORD = (new ItemSword(12, EnumToolMaterial.WOOD)).a(0, 4).a("swordWood");
+    public static Item WOOD_SPADE = (new ItemSpade(13, EnumToolMaterial.WOOD)).a(0, 5).a("shovelWood");
+    public static Item WOOD_PICKAXE = (new ItemPickaxe(14, EnumToolMaterial.WOOD)).a(0, 6).a("pickaxeWood");
+    public static Item WOOD_AXE = (new ItemAxe(15, EnumToolMaterial.WOOD)).a(0, 7).a("hatchetWood");
+    public static Item STONE_SWORD = (new ItemSword(16, EnumToolMaterial.STONE)).a(1, 4).a("swordStone");
+    public static Item STONE_SPADE = (new ItemSpade(17, EnumToolMaterial.STONE)).a(1, 5).a("shovelStone");
+    public static Item STONE_PICKAXE = (new ItemPickaxe(18, EnumToolMaterial.STONE)).a(1, 6).a("pickaxeStone");
+    public static Item STONE_AXE = (new ItemAxe(19, EnumToolMaterial.STONE)).a(1, 7).a("hatchetStone");
+    public static Item DIAMOND_SWORD = (new ItemSword(20, EnumToolMaterial.DIAMOND)).a(3, 4).a("swordDiamond");
+    public static Item DIAMOND_SPADE = (new ItemSpade(21, EnumToolMaterial.DIAMOND)).a(3, 5).a("shovelDiamond");
+    public static Item DIAMOND_PICKAXE = (new ItemPickaxe(22, EnumToolMaterial.DIAMOND)).a(3, 6).a("pickaxeDiamond");
+    public static Item DIAMOND_AXE = (new ItemAxe(23, EnumToolMaterial.DIAMOND)).a(3, 7).a("hatchetDiamond");
+    public static Item STICK = (new Item(24)).a(5, 3).g().a("stick");
+    public static Item BOWL = (new Item(25)).a(7, 4).a("bowl");
+    public static Item MUSHROOM_SOUP = (new ItemSoup(26, 10)).a(8, 4).a("mushroomStew");
+    public static Item GOLD_SWORD = (new ItemSword(27, EnumToolMaterial.GOLD)).a(4, 4).a("swordGold");
+    public static Item GOLD_SPADE = (new ItemSpade(28, EnumToolMaterial.GOLD)).a(4, 5).a("shovelGold");
+    public static Item GOLD_PICKAXE = (new ItemPickaxe(29, EnumToolMaterial.GOLD)).a(4, 6).a("pickaxeGold");
+    public static Item GOLD_AXE = (new ItemAxe(30, EnumToolMaterial.GOLD)).a(4, 7).a("hatchetGold");
+    public static Item STRING = (new Item(31)).a(8, 0).a("string");
+    public static Item FEATHER = (new Item(32)).a(8, 1).a("feather");
+    public static Item SULPHUR = (new Item(33)).a(8, 2).a("sulphur");
+    public static Item WOOD_HOE = (new ItemHoe(34, EnumToolMaterial.WOOD)).a(0, 8).a("hoeWood");
+    public static Item STONE_HOE = (new ItemHoe(35, EnumToolMaterial.STONE)).a(1, 8).a("hoeStone");
+    public static Item IRON_HOE = (new ItemHoe(36, EnumToolMaterial.IRON)).a(2, 8).a("hoeIron");
+    public static Item DIAMOND_HOE = (new ItemHoe(37, EnumToolMaterial.DIAMOND)).a(3, 8).a("hoeDiamond");
+    public static Item GOLD_HOE = (new ItemHoe(38, EnumToolMaterial.GOLD)).a(4, 8).a("hoeGold");
+    public static Item SEEDS = (new ItemSeeds(39, Block.CROPS.id)).a(9, 0).a("seeds");
+    public static Item WHEAT = (new Item(40)).a(9, 1).a("wheat");
+    public static Item BREAD = (new ItemFood(41, 5, false)).a(9, 2).a("bread");
+    public static Item LEATHER_HELMET = (new ItemArmor(42, 0, 0, 0)).a(0, 0).a("helmetCloth");
+    public static Item LEATHER_CHESTPLATE = (new ItemArmor(43, 0, 0, 1)).a(0, 1).a("chestplateCloth");
+    public static Item LEATHER_LEGGINGS = (new ItemArmor(44, 0, 0, 2)).a(0, 2).a("leggingsCloth");
+    public static Item LEATHER_BOOTS = (new ItemArmor(45, 0, 0, 3)).a(0, 3).a("bootsCloth");
+    public static Item CHAINMAIL_HELMET = (new ItemArmor(46, 1, 1, 0)).a(1, 0).a("helmetChain");
+    public static Item CHAINMAIL_CHESTPLATE = (new ItemArmor(47, 1, 1, 1)).a(1, 1).a("chestplateChain");
+    public static Item CHAINMAIL_LEGGINGS = (new ItemArmor(48, 1, 1, 2)).a(1, 2).a("leggingsChain");
+    public static Item CHAINMAIL_BOOTS = (new ItemArmor(49, 1, 1, 3)).a(1, 3).a("bootsChain");
+    public static Item IRON_HELMET = (new ItemArmor(50, 2, 2, 0)).a(2, 0).a("helmetIron");
+    public static Item IRON_CHESTPLATE = (new ItemArmor(51, 2, 2, 1)).a(2, 1).a("chestplateIron");
+    public static Item IRON_LEGGINGS = (new ItemArmor(52, 2, 2, 2)).a(2, 2).a("leggingsIron");
+    public static Item IRON_BOOTS = (new ItemArmor(53, 2, 2, 3)).a(2, 3).a("bootsIron");
+    public static Item DIAMOND_HELMET = (new ItemArmor(54, 3, 3, 0)).a(3, 0).a("helmetDiamond");
+    public static Item DIAMOND_CHESTPLATE = (new ItemArmor(55, 3, 3, 1)).a(3, 1).a("chestplateDiamond");
+    public static Item DIAMOND_LEGGINGS = (new ItemArmor(56, 3, 3, 2)).a(3, 2).a("leggingsDiamond");
+    public static Item DIAMOND_BOOTS = (new ItemArmor(57, 3, 3, 3)).a(3, 3).a("bootsDiamond");
+    public static Item GOLD_HELMET = (new ItemArmor(58, 1, 4, 0)).a(4, 0).a("helmetGold");
+    public static Item GOLD_CHESTPLATE = (new ItemArmor(59, 1, 4, 1)).a(4, 1).a("chestplateGold");
+    public static Item GOLD_LEGGINGS = (new ItemArmor(60, 1, 4, 2)).a(4, 2).a("leggingsGold");
+    public static Item GOLD_BOOTS = (new ItemArmor(61, 1, 4, 3)).a(4, 3).a("bootsGold");
+    public static Item FLINT = (new Item(62)).a(6, 0).a("flint");
+    public static Item PORK = (new ItemFood(63, 3, true)).a(7, 5).a("porkchopRaw");
+    public static Item GRILLED_PORK = (new ItemFood(64, 8, true)).a(8, 5).a("porkchopCooked");
+    public static Item PAINTING = (new ItemPainting(65)).a(10, 1).a("painting");
+    public static Item GOLDEN_APPLE = (new ItemFood(66, 42, false)).a(11, 0).a("appleGold");
+    public static Item SIGN = (new ItemSign(67)).a(10, 2).a("sign");
+    public static Item WOOD_DOOR = (new ItemDoor(68, Material.WOOD)).a(11, 2).a("doorWood");
+    public static Item BUCKET = (new ItemBucket(69, 0)).a(10, 4).a("bucket");
+    public static Item WATER_BUCKET = (new ItemBucket(70, Block.WATER.id)).a(11, 4).a("bucketWater").a(BUCKET);
+    public static Item LAVA_BUCKET = (new ItemBucket(71, Block.LAVA.id)).a(12, 4).a("bucketLava").a(BUCKET);
+    public static Item MINECART = (new ItemMinecart(72, 0)).a(7, 8).a("minecart");
+    public static Item SADDLE = (new ItemSaddle(73)).a(8, 6).a("saddle");
+    public static Item IRON_DOOR = (new ItemDoor(74, Material.ORE)).a(12, 2).a("doorIron");
+    public static Item REDSTONE = (new ItemRedstone(75)).a(8, 3).a("redstone");
+    public static Item SNOW_BALL = (new ItemSnowball(76)).a(14, 0).a("snowball");
+    public static Item BOAT = (new ItemBoat(77)).a(8, 8).a("boat");
+    public static Item LEATHER = (new Item(78)).a(7, 6).a("leather");
+    public static Item MILK_BUCKET = (new ItemBucket(79, -1)).a(13, 4).a("milk").a(BUCKET);
+    public static Item CLAY_BRICK = (new Item(80)).a(6, 1).a("brick");
+    public static Item CLAY_BALL = (new Item(81)).a(9, 3).a("clay");
+    public static Item SUGAR_CANE = (new ItemReed(82, Block.SUGAR_CANE_BLOCK)).a(11, 1).a("reeds");
+    public static Item PAPER = (new Item(83)).a(10, 3).a("paper");
+    public static Item BOOK = (new Item(84)).a(11, 3).a("book");
+    public static Item SLIME_BALL = (new Item(85)).a(14, 1).a("slimeball");
+    public static Item STORAGE_MINECART = (new ItemMinecart(86, 1)).a(7, 9).a("minecartChest");
+    public static Item POWERED_MINECART = (new ItemMinecart(87, 2)).a(7, 10).a("minecartFurnace");
+    public static Item EGG = (new ItemEgg(88)).a(12, 0).a("egg");
+    public static Item COMPASS = (new Item(89)).a(6, 3).a("compass");
+    public static Item FISHING_ROD = (new ItemFishingRod(90)).a(5, 4).a("fishingRod");
+    public static Item WATCH = (new Item(91)).a(6, 4).a("clock");
+    public static Item GLOWSTONE_DUST = (new Item(92)).a(9, 4).a("yellowDust");
+    public static Item RAW_FISH = (new ItemFood(93, 2, false)).a(9, 5).a("fishRaw");
+    public static Item COOKED_FISH = (new ItemFood(94, 5, false)).a(10, 5).a("fishCooked");
+    public static Item INK_SACK = (new ItemDye(95)).a(14, 4).a("dyePowder");
+    public static Item BONE = (new Item(96)).a(12, 1).a("bone").g();
+    public static Item SUGAR = (new Item(97)).a(13, 0).a("sugar").g();
+    public static Item CAKE = (new ItemReed(98, Block.CAKE_BLOCK)).c(1).a(13, 1).a("cake");
+    public static Item BED = (new ItemBed(99)).c(1).a(13, 2).a("bed");
+    public static Item DIODE = (new ItemReed(100, Block.DIODE_OFF)).a(6, 5).a("diode");
+    public static Item COOKIE = (new ItemCookie(101, 1, false, 8)).a(12, 5).a("cookie");
+    public static ItemWorldMap MAP = (ItemWorldMap) (new ItemWorldMap(102)).a(12, 3).a("map");
+    public static ItemShears SHEARS = (ItemShears) (new ItemShears(103)).a(13, 5).a("shears");
+    public static Item GOLD_RECORD = (new ItemRecord(2000, "13")).a(0, 15).a("record");
+    public static Item GREEN_RECORD = (new ItemRecord(2001, "cat")).a(1, 15).a("record");
+    public final int id;
+    protected int maxStackSize = 64;
+    private int durability = 0;
+    protected int textureId;
+    protected boolean bi = false;
+    protected boolean bj = false;
+    private Item craftingResult = null;
+    private String name;
+
+    protected Item(int i) {
+        this.id = 256 + i;
+        if (byId[256 + i] != null) {
+            System.out.println("CONFLICT @ " + i);
+        }
+
+        byId[256 + i] = this;
+    }
+
+    public Item b(int i) {
+        this.textureId = i;
+        return this;
+    }
+
+    public Item c(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public Item a(int i, int j) {
+        this.textureId = i + j * 16;
+        return this;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, World world, int i, int j, int k, int l) {
+        return false;
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        return 1.0F;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean d() {
+        return this.bj;
+    }
+
+    protected Item a(boolean flag) {
+        this.bj = flag;
+        return this;
+    }
+
+    public int e() {
+        return this.durability;
+    }
+
+    protected Item d(int i) {
+        this.durability = i;
+        return this;
+    }
+
+    public boolean f() {
+        return this.durability > 0 && !this.bj;
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        return false;
+    }
+
+    public int a(Entity entity) {
+        return 1;
+    }
+
+    public boolean a(Block block) {
+        return false;
+    }
+
+    public void a(ItemStack itemstack, EntityLiving entityliving) {}
+
+    public Item g() {
+        this.bi = true;
+        return this;
+    }
+
+    public Item a(String s) {
+        this.name = "item." + s;
+        return this;
+    }
+
+    public String a() {
+        return this.name;
+    }
+
+    public Item a(Item item) {
+        if (this.maxStackSize > 1) {
+            throw new IllegalArgumentException("Max stack size must be 1 for items with crafting results");
+        } else {
+            this.craftingResult = item;
+            return this;
+        }
+    }
+
+    public Item h() {
+        return this.craftingResult;
+    }
+
+    public boolean i() {
+        return this.craftingResult != null;
+    }
+
+    public String j() {
+        return StatisticCollector.a(this.a() + ".name");
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void c(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean b() {
+        return false;
+    }
+
+    static {
+        StatisticList.c();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
new file mode 100644
index 00000000..b88dfc5c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -0,0 +1,21 @@
+package net.minecraft.server;
+
+public class ItemArmor extends Item {
+
+    private static final int[] bn = new int[] { 3, 8, 6, 3};
+    private static final int[] bo = new int[] { 11, 16, 15, 13};
+    public final int a;
+    public final int bk;
+    public final int bl;
+    public final int bm;
+
+    public ItemArmor(int i, int j, int k, int l) {
+        super(i);
+        this.a = j;
+        this.bk = l;
+        this.bm = k;
+        this.bl = bn[l];
+        this.d(bo[l] * 3 << j);
+        this.maxStackSize = 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemAxe.java b/src/main/java/net/minecraft/server/ItemAxe.java
new file mode 100644
index 00000000..72b86273
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemAxe.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public class ItemAxe extends ItemTool {
+
+    private static Block[] bk = new Block[] { Block.WOOD, Block.BOOKSHELF, Block.LOG, Block.CHEST};
+
+    protected ItemAxe(int i, EnumToolMaterial enumtoolmaterial) {
+        super(i, 3, enumtoolmaterial, bk);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/server/ItemBow.java
new file mode 100644
index 00000000..516507ad
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemBow.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public class ItemBow extends Item {
+
+    public ItemBow(int i) {
+        super(i);
+        this.maxStackSize = 1;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        if (entityhuman.inventory.b(Item.ARROW.id)) {
+            world.makeSound(entityhuman, "random.bow", 1.0F, 1.0F / (b.nextFloat() * 0.4F + 0.8F));
+            if (!world.isStatic) {
+                world.addEntity(new EntityArrow(world, entityhuman));
+            }
+        }
+
+        return itemstack;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemCloth.java b/src/main/java/net/minecraft/server/ItemCloth.java
new file mode 100644
index 00000000..a27cf950
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemCloth.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemCloth extends ItemBlock {
+
+    public ItemCloth(int i) {
+        super(i);
+        this.d(0);
+        this.a(true);
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemCoal.java b/src/main/java/net/minecraft/server/ItemCoal.java
new file mode 100644
index 00000000..587e7ab4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemCoal.java
@@ -0,0 +1,10 @@
+package net.minecraft.server;
+
+public class ItemCoal extends Item {
+
+    public ItemCoal(int i) {
+        super(i);
+        this.a(true);
+        this.d(0);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemCookie.java b/src/main/java/net/minecraft/server/ItemCookie.java
new file mode 100644
index 00000000..69a7fd64
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemCookie.java
@@ -0,0 +1,9 @@
+package net.minecraft.server;
+
+public class ItemCookie extends ItemFood {
+
+    public ItemCookie(int i, int j, boolean flag, int k) {
+        super(i, j, flag);
+        this.maxStackSize = k;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/server/ItemDye.java
new file mode 100644
index 00000000..5b87a6dd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemDye.java
@@ -0,0 +1,85 @@
+package net.minecraft.server;
+
+public class ItemDye extends Item {
+
+    public static final String[] a = new String[] { "black", "red", "green", "brown", "blue", "purple", "cyan", "silver", "gray", "pink", "lime", "yellow", "lightBlue", "magenta", "orange", "white"};
+    public static final int[] bk = new int[] { 1973019, 11743532, 3887386, 5320730, 2437522, 8073150, 2651799, 2651799, 4408131, 14188952, 4312372, 14602026, 6719955, 12801229, 15435844, 15790320};
+
+    public ItemDye(int i) {
+        super(i);
+        this.a(true);
+        this.d(0);
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, World world, int i, int j, int k, int l) {
+        if (itemstack.getData() == 15) {
+            int i1 = world.getTypeId(i, j, k);
+
+            if (i1 == Block.SAPLING.id) {
+                if (!world.isStatic) {
+                    ((BlockSapling) Block.SAPLING).b(world, i, j, k, world.random);
+                    --itemstack.count;
+                }
+
+                return true;
+            }
+
+            if (i1 == Block.CROPS.id) {
+                if (!world.isStatic) {
+                    ((BlockCrops) Block.CROPS).d_(world, i, j, k);
+                    --itemstack.count;
+                }
+
+                return true;
+            }
+
+            if (i1 == Block.GRASS.id) {
+                if (!world.isStatic) {
+                    --itemstack.count;
+
+                    label53:
+                    for (int j1 = 0; j1 < 128; ++j1) {
+                        int k1 = i;
+                        int l1 = j + 1;
+                        int i2 = k;
+
+                        for (int j2 = 0; j2 < j1 / 16; ++j2) {
+                            k1 += b.nextInt(3) - 1;
+                            l1 += (b.nextInt(3) - 1) * b.nextInt(3) / 2;
+                            i2 += b.nextInt(3) - 1;
+                            if (world.getTypeId(k1, l1 - 1, i2) != Block.GRASS.id || world.e(k1, l1, i2)) {
+                                continue label53;
+                            }
+                        }
+
+                        if (world.getTypeId(k1, l1, i2) == 0) {
+                            if (b.nextInt(10) != 0) {
+                                world.setTypeIdAndData(k1, l1, i2, Block.LONG_GRASS.id, 1);
+                            } else if (b.nextInt(3) != 0) {
+                                world.setTypeId(k1, l1, i2, Block.YELLOW_FLOWER.id);
+                            } else {
+                                world.setTypeId(k1, l1, i2, Block.RED_ROSE.id);
+                            }
+                        }
+                    }
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public void a(ItemStack itemstack, EntityLiving entityliving) {
+        if (entityliving instanceof EntitySheep) {
+            EntitySheep entitysheep = (EntitySheep) entityliving;
+            int i = BlockCloth.c(itemstack.getData());
+
+            if (!entitysheep.isSheared() && entitysheep.getColor() != i) {
+                entitysheep.setColor(i);
+                --itemstack.count;
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemEgg.java b/src/main/java/net/minecraft/server/ItemEgg.java
new file mode 100644
index 00000000..0591f44c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemEgg.java
@@ -0,0 +1,19 @@
+package net.minecraft.server;
+
+public class ItemEgg extends Item {
+
+    public ItemEgg(int i) {
+        super(i);
+        this.maxStackSize = 16;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        --itemstack.count;
+        world.makeSound(entityhuman, "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
+        if (!world.isStatic) {
+            world.addEntity(new EntityEgg(world, entityhuman));
+        }
+
+        return itemstack;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemFood.java b/src/main/java/net/minecraft/server/ItemFood.java
new file mode 100644
index 00000000..e40cf541
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemFood.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class ItemFood extends Item {
+
+    private int a;
+    private boolean bk;
+
+    public ItemFood(int i, int j, boolean flag) {
+        super(i);
+        this.a = j;
+        this.bk = flag;
+        this.maxStackSize = 1;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        --itemstack.count;
+        entityhuman.b(this.a);
+        return itemstack;
+    }
+
+    public int k() {
+        return this.a;
+    }
+
+    public boolean l() {
+        return this.bk;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemLeaves.java b/src/main/java/net/minecraft/server/ItemLeaves.java
new file mode 100644
index 00000000..5b3f6a53
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemLeaves.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemLeaves extends ItemBlock {
+
+    public ItemLeaves(int i) {
+        super(i);
+        this.d(0);
+        this.a(true);
+    }
+
+    public int filterData(int i) {
+        return i | 8;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemLog.java b/src/main/java/net/minecraft/server/ItemLog.java
new file mode 100644
index 00000000..ba933fa9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemLog.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemLog extends ItemBlock {
+
+    public ItemLog(int i) {
+        super(i);
+        this.d(0);
+        this.a(true);
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemPickaxe.java b/src/main/java/net/minecraft/server/ItemPickaxe.java
new file mode 100644
index 00000000..8c51b368
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemPickaxe.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemPickaxe extends ItemTool {
+
+    private static Block[] bk = new Block[] { Block.COBBLESTONE, Block.DOUBLE_STEP, Block.STEP, Block.STONE, Block.SANDSTONE, Block.MOSSY_COBBLESTONE, Block.IRON_ORE, Block.IRON_BLOCK, Block.COAL_ORE, Block.GOLD_BLOCK, Block.GOLD_ORE, Block.DIAMOND_ORE, Block.DIAMOND_BLOCK, Block.ICE, Block.NETHERRACK, Block.LAPIS_ORE, Block.LAPIS_BLOCK};
+
+    protected ItemPickaxe(int i, EnumToolMaterial enumtoolmaterial) {
+        super(i, 2, enumtoolmaterial, bk);
+    }
+
+    public boolean a(Block block) {
+        return block == Block.OBSIDIAN ? this.a.d() == 3 : (block != Block.DIAMOND_BLOCK && block != Block.DIAMOND_ORE ? (block != Block.GOLD_BLOCK && block != Block.GOLD_ORE ? (block != Block.IRON_BLOCK && block != Block.IRON_ORE ? (block != Block.LAPIS_BLOCK && block != Block.LAPIS_ORE ? (block != Block.REDSTONE_ORE && block != Block.GLOWING_REDSTONE_ORE ? (block.material == Material.STONE ? true : block.material == Material.ORE) : this.a.d() >= 2) : this.a.d() >= 1) : this.a.d() >= 1) : this.a.d() >= 2) : this.a.d() >= 2);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemPiston.java b/src/main/java/net/minecraft/server/ItemPiston.java
new file mode 100644
index 00000000..e94826eb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemPiston.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class ItemPiston extends ItemBlock {
+
+    public ItemPiston(int i) {
+        super(i);
+    }
+
+    public int filterData(int i) {
+        return 7;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
new file mode 100644
index 00000000..8fc7615d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+public class ItemRecord extends Item {
+
+    public final String a;
+
+    protected ItemRecord(int i, String s) {
+        super(i);
+        this.a = s;
+        this.maxStackSize = 1;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, World world, int i, int j, int k, int l) {
+        if (world.getTypeId(i, j, k) == Block.JUKEBOX.id && world.getData(i, j, k) == 0) {
+            if (world.isStatic) {
+                return true;
+            } else {
+                ((BlockJukeBox) Block.JUKEBOX).f(world, i, j, k, this.id);
+                world.a((EntityHuman) null, 1005, i, j, k, this.id);
+                --itemstack.count;
+                return true;
+            }
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSaddle.java b/src/main/java/net/minecraft/server/ItemSaddle.java
new file mode 100644
index 00000000..eefbfaac
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSaddle.java
@@ -0,0 +1,25 @@
+package net.minecraft.server;
+
+public class ItemSaddle extends Item {
+
+    public ItemSaddle(int i) {
+        super(i);
+        this.maxStackSize = 1;
+    }
+
+    public void a(ItemStack itemstack, EntityLiving entityliving) {
+        if (entityliving instanceof EntityPig) {
+            EntityPig entitypig = (EntityPig) entityliving;
+
+            if (!entitypig.hasSaddle()) {
+                entitypig.setSaddle(true);
+                --itemstack.count;
+            }
+        }
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        this.a(itemstack, entityliving);
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSapling.java b/src/main/java/net/minecraft/server/ItemSapling.java
new file mode 100644
index 00000000..523afb1f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSapling.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemSapling extends ItemBlock {
+
+    public ItemSapling(int i) {
+        super(i);
+        this.d(0);
+        this.a(true);
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemShears.java b/src/main/java/net/minecraft/server/ItemShears.java
new file mode 100644
index 00000000..87d4f085
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemShears.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+public class ItemShears extends Item {
+
+    public ItemShears(int i) {
+        super(i);
+        this.c(1);
+        this.d(238);
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        if (i == Block.LEAVES.id || i == Block.WEB.id) {
+            itemstack.damage(1, entityliving);
+        }
+
+        return super.a(itemstack, i, j, k, l, entityliving);
+    }
+
+    public boolean a(Block block) {
+        return block.id == Block.WEB.id;
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        return block.id != Block.WEB.id && block.id != Block.LEAVES.id ? (block.id == Block.WOOL.id ? 5.0F : super.a(itemstack, block)) : 15.0F;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/server/ItemSnowball.java
new file mode 100644
index 00000000..7c230e46
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSnowball.java
@@ -0,0 +1,19 @@
+package net.minecraft.server;
+
+public class ItemSnowball extends Item {
+
+    public ItemSnowball(int i) {
+        super(i);
+        this.maxStackSize = 16;
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        --itemstack.count;
+        world.makeSound(entityhuman, "random.bow", 0.5F, 0.4F / (b.nextFloat() * 0.4F + 0.8F));
+        if (!world.isStatic) {
+            world.addEntity(new EntitySnowball(world, entityhuman));
+        }
+
+        return itemstack;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSoup.java b/src/main/java/net/minecraft/server/ItemSoup.java
new file mode 100644
index 00000000..94089fbc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSoup.java
@@ -0,0 +1,13 @@
+package net.minecraft.server;
+
+public class ItemSoup extends ItemFood {
+
+    public ItemSoup(int i, int j) {
+        super(i, j, false);
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        super.a(itemstack, world, entityhuman);
+        return new ItemStack(Item.BOWL);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSpade.java b/src/main/java/net/minecraft/server/ItemSpade.java
new file mode 100644
index 00000000..ccd0c60a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSpade.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemSpade extends ItemTool {
+
+    private static Block[] bk = new Block[] { Block.GRASS, Block.DIRT, Block.SAND, Block.GRAVEL, Block.SNOW, Block.SNOW_BLOCK, Block.CLAY, Block.SOIL};
+
+    public ItemSpade(int i, EnumToolMaterial enumtoolmaterial) {
+        super(i, 1, enumtoolmaterial, bk);
+    }
+
+    public boolean a(Block block) {
+        return block == Block.SNOW ? true : block == Block.SNOW_BLOCK;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemStep.java b/src/main/java/net/minecraft/server/ItemStep.java
new file mode 100644
index 00000000..dde71dac
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemStep.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+public class ItemStep extends ItemBlock {
+
+    public ItemStep(int i) {
+        super(i);
+        this.d(0);
+        this.a(true);
+    }
+
+    public int filterData(int i) {
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemSword.java b/src/main/java/net/minecraft/server/ItemSword.java
new file mode 100644
index 00000000..4c47bfdd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemSword.java
@@ -0,0 +1,35 @@
+package net.minecraft.server;
+
+public class ItemSword extends Item {
+
+    private int a;
+
+    public ItemSword(int i, EnumToolMaterial enumtoolmaterial) {
+        super(i);
+        this.maxStackSize = 1;
+        this.d(enumtoolmaterial.a());
+        this.a = 4 + enumtoolmaterial.c() * 2;
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        return block.id == Block.WEB.id ? 15.0F : 1.5F;
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        itemstack.damage(1, entityliving1);
+        return true;
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        itemstack.damage(2, entityliving);
+        return true;
+    }
+
+    public int a(Entity entity) {
+        return this.a;
+    }
+
+    public boolean a(Block block) {
+        return block.id == Block.WEB.id;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemTool.java b/src/main/java/net/minecraft/server/ItemTool.java
new file mode 100644
index 00000000..a33e75e1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemTool.java
@@ -0,0 +1,43 @@
+package net.minecraft.server;
+
+public class ItemTool extends Item {
+
+    private Block[] bk;
+    private float bl = 4.0F;
+    private int bm;
+    protected EnumToolMaterial a;
+
+    protected ItemTool(int i, int j, EnumToolMaterial enumtoolmaterial, Block[] ablock) {
+        super(i);
+        this.a = enumtoolmaterial;
+        this.bk = ablock;
+        this.maxStackSize = 1;
+        this.d(enumtoolmaterial.a());
+        this.bl = enumtoolmaterial.b();
+        this.bm = j + enumtoolmaterial.c();
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        for (int i = 0; i < this.bk.length; ++i) {
+            if (this.bk[i] == block) {
+                return this.bl;
+            }
+        }
+
+        return 1.0F;
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        itemstack.damage(2, entityliving1);
+        return true;
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        itemstack.damage(1, entityliving);
+        return true;
+    }
+
+    public int a(Entity entity) {
+        return this.bm;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemWorldMapBase.java b/src/main/java/net/minecraft/server/ItemWorldMapBase.java
new file mode 100644
index 00000000..aa3f6656
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemWorldMapBase.java
@@ -0,0 +1,16 @@
+package net.minecraft.server;
+
+public class ItemWorldMapBase extends Item {
+
+    protected ItemWorldMapBase(int i) {
+        super(i);
+    }
+
+    public boolean b() {
+        return true;
+    }
+
+    public Packet b(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        return null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MapGenBase.java b/src/main/java/net/minecraft/server/MapGenBase.java
new file mode 100644
index 00000000..54bb5ce5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MapGenBase.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class MapGenBase {
+
+    protected int a = 8;
+    protected Random b = new Random();
+
+    public MapGenBase() {}
+
+    public void a(IChunkProvider ichunkprovider, World world, int i, int j, byte[] abyte) {
+        int k = this.a;
+
+        this.b.setSeed(world.getSeed());
+        long l = this.b.nextLong() / 2L * 2L + 1L;
+        long i1 = this.b.nextLong() / 2L * 2L + 1L;
+
+        for (int j1 = i - k; j1 <= i + k; ++j1) {
+            for (int k1 = j - k; k1 <= j + k; ++k1) {
+                this.b.setSeed((long) j1 * l + (long) k1 * i1 ^ world.getSeed());
+                this.a(world, j1, k1, i, j, abyte);
+            }
+        }
+    }
+
+    protected void a(World world, int i, int j, int k, int l, byte[] abyte) {}
+}
diff --git a/src/main/java/net/minecraft/server/MapGenCaves.java b/src/main/java/net/minecraft/server/MapGenCaves.java
new file mode 100644
index 00000000..5a25b1d1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MapGenCaves.java
@@ -0,0 +1,200 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class MapGenCaves extends MapGenBase {
+
+    public MapGenCaves() {}
+
+    protected void a(int i, int j, byte[] abyte, double d0, double d1, double d2) {
+        this.a(i, j, abyte, d0, d1, d2, 1.0F + this.b.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+    }
+
+    protected void a(int i, int j, byte[] abyte, double d0, double d1, double d2, float f, float f1, float f2, int k, int l, double d3) {
+        double d4 = (double) (i * 16 + 8);
+        double d5 = (double) (j * 16 + 8);
+        float f3 = 0.0F;
+        float f4 = 0.0F;
+        Random random = new Random(this.b.nextLong());
+
+        if (l <= 0) {
+            int i1 = this.a * 16 - 16;
+
+            l = i1 - random.nextInt(i1 / 4);
+        }
+
+        boolean flag = false;
+
+        if (k == -1) {
+            k = l / 2;
+            flag = true;
+        }
+
+        int j1 = random.nextInt(l / 2) + l / 4;
+
+        for (boolean flag1 = random.nextInt(6) == 0; k < l; ++k) {
+            double d6 = 1.5D + (double) (MathHelper.sin((float) k * 3.1415927F / (float) l) * f * 1.0F);
+            double d7 = d6 * d3;
+            float f5 = MathHelper.cos(f2);
+            float f6 = MathHelper.sin(f2);
+
+            d0 += (double) (MathHelper.cos(f1) * f5);
+            d1 += (double) f6;
+            d2 += (double) (MathHelper.sin(f1) * f5);
+            if (flag1) {
+                f2 *= 0.92F;
+            } else {
+                f2 *= 0.7F;
+            }
+
+            f2 += f4 * 0.1F;
+            f1 += f3 * 0.1F;
+            f4 *= 0.9F;
+            f3 *= 0.75F;
+            f4 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 2.0F;
+            f3 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 4.0F;
+            if (!flag && k == j1 && f > 1.0F) {
+                this.a(i, j, abyte, d0, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 - 1.5707964F, f2 / 3.0F, k, l, 1.0D);
+                this.a(i, j, abyte, d0, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 + 1.5707964F, f2 / 3.0F, k, l, 1.0D);
+                return;
+            }
+
+            if (flag || random.nextInt(4) != 0) {
+                double d8 = d0 - d4;
+                double d9 = d2 - d5;
+                double d10 = (double) (l - k);
+                double d11 = (double) (f + 2.0F + 16.0F);
+
+                if (d8 * d8 + d9 * d9 - d10 * d10 > d11 * d11) {
+                    return;
+                }
+
+                if (d0 >= d4 - 16.0D - d6 * 2.0D && d2 >= d5 - 16.0D - d6 * 2.0D && d0 <= d4 + 16.0D + d6 * 2.0D && d2 <= d5 + 16.0D + d6 * 2.0D) {
+                    int k1 = MathHelper.floor(d0 - d6) - i * 16 - 1;
+                    int l1 = MathHelper.floor(d0 + d6) - i * 16 + 1;
+                    int i2 = MathHelper.floor(d1 - d7) - 1;
+                    int j2 = MathHelper.floor(d1 + d7) + 1;
+                    int k2 = MathHelper.floor(d2 - d6) - j * 16 - 1;
+                    int l2 = MathHelper.floor(d2 + d6) - j * 16 + 1;
+
+                    if (k1 < 0) {
+                        k1 = 0;
+                    }
+
+                    if (l1 > 16) {
+                        l1 = 16;
+                    }
+
+                    if (i2 < 1) {
+                        i2 = 1;
+                    }
+
+                    if (j2 > 120) {
+                        j2 = 120;
+                    }
+
+                    if (k2 < 0) {
+                        k2 = 0;
+                    }
+
+                    if (l2 > 16) {
+                        l2 = 16;
+                    }
+
+                    boolean flag2 = false;
+
+                    int i3;
+                    int j3;
+
+                    for (j3 = k1; !flag2 && j3 < l1; ++j3) {
+                        for (int k3 = k2; !flag2 && k3 < l2; ++k3) {
+                            for (int l3 = j2 + 1; !flag2 && l3 >= i2 - 1; --l3) {
+                                i3 = (j3 * 16 + k3) * 128 + l3;
+                                if (l3 >= 0 && l3 < 128) {
+                                    if (abyte[i3] == Block.WATER.id || abyte[i3] == Block.STATIONARY_WATER.id) {
+                                        flag2 = true;
+                                    }
+
+                                    if (l3 != i2 - 1 && j3 != k1 && j3 != l1 - 1 && k3 != k2 && k3 != l2 - 1) {
+                                        l3 = i2;
+                                    }
+                                }
+                            }
+                        }
+                    }
+
+                    if (!flag2) {
+                        for (j3 = k1; j3 < l1; ++j3) {
+                            double d12 = ((double) (j3 + i * 16) + 0.5D - d0) / d6;
+
+                            for (i3 = k2; i3 < l2; ++i3) {
+                                double d13 = ((double) (i3 + j * 16) + 0.5D - d2) / d6;
+                                int i4 = (j3 * 16 + i3) * 128 + j2;
+                                boolean flag3 = false;
+
+                                if (d12 * d12 + d13 * d13 < 1.0D) {
+                                    for (int j4 = j2 - 1; j4 >= i2; --j4) {
+                                        double d14 = ((double) j4 + 0.5D - d1) / d7;
+
+                                        if (d14 > -0.7D && d12 * d12 + d14 * d14 + d13 * d13 < 1.0D) {
+                                            byte b0 = abyte[i4];
+
+                                            if (b0 == Block.GRASS.id) {
+                                                flag3 = true;
+                                            }
+
+                                            if (b0 == Block.STONE.id || b0 == Block.DIRT.id || b0 == Block.GRASS.id) {
+                                                if (j4 < 10) {
+                                                    abyte[i4] = (byte) Block.LAVA.id;
+                                                } else {
+                                                    abyte[i4] = 0;
+                                                    if (flag3 && abyte[i4 - 1] == Block.DIRT.id) {
+                                                        abyte[i4 - 1] = (byte) Block.GRASS.id;
+                                                    }
+                                                }
+                                            }
+                                        }
+
+                                        --i4;
+                                    }
+                                }
+                            }
+                        }
+
+                        if (flag) {
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    protected void a(World world, int i, int j, int k, int l, byte[] abyte) {
+        int i1 = this.b.nextInt(this.b.nextInt(this.b.nextInt(40) + 1) + 1);
+
+        if (this.b.nextInt(15) != 0) {
+            i1 = 0;
+        }
+
+        for (int j1 = 0; j1 < i1; ++j1) {
+            double d0 = (double) (i * 16 + this.b.nextInt(16));
+            double d1 = (double) this.b.nextInt(this.b.nextInt(120) + 8);
+            double d2 = (double) (j * 16 + this.b.nextInt(16));
+            int k1 = 1;
+
+            if (this.b.nextInt(4) == 0) {
+                this.a(k, l, abyte, d0, d1, d2);
+                k1 += this.b.nextInt(4);
+            }
+
+            for (int l1 = 0; l1 < k1; ++l1) {
+                float f = this.b.nextFloat() * 3.1415927F * 2.0F;
+                float f1 = (this.b.nextFloat() - 0.5F) * 2.0F / 8.0F;
+                float f2 = this.b.nextFloat() * 2.0F + this.b.nextFloat();
+
+                this.a(k, l, abyte, d0, d1, d2, f2, f, f1, 0, 0, 1.0D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MapGenCavesHell.java b/src/main/java/net/minecraft/server/MapGenCavesHell.java
new file mode 100644
index 00000000..37d55d95
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MapGenCavesHell.java
@@ -0,0 +1,186 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class MapGenCavesHell extends MapGenBase {
+
+    public MapGenCavesHell() {}
+
+    protected void a(int i, int j, byte[] abyte, double d0, double d1, double d2) {
+        this.a(i, j, abyte, d0, d1, d2, 1.0F + this.b.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+    }
+
+    protected void a(int i, int j, byte[] abyte, double d0, double d1, double d2, float f, float f1, float f2, int k, int l, double d3) {
+        double d4 = (double) (i * 16 + 8);
+        double d5 = (double) (j * 16 + 8);
+        float f3 = 0.0F;
+        float f4 = 0.0F;
+        Random random = new Random(this.b.nextLong());
+
+        if (l <= 0) {
+            int i1 = this.a * 16 - 16;
+
+            l = i1 - random.nextInt(i1 / 4);
+        }
+
+        boolean flag = false;
+
+        if (k == -1) {
+            k = l / 2;
+            flag = true;
+        }
+
+        int j1 = random.nextInt(l / 2) + l / 4;
+
+        for (boolean flag1 = random.nextInt(6) == 0; k < l; ++k) {
+            double d6 = 1.5D + (double) (MathHelper.sin((float) k * 3.1415927F / (float) l) * f * 1.0F);
+            double d7 = d6 * d3;
+            float f5 = MathHelper.cos(f2);
+            float f6 = MathHelper.sin(f2);
+
+            d0 += (double) (MathHelper.cos(f1) * f5);
+            d1 += (double) f6;
+            d2 += (double) (MathHelper.sin(f1) * f5);
+            if (flag1) {
+                f2 *= 0.92F;
+            } else {
+                f2 *= 0.7F;
+            }
+
+            f2 += f4 * 0.1F;
+            f1 += f3 * 0.1F;
+            f4 *= 0.9F;
+            f3 *= 0.75F;
+            f4 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 2.0F;
+            f3 += (random.nextFloat() - random.nextFloat()) * random.nextFloat() * 4.0F;
+            if (!flag && k == j1 && f > 1.0F) {
+                this.a(i, j, abyte, d0, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 - 1.5707964F, f2 / 3.0F, k, l, 1.0D);
+                this.a(i, j, abyte, d0, d1, d2, random.nextFloat() * 0.5F + 0.5F, f1 + 1.5707964F, f2 / 3.0F, k, l, 1.0D);
+                return;
+            }
+
+            if (flag || random.nextInt(4) != 0) {
+                double d8 = d0 - d4;
+                double d9 = d2 - d5;
+                double d10 = (double) (l - k);
+                double d11 = (double) (f + 2.0F + 16.0F);
+
+                if (d8 * d8 + d9 * d9 - d10 * d10 > d11 * d11) {
+                    return;
+                }
+
+                if (d0 >= d4 - 16.0D - d6 * 2.0D && d2 >= d5 - 16.0D - d6 * 2.0D && d0 <= d4 + 16.0D + d6 * 2.0D && d2 <= d5 + 16.0D + d6 * 2.0D) {
+                    int k1 = MathHelper.floor(d0 - d6) - i * 16 - 1;
+                    int l1 = MathHelper.floor(d0 + d6) - i * 16 + 1;
+                    int i2 = MathHelper.floor(d1 - d7) - 1;
+                    int j2 = MathHelper.floor(d1 + d7) + 1;
+                    int k2 = MathHelper.floor(d2 - d6) - j * 16 - 1;
+                    int l2 = MathHelper.floor(d2 + d6) - j * 16 + 1;
+
+                    if (k1 < 0) {
+                        k1 = 0;
+                    }
+
+                    if (l1 > 16) {
+                        l1 = 16;
+                    }
+
+                    if (i2 < 1) {
+                        i2 = 1;
+                    }
+
+                    if (j2 > 120) {
+                        j2 = 120;
+                    }
+
+                    if (k2 < 0) {
+                        k2 = 0;
+                    }
+
+                    if (l2 > 16) {
+                        l2 = 16;
+                    }
+
+                    boolean flag2 = false;
+
+                    int i3;
+                    int j3;
+
+                    for (j3 = k1; !flag2 && j3 < l1; ++j3) {
+                        for (int k3 = k2; !flag2 && k3 < l2; ++k3) {
+                            for (int l3 = j2 + 1; !flag2 && l3 >= i2 - 1; --l3) {
+                                i3 = (j3 * 16 + k3) * 128 + l3;
+                                if (l3 >= 0 && l3 < 128) {
+                                    if (abyte[i3] == Block.LAVA.id || abyte[i3] == Block.STATIONARY_LAVA.id) {
+                                        flag2 = true;
+                                    }
+
+                                    if (l3 != i2 - 1 && j3 != k1 && j3 != l1 - 1 && k3 != k2 && k3 != l2 - 1) {
+                                        l3 = i2;
+                                    }
+                                }
+                            }
+                        }
+                    }
+
+                    if (!flag2) {
+                        for (j3 = k1; j3 < l1; ++j3) {
+                            double d12 = ((double) (j3 + i * 16) + 0.5D - d0) / d6;
+
+                            for (i3 = k2; i3 < l2; ++i3) {
+                                double d13 = ((double) (i3 + j * 16) + 0.5D - d2) / d6;
+                                int i4 = (j3 * 16 + i3) * 128 + j2;
+
+                                for (int j4 = j2 - 1; j4 >= i2; --j4) {
+                                    double d14 = ((double) j4 + 0.5D - d1) / d7;
+
+                                    if (d14 > -0.7D && d12 * d12 + d14 * d14 + d13 * d13 < 1.0D) {
+                                        byte b0 = abyte[i4];
+
+                                        if (b0 == Block.NETHERRACK.id || b0 == Block.DIRT.id || b0 == Block.GRASS.id) {
+                                            abyte[i4] = 0;
+                                        }
+                                    }
+
+                                    --i4;
+                                }
+                            }
+                        }
+
+                        if (flag) {
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    protected void a(World world, int i, int j, int k, int l, byte[] abyte) {
+        int i1 = this.b.nextInt(this.b.nextInt(this.b.nextInt(10) + 1) + 1);
+
+        if (this.b.nextInt(5) != 0) {
+            i1 = 0;
+        }
+
+        for (int j1 = 0; j1 < i1; ++j1) {
+            double d0 = (double) (i * 16 + this.b.nextInt(16));
+            double d1 = (double) this.b.nextInt(128);
+            double d2 = (double) (j * 16 + this.b.nextInt(16));
+            int k1 = 1;
+
+            if (this.b.nextInt(4) == 0) {
+                this.a(k, l, abyte, d0, d1, d2);
+                k1 += this.b.nextInt(4);
+            }
+
+            for (int l1 = 0; l1 < k1; ++l1) {
+                float f = this.b.nextFloat() * 3.1415927F * 2.0F;
+                float f1 = (this.b.nextFloat() - 0.5F) * 2.0F / 8.0F;
+                float f2 = this.b.nextFloat() * 2.0F + this.b.nextFloat();
+
+                this.a(k, l, abyte, d0, d1, d2, f2 * 2.0F, f, f1, 0, 0, 0.5D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Material.java b/src/main/java/net/minecraft/server/Material.java
new file mode 100644
index 00000000..d525b3d9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Material.java
@@ -0,0 +1,109 @@
+package net.minecraft.server;
+
+public class Material {
+
+    public static final Material AIR = new MaterialTransparent(MaterialMapColor.b);
+    public static final Material GRASS = new Material(MaterialMapColor.c);
+    public static final Material EARTH = new Material(MaterialMapColor.l);
+    public static final Material WOOD = (new Material(MaterialMapColor.o)).o();
+    public static final Material STONE = (new Material(MaterialMapColor.m)).n();
+    public static final Material ORE = (new Material(MaterialMapColor.h)).n();
+    public static final Material WATER = (new MaterialLiquid(MaterialMapColor.n)).k();
+    public static final Material LAVA = (new MaterialLiquid(MaterialMapColor.f)).k();
+    public static final Material LEAVES = (new Material(MaterialMapColor.i)).o().m().k();
+    public static final Material PLANT = (new MaterialLogic(MaterialMapColor.i)).k();
+    public static final Material SPONGE = new Material(MaterialMapColor.e);
+    public static final Material CLOTH = (new Material(MaterialMapColor.e)).o();
+    public static final Material FIRE = (new MaterialTransparent(MaterialMapColor.b)).k();
+    public static final Material SAND = new Material(MaterialMapColor.d);
+    public static final Material ORIENTABLE = (new MaterialLogic(MaterialMapColor.b)).k();
+    public static final Material SHATTERABLE = (new Material(MaterialMapColor.b)).m();
+    public static final Material TNT = (new Material(MaterialMapColor.f)).o().m();
+    public static final Material CORAL = (new Material(MaterialMapColor.i)).k();
+    public static final Material ICE = (new Material(MaterialMapColor.g)).m();
+    public static final Material SNOW_LAYER = (new MaterialLogic(MaterialMapColor.j)).f().m().n().k();
+    public static final Material SNOW_BLOCK = (new Material(MaterialMapColor.j)).n();
+    public static final Material CACTUS = (new Material(MaterialMapColor.i)).m().k();
+    public static final Material CLAY = new Material(MaterialMapColor.k);
+    public static final Material PUMPKIN = (new Material(MaterialMapColor.i)).k();
+    public static final Material PORTAL = (new MaterialPortal(MaterialMapColor.b)).l();
+    public static final Material CAKE = (new Material(MaterialMapColor.b)).k();
+    public static final Material WEB = (new Material(MaterialMapColor.e)).n().k();
+    public static final Material PISTON = (new Material(MaterialMapColor.m)).l();
+    private boolean canBurn;
+    private boolean E;
+    private boolean F;
+    public final MaterialMapColor C;
+    private boolean G = true;
+    private int H;
+
+    public Material(MaterialMapColor materialmapcolor) {
+        this.C = materialmapcolor;
+    }
+
+    public boolean isLiquid() {
+        return false;
+    }
+
+    public boolean isBuildable() {
+        return true;
+    }
+
+    public boolean blocksLight() {
+        return true;
+    }
+
+    public boolean isSolid() {
+        return true;
+    }
+
+    private Material m() {
+        this.F = true;
+        return this;
+    }
+
+    private Material n() {
+        this.G = false;
+        return this;
+    }
+
+    private Material o() {
+        this.canBurn = true;
+        return this;
+    }
+
+    public boolean isBurnable() {
+        return this.canBurn;
+    }
+
+    public Material f() {
+        this.E = true;
+        return this;
+    }
+
+    public boolean isReplacable() {
+        return this.E;
+    }
+
+    public boolean h() {
+        return this.F ? false : this.isSolid();
+    }
+
+    public boolean i() {
+        return this.G;
+    }
+
+    public int j() {
+        return this.H;
+    }
+
+    protected Material k() {
+        this.H = 1;
+        return this;
+    }
+
+    protected Material l() {
+        this.H = 2;
+        return this;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MaterialLiquid.java b/src/main/java/net/minecraft/server/MaterialLiquid.java
new file mode 100644
index 00000000..1670104a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MaterialLiquid.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+public class MaterialLiquid extends Material {
+
+    public MaterialLiquid(MaterialMapColor materialmapcolor) {
+        super(materialmapcolor);
+        this.f();
+        this.k();
+    }
+
+    public boolean isLiquid() {
+        return true;
+    }
+
+    public boolean isSolid() {
+        return false;
+    }
+
+    public boolean isBuildable() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MaterialLogic.java b/src/main/java/net/minecraft/server/MaterialLogic.java
new file mode 100644
index 00000000..43952d43
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MaterialLogic.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public class MaterialLogic extends Material {
+
+    public MaterialLogic(MaterialMapColor materialmapcolor) {
+        super(materialmapcolor);
+    }
+
+    public boolean isBuildable() {
+        return false;
+    }
+
+    public boolean blocksLight() {
+        return false;
+    }
+
+    public boolean isSolid() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MaterialMapColor.java b/src/main/java/net/minecraft/server/MaterialMapColor.java
new file mode 100644
index 00000000..7419aeb6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MaterialMapColor.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class MaterialMapColor {
+
+    public static final MaterialMapColor[] a = new MaterialMapColor[16];
+    public static final MaterialMapColor b = new MaterialMapColor(0, 0);
+    public static final MaterialMapColor c = new MaterialMapColor(1, 8368696);
+    public static final MaterialMapColor d = new MaterialMapColor(2, 16247203);
+    public static final MaterialMapColor e = new MaterialMapColor(3, 10987431);
+    public static final MaterialMapColor f = new MaterialMapColor(4, 16711680);
+    public static final MaterialMapColor g = new MaterialMapColor(5, 10526975);
+    public static final MaterialMapColor h = new MaterialMapColor(6, 10987431);
+    public static final MaterialMapColor i = new MaterialMapColor(7, 31744);
+    public static final MaterialMapColor j = new MaterialMapColor(8, 16777215);
+    public static final MaterialMapColor k = new MaterialMapColor(9, 10791096);
+    public static final MaterialMapColor l = new MaterialMapColor(10, 12020271);
+    public static final MaterialMapColor m = new MaterialMapColor(11, 7368816);
+    public static final MaterialMapColor n = new MaterialMapColor(12, 4210943);
+    public static final MaterialMapColor o = new MaterialMapColor(13, 6837042);
+    public final int p;
+    public final int q;
+
+    private MaterialMapColor(int i, int j) {
+        this.q = i;
+        this.p = j;
+        a[i] = this;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MaterialPortal.java b/src/main/java/net/minecraft/server/MaterialPortal.java
new file mode 100644
index 00000000..4f3ab402
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MaterialPortal.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public class MaterialPortal extends Material {
+
+    public MaterialPortal(MaterialMapColor materialmapcolor) {
+        super(materialmapcolor);
+    }
+
+    public boolean isBuildable() {
+        return false;
+    }
+
+    public boolean blocksLight() {
+        return false;
+    }
+
+    public boolean isSolid() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MaterialTransparent.java b/src/main/java/net/minecraft/server/MaterialTransparent.java
new file mode 100644
index 00000000..378cb89d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MaterialTransparent.java
@@ -0,0 +1,21 @@
+package net.minecraft.server;
+
+public class MaterialTransparent extends Material {
+
+    public MaterialTransparent(MaterialMapColor materialmapcolor) {
+        super(materialmapcolor);
+        this.f();
+    }
+
+    public boolean isBuildable() {
+        return false;
+    }
+
+    public boolean blocksLight() {
+        return false;
+    }
+
+    public boolean isSolid() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MathHelper.java b/src/main/java/net/minecraft/server/MathHelper.java
new file mode 100644
index 00000000..b152f573
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MathHelper.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+public class MathHelper {
+
+    private static float[] a = new float[65536];
+
+    public MathHelper() {}
+
+    public static final float sin(float f) {
+        return a[(int) (f * 10430.378F) & '\uffff'];
+    }
+
+    public static final float cos(float f) {
+        return a[(int) (f * 10430.378F + 16384.0F) & '\uffff'];
+    }
+
+    public static final float c(float f) {
+        return (float) Math.sqrt((double) f);
+    }
+
+    public static final float a(double d0) {
+        return (float) Math.sqrt(d0);
+    }
+
+    public static int d(float f) {
+        int i = (int) f;
+
+        return f < (float) i ? i - 1 : i;
+    }
+
+    public static int floor(double d0) {
+        int i = (int) d0;
+
+        return d0 < (double) i ? i - 1 : i;
+    }
+
+    public static float abs(float f) {
+        return f >= 0.0F ? f : -f;
+    }
+
+    public static double a(double d0, double d1) {
+        if (d0 < 0.0D) {
+            d0 = -d0;
+        }
+
+        if (d1 < 0.0D) {
+            d1 = -d1;
+        }
+
+        return d0 > d1 ? d0 : d1;
+    }
+
+    static {
+        for (int i = 0; i < 65536; ++i) {
+            a[i] = (float) Math.sin((double) i * 3.141592653589793D * 2.0D / 65536.0D);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MetadataChunkBlock.java b/src/main/java/net/minecraft/server/MetadataChunkBlock.java
new file mode 100644
index 00000000..17cd4069
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MetadataChunkBlock.java
@@ -0,0 +1,217 @@
+package net.minecraft.server;
+
+public class MetadataChunkBlock {
+
+    public final EnumSkyBlock a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+    public int f;
+    public int g;
+
+    public MetadataChunkBlock(EnumSkyBlock enumskyblock, int i, int j, int k, int l, int i1, int j1) {
+        this.a = enumskyblock;
+        this.b = i;
+        this.c = j;
+        this.d = k;
+        this.e = l;
+        this.f = i1;
+        this.g = j1;
+    }
+
+    public void a(World world) {
+        int i = this.e - this.b + 1;
+        int j = this.f - this.c + 1;
+        int k = this.g - this.d + 1;
+        int l = i * j * k;
+
+        if (l > '\u8000') {
+            System.out.println("Light too large, skipping!");
+        } else {
+            int i1 = 0;
+            int j1 = 0;
+            boolean flag = false;
+            boolean flag1 = false;
+
+            for (int k1 = this.b; k1 <= this.e; ++k1) {
+                for (int l1 = this.d; l1 <= this.g; ++l1) {
+                    int i2 = k1 >> 4;
+                    int j2 = l1 >> 4;
+                    boolean flag2 = false;
+
+                    if (flag && i2 == i1 && j2 == j1) {
+                        flag2 = flag1;
+                    } else {
+                        flag2 = world.areChunksLoaded(k1, 0, l1, 1);
+                        if (flag2) {
+                            Chunk chunk = world.getChunkAt(k1 >> 4, l1 >> 4);
+
+                            if (chunk.isEmpty()) {
+                                flag2 = false;
+                            }
+                        }
+
+                        flag1 = flag2;
+                        i1 = i2;
+                        j1 = j2;
+                    }
+
+                    if (flag2) {
+                        if (this.c < 0) {
+                            this.c = 0;
+                        }
+
+                        if (this.f >= 128) {
+                            this.f = 127;
+                        }
+
+                        for (int k2 = this.c; k2 <= this.f; ++k2) {
+                            int l2 = world.a(this.a, k1, k2, l1);
+                            boolean flag3 = false;
+                            int i3 = world.getTypeId(k1, k2, l1);
+                            int j3 = Block.q[i3];
+
+                            if (j3 == 0) {
+                                j3 = 1;
+                            }
+
+                            int k3 = 0;
+
+                            if (this.a == EnumSkyBlock.SKY) {
+                                if (world.m(k1, k2, l1)) {
+                                    k3 = 15;
+                                }
+                            } else if (this.a == EnumSkyBlock.BLOCK) {
+                                k3 = Block.s[i3];
+                            }
+
+                            int l3;
+                            int i4;
+
+                            if (j3 >= 15 && k3 == 0) {
+                                i4 = 0;
+                            } else {
+                                l3 = world.a(this.a, k1 - 1, k2, l1);
+                                int j4 = world.a(this.a, k1 + 1, k2, l1);
+                                int k4 = world.a(this.a, k1, k2 - 1, l1);
+                                int l4 = world.a(this.a, k1, k2 + 1, l1);
+                                int i5 = world.a(this.a, k1, k2, l1 - 1);
+                                int j5 = world.a(this.a, k1, k2, l1 + 1);
+
+                                i4 = l3;
+                                if (j4 > l3) {
+                                    i4 = j4;
+                                }
+
+                                if (k4 > i4) {
+                                    i4 = k4;
+                                }
+
+                                if (l4 > i4) {
+                                    i4 = l4;
+                                }
+
+                                if (i5 > i4) {
+                                    i4 = i5;
+                                }
+
+                                if (j5 > i4) {
+                                    i4 = j5;
+                                }
+
+                                i4 -= j3;
+                                if (i4 < 0) {
+                                    i4 = 0;
+                                }
+
+                                if (k3 > i4) {
+                                    i4 = k3;
+                                }
+                            }
+
+                            if (l2 != i4) {
+                                world.b(this.a, k1, k2, l1, i4);
+                                l3 = i4 - 1;
+                                if (l3 < 0) {
+                                    l3 = 0;
+                                }
+
+                                world.a(this.a, k1 - 1, k2, l1, l3);
+                                world.a(this.a, k1, k2 - 1, l1, l3);
+                                world.a(this.a, k1, k2, l1 - 1, l3);
+                                if (k1 + 1 >= this.e) {
+                                    world.a(this.a, k1 + 1, k2, l1, l3);
+                                }
+
+                                if (k2 + 1 >= this.f) {
+                                    world.a(this.a, k1, k2 + 1, l1, l3);
+                                }
+
+                                if (l1 + 1 >= this.g) {
+                                    world.a(this.a, k1, k2, l1 + 1, l3);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    public boolean a(int i, int j, int k, int l, int i1, int j1) {
+        if (i >= this.b && j >= this.c && k >= this.d && l <= this.e && i1 <= this.f && j1 <= this.g) {
+            return true;
+        } else {
+            byte b0 = 1;
+
+            if (i >= this.b - b0 && j >= this.c - b0 && k >= this.d - b0 && l <= this.e + b0 && i1 <= this.f + b0 && j1 <= this.g + b0) {
+                int k1 = this.e - this.b;
+                int l1 = this.f - this.c;
+                int i2 = this.g - this.d;
+
+                if (i > this.b) {
+                    i = this.b;
+                }
+
+                if (j > this.c) {
+                    j = this.c;
+                }
+
+                if (k > this.d) {
+                    k = this.d;
+                }
+
+                if (l < this.e) {
+                    l = this.e;
+                }
+
+                if (i1 < this.f) {
+                    i1 = this.f;
+                }
+
+                if (j1 < this.g) {
+                    j1 = this.g;
+                }
+
+                int j2 = l - i;
+                int k2 = i1 - j;
+                int l2 = j1 - k;
+                int i3 = k1 * l1 * i2;
+                int j3 = j2 * k2 * l2;
+
+                if (j3 - i3 <= 2) {
+                    this.b = i;
+                    this.c = j;
+                    this.d = k;
+                    this.e = l;
+                    this.f = i1;
+                    this.g = j1;
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecartTrackLogic.java b/src/main/java/net/minecraft/server/MinecartTrackLogic.java
new file mode 100644
index 00000000..aa5d8a70
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MinecartTrackLogic.java
@@ -0,0 +1,359 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class MinecartTrackLogic {
+
+    private World b;
+    private int c;
+    private int d;
+    private int e;
+    private final boolean f;
+    private List g;
+
+    final BlockMinecartTrack a;
+
+    public MinecartTrackLogic(BlockMinecartTrack blockminecarttrack, World world, int i, int j, int k) {
+        this.a = blockminecarttrack;
+        this.g = new ArrayList();
+        this.b = world;
+        this.c = i;
+        this.d = j;
+        this.e = k;
+        int l = world.getTypeId(i, j, k);
+        int i1 = world.getData(i, j, k);
+
+        if (BlockMinecartTrack.a((BlockMinecartTrack) Block.byId[l])) {
+            this.f = true;
+            i1 &= -9;
+        } else {
+            this.f = false;
+        }
+
+        this.a(i1);
+    }
+
+    private void a(int i) {
+        this.g.clear();
+        if (i == 0) {
+            this.g.add(new ChunkPosition(this.c, this.d, this.e - 1));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e + 1));
+        } else if (i == 1) {
+            this.g.add(new ChunkPosition(this.c - 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c + 1, this.d, this.e));
+        } else if (i == 2) {
+            this.g.add(new ChunkPosition(this.c - 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c + 1, this.d + 1, this.e));
+        } else if (i == 3) {
+            this.g.add(new ChunkPosition(this.c - 1, this.d + 1, this.e));
+            this.g.add(new ChunkPosition(this.c + 1, this.d, this.e));
+        } else if (i == 4) {
+            this.g.add(new ChunkPosition(this.c, this.d + 1, this.e - 1));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e + 1));
+        } else if (i == 5) {
+            this.g.add(new ChunkPosition(this.c, this.d, this.e - 1));
+            this.g.add(new ChunkPosition(this.c, this.d + 1, this.e + 1));
+        } else if (i == 6) {
+            this.g.add(new ChunkPosition(this.c + 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e + 1));
+        } else if (i == 7) {
+            this.g.add(new ChunkPosition(this.c - 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e + 1));
+        } else if (i == 8) {
+            this.g.add(new ChunkPosition(this.c - 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e - 1));
+        } else if (i == 9) {
+            this.g.add(new ChunkPosition(this.c + 1, this.d, this.e));
+            this.g.add(new ChunkPosition(this.c, this.d, this.e - 1));
+        }
+    }
+
+    private void a() {
+        for (int i = 0; i < this.g.size(); ++i) {
+            MinecartTrackLogic minecarttracklogic = this.a((ChunkPosition) this.g.get(i));
+
+            if (minecarttracklogic != null && minecarttracklogic.b(this)) {
+                this.g.set(i, new ChunkPosition(minecarttracklogic.c, minecarttracklogic.d, minecarttracklogic.e));
+            } else {
+                this.g.remove(i--);
+            }
+        }
+    }
+
+    private boolean a(int i, int j, int k) {
+        return BlockMinecartTrack.g(this.b, i, j, k) ? true : (BlockMinecartTrack.g(this.b, i, j + 1, k) ? true : BlockMinecartTrack.g(this.b, i, j - 1, k));
+    }
+
+    private MinecartTrackLogic a(ChunkPosition chunkposition) {
+        return BlockMinecartTrack.g(this.b, chunkposition.x, chunkposition.y, chunkposition.z) ? new MinecartTrackLogic(this.a, this.b, chunkposition.x, chunkposition.y, chunkposition.z) : (BlockMinecartTrack.g(this.b, chunkposition.x, chunkposition.y + 1, chunkposition.z) ? new MinecartTrackLogic(this.a, this.b, chunkposition.x, chunkposition.y + 1, chunkposition.z) : (BlockMinecartTrack.g(this.b, chunkposition.x, chunkposition.y - 1, chunkposition.z) ? new MinecartTrackLogic(this.a, this.b, chunkposition.x, chunkposition.y - 1, chunkposition.z) : null));
+    }
+
+    private boolean b(MinecartTrackLogic minecarttracklogic) {
+        for (int i = 0; i < this.g.size(); ++i) {
+            ChunkPosition chunkposition = (ChunkPosition) this.g.get(i);
+
+            if (chunkposition.x == minecarttracklogic.c && chunkposition.z == minecarttracklogic.e) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private boolean b(int i, int j, int k) {
+        for (int l = 0; l < this.g.size(); ++l) {
+            ChunkPosition chunkposition = (ChunkPosition) this.g.get(l);
+
+            if (chunkposition.x == i && chunkposition.z == k) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private int b() {
+        int i = 0;
+
+        if (this.a(this.c, this.d, this.e - 1)) {
+            ++i;
+        }
+
+        if (this.a(this.c, this.d, this.e + 1)) {
+            ++i;
+        }
+
+        if (this.a(this.c - 1, this.d, this.e)) {
+            ++i;
+        }
+
+        if (this.a(this.c + 1, this.d, this.e)) {
+            ++i;
+        }
+
+        return i;
+    }
+
+    private boolean c(MinecartTrackLogic minecarttracklogic) {
+        if (this.b(minecarttracklogic)) {
+            return true;
+        } else if (this.g.size() == 2) {
+            return false;
+        } else if (this.g.size() == 0) {
+            return true;
+        } else {
+            ChunkPosition chunkposition = (ChunkPosition) this.g.get(0);
+
+            return minecarttracklogic.d == this.d && chunkposition.y == this.d ? true : true;
+        }
+    }
+
+    private void d(MinecartTrackLogic minecarttracklogic) {
+        this.g.add(new ChunkPosition(minecarttracklogic.c, minecarttracklogic.d, minecarttracklogic.e));
+        boolean flag = this.b(this.c, this.d, this.e - 1);
+        boolean flag1 = this.b(this.c, this.d, this.e + 1);
+        boolean flag2 = this.b(this.c - 1, this.d, this.e);
+        boolean flag3 = this.b(this.c + 1, this.d, this.e);
+        byte b0 = -1;
+
+        if (flag || flag1) {
+            b0 = 0;
+        }
+
+        if (flag2 || flag3) {
+            b0 = 1;
+        }
+
+        if (!this.f) {
+            if (flag1 && flag3 && !flag && !flag2) {
+                b0 = 6;
+            }
+
+            if (flag1 && flag2 && !flag && !flag3) {
+                b0 = 7;
+            }
+
+            if (flag && flag2 && !flag1 && !flag3) {
+                b0 = 8;
+            }
+
+            if (flag && flag3 && !flag1 && !flag2) {
+                b0 = 9;
+            }
+        }
+
+        if (b0 == 0) {
+            if (BlockMinecartTrack.g(this.b, this.c, this.d + 1, this.e - 1)) {
+                b0 = 4;
+            }
+
+            if (BlockMinecartTrack.g(this.b, this.c, this.d + 1, this.e + 1)) {
+                b0 = 5;
+            }
+        }
+
+        if (b0 == 1) {
+            if (BlockMinecartTrack.g(this.b, this.c + 1, this.d + 1, this.e)) {
+                b0 = 2;
+            }
+
+            if (BlockMinecartTrack.g(this.b, this.c - 1, this.d + 1, this.e)) {
+                b0 = 3;
+            }
+        }
+
+        if (b0 < 0) {
+            b0 = 0;
+        }
+
+        int i = b0;
+
+        if (this.f) {
+            i = this.b.getData(this.c, this.d, this.e) & 8 | b0;
+        }
+
+        this.b.setData(this.c, this.d, this.e, i);
+    }
+
+    private boolean c(int i, int j, int k) {
+        MinecartTrackLogic minecarttracklogic = this.a(new ChunkPosition(i, j, k));
+
+        if (minecarttracklogic == null) {
+            return false;
+        } else {
+            minecarttracklogic.a();
+            return minecarttracklogic.c(this);
+        }
+    }
+
+    public void a(boolean flag, boolean flag1) {
+        boolean flag2 = this.c(this.c, this.d, this.e - 1);
+        boolean flag3 = this.c(this.c, this.d, this.e + 1);
+        boolean flag4 = this.c(this.c - 1, this.d, this.e);
+        boolean flag5 = this.c(this.c + 1, this.d, this.e);
+        byte b0 = -1;
+
+        if ((flag2 || flag3) && !flag4 && !flag5) {
+            b0 = 0;
+        }
+
+        if ((flag4 || flag5) && !flag2 && !flag3) {
+            b0 = 1;
+        }
+
+        if (!this.f) {
+            if (flag3 && flag5 && !flag2 && !flag4) {
+                b0 = 6;
+            }
+
+            if (flag3 && flag4 && !flag2 && !flag5) {
+                b0 = 7;
+            }
+
+            if (flag2 && flag4 && !flag3 && !flag5) {
+                b0 = 8;
+            }
+
+            if (flag2 && flag5 && !flag3 && !flag4) {
+                b0 = 9;
+            }
+        }
+
+        if (b0 == -1) {
+            if (flag2 || flag3) {
+                b0 = 0;
+            }
+
+            if (flag4 || flag5) {
+                b0 = 1;
+            }
+
+            if (!this.f) {
+                if (flag) {
+                    if (flag3 && flag5) {
+                        b0 = 6;
+                    }
+
+                    if (flag4 && flag3) {
+                        b0 = 7;
+                    }
+
+                    if (flag5 && flag2) {
+                        b0 = 9;
+                    }
+
+                    if (flag2 && flag4) {
+                        b0 = 8;
+                    }
+                } else {
+                    if (flag2 && flag4) {
+                        b0 = 8;
+                    }
+
+                    if (flag5 && flag2) {
+                        b0 = 9;
+                    }
+
+                    if (flag4 && flag3) {
+                        b0 = 7;
+                    }
+
+                    if (flag3 && flag5) {
+                        b0 = 6;
+                    }
+                }
+            }
+        }
+
+        if (b0 == 0) {
+            if (BlockMinecartTrack.g(this.b, this.c, this.d + 1, this.e - 1)) {
+                b0 = 4;
+            }
+
+            if (BlockMinecartTrack.g(this.b, this.c, this.d + 1, this.e + 1)) {
+                b0 = 5;
+            }
+        }
+
+        if (b0 == 1) {
+            if (BlockMinecartTrack.g(this.b, this.c + 1, this.d + 1, this.e)) {
+                b0 = 2;
+            }
+
+            if (BlockMinecartTrack.g(this.b, this.c - 1, this.d + 1, this.e)) {
+                b0 = 3;
+            }
+        }
+
+        if (b0 < 0) {
+            b0 = 0;
+        }
+
+        this.a(b0);
+        int i = b0;
+
+        if (this.f) {
+            i = this.b.getData(this.c, this.d, this.e) & 8 | b0;
+        }
+
+        if (flag1 || this.b.getData(this.c, this.d, this.e) != i) {
+            this.b.setData(this.c, this.d, this.e, i);
+
+            for (int j = 0; j < this.g.size(); ++j) {
+                MinecartTrackLogic minecarttracklogic = this.a((ChunkPosition) this.g.get(j));
+
+                if (minecarttracklogic != null) {
+                    minecarttracklogic.a();
+                    if (minecarttracklogic.c(this)) {
+                        minecarttracklogic.d(this);
+                    }
+                }
+            }
+        }
+    }
+
+    static int a(MinecartTrackLogic minecarttracklogic) {
+        return minecarttracklogic.b();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftException.java b/src/main/java/net/minecraft/server/MinecraftException.java
new file mode 100644
index 00000000..74f2d400
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MinecraftException.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public class MinecraftException extends RuntimeException {
+
+    public MinecraftException(String s) {
+        super(s);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MovingObjectPosition.java b/src/main/java/net/minecraft/server/MovingObjectPosition.java
new file mode 100644
index 00000000..85c3d304
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MovingObjectPosition.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+public class MovingObjectPosition {
+
+    public EnumMovingObjectType type;
+    public int b;
+    public int c;
+    public int d;
+    public int face;
+    public Vec3D f;
+    public Entity entity;
+
+    public MovingObjectPosition(int i, int j, int k, int l, Vec3D vec3d) {
+        this.type = EnumMovingObjectType.TILE;
+        this.b = i;
+        this.c = j;
+        this.d = k;
+        this.face = l;
+        this.f = Vec3D.create(vec3d.a, vec3d.b, vec3d.c);
+    }
+
+    public MovingObjectPosition(Entity entity) {
+        this.type = EnumMovingObjectType.ENTITY;
+        this.entity = entity;
+        this.f = Vec3D.create(entity.locX, entity.locY, entity.locZ);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTBase.java b/src/main/java/net/minecraft/server/NBTBase.java
new file mode 100644
index 00000000..f59a68cf
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTBase.java
@@ -0,0 +1,150 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public abstract class NBTBase {
+
+    private String a = null;
+
+    public NBTBase() {}
+
+    abstract void a(DataOutput dataoutput);
+
+    abstract void a(DataInput datainput);
+
+    public abstract byte a();
+
+    public String b() {
+        return this.a == null ? "" : this.a;
+    }
+
+    public NBTBase a(String s) {
+        this.a = s;
+        return this;
+    }
+
+    public static NBTBase b(DataInput datainput) {
+        byte b0 = 0;
+		try {
+			b0 = datainput.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        if (b0 == 0) {
+            return new NBTTagEnd();
+        } else {
+            NBTBase nbtbase = a(b0);
+
+            try {
+				nbtbase.a = datainput.readUTF();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            nbtbase.a(datainput);
+            return nbtbase;
+        }
+    }
+
+    public static void a(NBTBase nbtbase, DataOutput dataoutput) {
+        try {
+			dataoutput.writeByte(nbtbase.a());
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        if (nbtbase.a() != 0) {
+            try {
+				dataoutput.writeUTF(nbtbase.b());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            nbtbase.a(dataoutput);
+        }
+    }
+
+    public static NBTBase a(byte b0) {
+        switch (b0) {
+        case 0:
+            return new NBTTagEnd();
+
+        case 1:
+            return new NBTTagByte();
+
+        case 2:
+            return new NBTTagShort();
+
+        case 3:
+            return new NBTTagInt();
+
+        case 4:
+            return new NBTTagLong();
+
+        case 5:
+            return new NBTTagFloat();
+
+        case 6:
+            return new NBTTagDouble();
+
+        case 7:
+            return new NBTTagByteArray();
+
+        case 8:
+            return new NBTTagString();
+
+        case 9:
+            return new NBTTagList();
+
+        case 10:
+            return new NBTTagCompound();
+
+        default:
+            return null;
+        }
+    }
+
+    public static String b(byte b0) {
+        switch (b0) {
+        case 0:
+            return "TAG_End";
+
+        case 1:
+            return "TAG_Byte";
+
+        case 2:
+            return "TAG_Short";
+
+        case 3:
+            return "TAG_Int";
+
+        case 4:
+            return "TAG_Long";
+
+        case 5:
+            return "TAG_Float";
+
+        case 6:
+            return "TAG_Double";
+
+        case 7:
+            return "TAG_Byte_Array";
+
+        case 8:
+            return "TAG_String";
+
+        case 9:
+            return "TAG_List";
+
+        case 10:
+            return "TAG_Compound";
+
+        default:
+            return "UNKNOWN";
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagByte.java b/src/main/java/net/minecraft/server/NBTTagByte.java
new file mode 100644
index 00000000..dc1928b6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagByte.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagByte extends NBTBase {
+
+    public byte a;
+
+    public NBTTagByte() {}
+
+    public NBTTagByte(byte b0) {
+        this.a = b0;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 1;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagByteArray.java b/src/main/java/net/minecraft/server/NBTTagByteArray.java
new file mode 100644
index 00000000..95a82a67
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagByteArray.java
@@ -0,0 +1,57 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagByteArray extends NBTBase {
+
+    public byte[] a;
+
+    public NBTTagByteArray() {}
+
+    public NBTTagByteArray(byte[] abyte) {
+        this.a = abyte;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeInt(this.a.length);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutput.write(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        int i = 0;
+		try {
+			i = datainput.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        this.a = new byte[i];
+        try {
+			datainput.readFully(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 7;
+    }
+
+    public String toString() {
+        return "[" + this.a.length + " bytes]";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
new file mode 100644
index 00000000..91372bd9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -0,0 +1,146 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class NBTTagCompound extends NBTBase {
+
+    private Map a = new HashMap();
+
+    public NBTTagCompound() {}
+
+    void a(DataOutput dataoutput) {
+        Iterator iterator = this.a.values().iterator();
+
+        while (iterator.hasNext()) {
+            NBTBase nbtbase = (NBTBase) iterator.next();
+
+            NBTBase.a(nbtbase, dataoutput);
+        }
+
+        try {
+			dataoutput.writeByte(0);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        this.a.clear();
+
+        NBTBase nbtbase;
+
+        while ((nbtbase = NBTBase.b(datainput)).a() != 0) {
+            this.a.put(nbtbase.b(), nbtbase);
+        }
+    }
+
+    public Collection c() {
+        return this.a.values();
+    }
+
+    public byte a() {
+        return (byte) 10;
+    }
+
+    public void a(String s, NBTBase nbtbase) {
+        this.a.put(s, nbtbase.a(s));
+    }
+
+    public void a(String s, byte b0) {
+        this.a.put(s, (new NBTTagByte(b0)).a(s));
+    }
+
+    public void a(String s, short short1) {
+        this.a.put(s, (new NBTTagShort(short1)).a(s));
+    }
+
+    public void a(String s, int i) {
+        this.a.put(s, (new NBTTagInt(i)).a(s));
+    }
+
+    public void setLong(String s, long i) {
+        this.a.put(s, (new NBTTagLong(i)).a(s));
+    }
+
+    public void a(String s, float f) {
+        this.a.put(s, (new NBTTagFloat(f)).a(s));
+    }
+
+    public void a(String s, double d0) {
+        this.a.put(s, (new NBTTagDouble(d0)).a(s));
+    }
+
+    public void setString(String s, String s1) {
+        this.a.put(s, (new NBTTagString(s1)).a(s));
+    }
+
+    public void a(String s, byte[] abyte) {
+        this.a.put(s, (new NBTTagByteArray(abyte)).a(s));
+    }
+
+    public void a(String s, NBTTagCompound nbttagcompound) {
+        this.a.put(s, nbttagcompound.a(s));
+    }
+
+    public void a(String s, boolean flag) {
+        this.a(s, (byte) (flag ? 1 : 0));
+    }
+
+    public boolean hasKey(String s) {
+        return this.a.containsKey(s);
+    }
+
+    public byte c(String s) {
+        return !this.a.containsKey(s) ? 0 : ((NBTTagByte) this.a.get(s)).a;
+    }
+
+    public short d(String s) {
+        return !this.a.containsKey(s) ? 0 : ((NBTTagShort) this.a.get(s)).a;
+    }
+
+    public int e(String s) {
+        return !this.a.containsKey(s) ? 0 : ((NBTTagInt) this.a.get(s)).a;
+    }
+
+    public long getLong(String s) {
+        return !this.a.containsKey(s) ? 0L : ((NBTTagLong) this.a.get(s)).a;
+    }
+
+    public float g(String s) {
+        return !this.a.containsKey(s) ? 0.0F : ((NBTTagFloat) this.a.get(s)).a;
+    }
+
+    public double h(String s) {
+        return !this.a.containsKey(s) ? 0.0D : ((NBTTagDouble) this.a.get(s)).a;
+    }
+
+    public String getString(String s) {
+        return !this.a.containsKey(s) ? "" : ((NBTTagString) this.a.get(s)).a;
+    }
+
+    public byte[] j(String s) {
+        return !this.a.containsKey(s) ? new byte[0] : ((NBTTagByteArray) this.a.get(s)).a;
+    }
+
+    public NBTTagCompound k(String s) {
+        return !this.a.containsKey(s) ? new NBTTagCompound() : (NBTTagCompound) this.a.get(s);
+    }
+
+    public NBTTagList l(String s) {
+        return !this.a.containsKey(s) ? new NBTTagList() : (NBTTagList) this.a.get(s);
+    }
+
+    public boolean m(String s) {
+        return this.c(s) != 0;
+    }
+
+    public String toString() {
+        return "" + this.a.size() + " entries";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagDouble.java b/src/main/java/net/minecraft/server/NBTTagDouble.java
new file mode 100644
index 00000000..0cc28e84
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagDouble.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagDouble extends NBTBase {
+
+    public double a;
+
+    public NBTTagDouble() {}
+
+    public NBTTagDouble(double d0) {
+        this.a = d0;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeDouble(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readDouble();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 6;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagEnd.java b/src/main/java/net/minecraft/server/NBTTagEnd.java
new file mode 100644
index 00000000..18e516eb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagEnd.java
@@ -0,0 +1,21 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+
+public class NBTTagEnd extends NBTBase {
+
+    public NBTTagEnd() {}
+
+    void a(DataInput datainput) {}
+
+    void a(DataOutput dataoutput) {}
+
+    public byte a() {
+        return (byte) 0;
+    }
+
+    public String toString() {
+        return "END";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagFloat.java b/src/main/java/net/minecraft/server/NBTTagFloat.java
new file mode 100644
index 00000000..43f9ab67
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagFloat.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagFloat extends NBTBase {
+
+    public float a;
+
+    public NBTTagFloat() {}
+
+    public NBTTagFloat(float f) {
+        this.a = f;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeFloat(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readFloat();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 5;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagInt.java b/src/main/java/net/minecraft/server/NBTTagInt.java
new file mode 100644
index 00000000..fd4756da
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagInt.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagInt extends NBTBase {
+
+    public int a;
+
+    public NBTTagInt() {}
+
+    public NBTTagInt(int i) {
+        this.a = i;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 3;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagList.java b/src/main/java/net/minecraft/server/NBTTagList.java
new file mode 100644
index 00000000..f9c7a8e6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagList.java
@@ -0,0 +1,86 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class NBTTagList extends NBTBase {
+
+    private List a = new ArrayList();
+    private byte b;
+
+    public NBTTagList() {}
+
+    void a(DataOutput dataoutput) {
+        if (this.a.size() > 0) {
+            this.b = ((NBTBase) this.a.get(0)).a();
+        } else {
+            this.b = 1;
+        }
+
+        try {
+			dataoutput.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutput.writeInt(this.a.size());
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        for (int i = 0; i < this.a.size(); ++i) {
+            ((NBTBase) this.a.get(i)).a(dataoutput);
+        }
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.b = datainput.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        int i = 0;
+		try {
+			i = datainput.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        this.a = new ArrayList();
+
+        for (int j = 0; j < i; ++j) {
+            NBTBase nbtbase = NBTBase.a(this.b);
+
+            nbtbase.a(datainput);
+            this.a.add(nbtbase);
+        }
+    }
+
+    public byte a() {
+        return (byte) 9;
+    }
+
+    public String toString() {
+        return "" + this.a.size() + " entries of type " + NBTBase.b(this.b);
+    }
+
+    public void a(NBTBase nbtbase) {
+        this.b = nbtbase.a();
+        this.a.add(nbtbase);
+    }
+
+    public NBTBase a(int i) {
+        return (NBTBase) this.a.get(i);
+    }
+
+    public int c() {
+        return this.a.size();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagLong.java b/src/main/java/net/minecraft/server/NBTTagLong.java
new file mode 100644
index 00000000..7f65d1e5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagLong.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagLong extends NBTBase {
+
+    public long a;
+
+    public NBTTagLong() {}
+
+    public NBTTagLong(long i) {
+        this.a = i;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeLong(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readLong();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 4;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagShort.java b/src/main/java/net/minecraft/server/NBTTagShort.java
new file mode 100644
index 00000000..902968f6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagShort.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagShort extends NBTBase {
+
+    public short a;
+
+    public NBTTagShort() {}
+
+    public NBTTagShort(short short1) {
+        this.a = short1;
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeShort(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 2;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NBTTagString.java b/src/main/java/net/minecraft/server/NBTTagString.java
new file mode 100644
index 00000000..eb481c4d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NBTTagString.java
@@ -0,0 +1,45 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class NBTTagString extends NBTBase {
+
+    public String a;
+
+    public NBTTagString() {}
+
+    public NBTTagString(String s) {
+        this.a = s;
+        if (s == null) {
+            throw new IllegalArgumentException("Empty string not allowed");
+        }
+    }
+
+    void a(DataOutput dataoutput) {
+        try {
+			dataoutput.writeUTF(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    void a(DataInput datainput) {
+        try {
+			this.a = datainput.readUTF();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public byte a() {
+        return (byte) 8;
+    }
+
+    public String toString() {
+        return "" + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetHandler.java b/src/main/java/net/minecraft/server/NetHandler.java
new file mode 100644
index 00000000..cdef1372
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetHandler.java
@@ -0,0 +1,210 @@
+package net.minecraft.server;
+
+public abstract class NetHandler {
+
+    public NetHandler() {}
+
+    public abstract boolean c();
+
+    public void a(Packet51MapChunk packet51mapchunk) {}
+
+    public void a(Packet packet) {}
+
+    public void a(String s, Object[] aobject) {}
+
+    public void a(Packet255KickDisconnect packet255kickdisconnect) {
+        this.a((Packet) packet255kickdisconnect);
+    }
+
+    public void a(Packet1Login packet1login) {
+        this.a((Packet) packet1login);
+    }
+
+    public void a(Packet10Flying packet10flying) {
+        this.a((Packet) packet10flying);
+    }
+
+    public void a(Packet52MultiBlockChange packet52multiblockchange) {
+        this.a((Packet) packet52multiblockchange);
+    }
+
+    public void a(Packet14BlockDig packet14blockdig) {
+        this.a((Packet) packet14blockdig);
+    }
+
+    public void a(Packet53BlockChange packet53blockchange) {
+        this.a((Packet) packet53blockchange);
+    }
+
+    public void a(Packet50PreChunk packet50prechunk) {
+        this.a((Packet) packet50prechunk);
+    }
+
+    public void a(Packet20NamedEntitySpawn packet20namedentityspawn) {
+        this.a((Packet) packet20namedentityspawn);
+    }
+
+    public void a(Packet30Entity packet30entity) {
+        this.a((Packet) packet30entity);
+    }
+
+    public void a(Packet34EntityTeleport packet34entityteleport) {
+        this.a((Packet) packet34entityteleport);
+    }
+
+    public void a(Packet15Place packet15place) {
+        this.a((Packet) packet15place);
+    }
+
+    public void a(Packet16BlockItemSwitch packet16blockitemswitch) {
+        this.a((Packet) packet16blockitemswitch);
+    }
+
+    public void a(Packet29DestroyEntity packet29destroyentity) {
+        this.a((Packet) packet29destroyentity);
+    }
+
+    public void a(Packet21PickupSpawn packet21pickupspawn) {
+        this.a((Packet) packet21pickupspawn);
+    }
+
+    public void a(Packet22Collect packet22collect) {
+        this.a((Packet) packet22collect);
+    }
+
+    public void a(Packet3Chat packet3chat) {
+        this.a((Packet) packet3chat);
+    }
+
+    public void a(Packet23VehicleSpawn packet23vehiclespawn) {
+        this.a((Packet) packet23vehiclespawn);
+    }
+
+    public void a(Packet18ArmAnimation packet18armanimation) {
+        this.a((Packet) packet18armanimation);
+    }
+
+    public void a(Packet19EntityAction packet19entityaction) {
+        this.a((Packet) packet19entityaction);
+    }
+
+    public void a(Packet2Handshake packet2handshake) {
+        this.a((Packet) packet2handshake);
+    }
+
+    public void a(Packet24MobSpawn packet24mobspawn) {
+        this.a((Packet) packet24mobspawn);
+    }
+
+    public void a(Packet4UpdateTime packet4updatetime) {
+        this.a((Packet) packet4updatetime);
+    }
+
+    public void a(Packet6SpawnPosition packet6spawnposition) {
+        this.a((Packet) packet6spawnposition);
+    }
+
+    public void a(Packet28EntityVelocity packet28entityvelocity) {
+        this.a((Packet) packet28entityvelocity);
+    }
+
+    public void a(Packet40EntityMetadata packet40entitymetadata) {
+        this.a((Packet) packet40entitymetadata);
+    }
+
+    public void a(Packet39AttachEntity packet39attachentity) {
+        this.a((Packet) packet39attachentity);
+    }
+
+    public void a(Packet7UseEntity packet7useentity) {
+        this.a((Packet) packet7useentity);
+    }
+
+    public void a(Packet38EntityStatus packet38entitystatus) {
+        this.a((Packet) packet38entitystatus);
+    }
+
+    public void a(Packet8UpdateHealth packet8updatehealth) {
+        this.a((Packet) packet8updatehealth);
+    }
+
+    public void a(Packet9Respawn packet9respawn) {
+        this.a((Packet) packet9respawn);
+    }
+
+    public void a(Packet60Explosion packet60explosion) {
+        this.a((Packet) packet60explosion);
+    }
+
+    public void a(Packet100OpenWindow packet100openwindow) {
+        this.a((Packet) packet100openwindow);
+    }
+
+    public void a(Packet101CloseWindow packet101closewindow) {
+        this.a((Packet) packet101closewindow);
+    }
+
+    public void a(Packet102WindowClick packet102windowclick) {
+        this.a((Packet) packet102windowclick);
+    }
+
+    public void a(Packet103SetSlot packet103setslot) {
+        this.a((Packet) packet103setslot);
+    }
+
+    public void a(Packet104WindowItems packet104windowitems) {
+        this.a((Packet) packet104windowitems);
+    }
+
+    public void a(Packet130UpdateSign packet130updatesign) {
+        this.a((Packet) packet130updatesign);
+    }
+
+    public void a(Packet105CraftProgressBar packet105craftprogressbar) {
+        this.a((Packet) packet105craftprogressbar);
+    }
+
+    public void a(Packet5EntityEquipment packet5entityequipment) {
+        this.a((Packet) packet5entityequipment);
+    }
+
+    public void a(Packet106Transaction packet106transaction) {
+        this.a((Packet) packet106transaction);
+    }
+
+    public void a(Packet25EntityPainting packet25entitypainting) {
+        this.a((Packet) packet25entitypainting);
+    }
+
+    public void a(Packet54PlayNoteBlock packet54playnoteblock) {
+        this.a((Packet) packet54playnoteblock);
+    }
+
+    public void a(Packet200Statistic packet200statistic) {
+        this.a((Packet) packet200statistic);
+    }
+
+    public void a(Packet17 packet17) {
+        this.a((Packet) packet17);
+    }
+
+    public void a(Packet27 packet27) {
+        this.a((Packet) packet27);
+    }
+
+    public void a(Packet70Bed packet70bed) {
+        this.a((Packet) packet70bed);
+    }
+
+    public void a(Packet71Weather packet71weather) {
+        this.a((Packet) packet71weather);
+    }
+
+    public void a(Packet131 packet131) {
+        this.a((Packet) packet131);
+    }
+
+    public void a(Packet61 packet61) {
+        this.a((Packet) packet61);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkAcceptThread.java b/src/main/java/net/minecraft/server/NetworkAcceptThread.java
new file mode 100644
index 00000000..abca5a8c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetworkAcceptThread.java
@@ -0,0 +1,45 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.util.HashMap;
+
+class NetworkAcceptThread extends Thread {
+
+    final MinecraftServer a;
+
+    final NetworkListenThread b;
+
+    NetworkAcceptThread(NetworkListenThread networklistenthread, String s, MinecraftServer minecraftserver) {
+        super(s);
+        this.b = networklistenthread;
+        this.a = minecraftserver;
+    }
+
+    public void run() {
+        HashMap hashmap = new HashMap();
+
+        while (this.b.b) {
+            try {
+                Socket socket = NetworkListenThread.a(this.b).accept();
+
+                if (socket != null) {
+                    InetAddress inetaddress = socket.getInetAddress();
+
+                    if (hashmap.containsKey(inetaddress) && !"127.0.0.1".equals(inetaddress.getHostAddress()) && System.currentTimeMillis() - ((Long) hashmap.get(inetaddress)).longValue() < 5000L) {
+                        hashmap.put(inetaddress, Long.valueOf(System.currentTimeMillis()));
+                        socket.close();
+                    } else {
+                        hashmap.put(inetaddress, Long.valueOf(System.currentTimeMillis()));
+                        NetLoginHandler netloginhandler = new NetLoginHandler(this.a, socket, "Connection #" + NetworkListenThread.b(this.b));
+
+                        NetworkListenThread.a(this.b, netloginhandler);
+                    }
+                }
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkListenThread.java b/src/main/java/net/minecraft/server/NetworkListenThread.java
new file mode 100644
index 00000000..1c24dead
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetworkListenThread.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.ServerSocket;
+import java.util.ArrayList;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class NetworkListenThread {
+
+    public static Logger a = Logger.getLogger("Minecraft");
+    private ServerSocket d;
+    private Thread e;
+    public volatile boolean b = false;
+    private int f = 0;
+    private ArrayList g = new ArrayList();
+    private ArrayList h = new ArrayList();
+    public MinecraftServer c;
+
+    public NetworkListenThread(MinecraftServer minecraftserver, InetAddress inetaddress, int i) {
+        this.c = minecraftserver;
+        try {
+			this.d = new ServerSocket(i, 0, inetaddress);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        this.d.setPerformancePreferences(0, 2, 1);
+        this.b = true;
+        this.e = new NetworkAcceptThread(this, "Listen thread", minecraftserver);
+        this.e.start();
+    }
+
+    public void a(NetServerHandler netserverhandler) {
+        this.h.add(netserverhandler);
+    }
+
+    private void a(NetLoginHandler netloginhandler) {
+        if (netloginhandler == null) {
+            throw new IllegalArgumentException("Got null pendingconnection!");
+        } else {
+            this.g.add(netloginhandler);
+        }
+    }
+
+    public void a() {
+        int i;
+
+        for (i = 0; i < this.g.size(); ++i) {
+            NetLoginHandler netloginhandler = (NetLoginHandler) this.g.get(i);
+
+            try {
+                netloginhandler.a();
+            } catch (Exception exception) {
+                netloginhandler.disconnect("Internal server error");
+                a.log(Level.WARNING, "Failed to handle packet: " + exception, exception);
+            }
+
+            if (netloginhandler.c) {
+                this.g.remove(i--);
+            }
+
+            netloginhandler.networkManager.a();
+        }
+
+        for (i = 0; i < this.h.size(); ++i) {
+            NetServerHandler netserverhandler = (NetServerHandler) this.h.get(i);
+
+            try {
+                netserverhandler.a();
+            } catch (Exception exception1) {
+                a.log(Level.WARNING, "Failed to handle packet: " + exception1, exception1);
+                netserverhandler.disconnect("Internal server error");
+            }
+
+            if (netserverhandler.disconnected) {
+                this.h.remove(i--);
+            }
+
+            netserverhandler.networkManager.a();
+        }
+    }
+
+    static ServerSocket a(NetworkListenThread networklistenthread) {
+        return networklistenthread.d;
+    }
+
+    static int b(NetworkListenThread networklistenthread) {
+        return networklistenthread.f++;
+    }
+
+    static void a(NetworkListenThread networklistenthread, NetLoginHandler netloginhandler) {
+        networklistenthread.a(netloginhandler);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkMasterThread.java b/src/main/java/net/minecraft/server/NetworkMasterThread.java
new file mode 100644
index 00000000..d7e4047a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetworkMasterThread.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+class NetworkMasterThread extends Thread {
+
+    final NetworkManager a;
+
+    NetworkMasterThread(NetworkManager networkmanager) {
+        this.a = networkmanager;
+    }
+
+    public void run() {
+        try {
+            Thread.sleep(5000L);
+            if (NetworkManager.g(this.a).isAlive()) {
+                try {
+                    NetworkManager.g(this.a).stop();
+                } catch (Throwable throwable) {
+                    ;
+                }
+            }
+
+            if (NetworkManager.h(this.a).isAlive()) {
+                try {
+                    NetworkManager.h(this.a).stop();
+                } catch (Throwable throwable1) {
+                    ;
+                }
+            }
+        } catch (InterruptedException interruptedexception) {
+            interruptedexception.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkReaderThread.java b/src/main/java/net/minecraft/server/NetworkReaderThread.java
new file mode 100644
index 00000000..1f7ae82e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetworkReaderThread.java
@@ -0,0 +1,59 @@
+package net.minecraft.server;
+
+class NetworkReaderThread extends Thread {
+
+    final NetworkManager a;
+
+    NetworkReaderThread(NetworkManager networkmanager, String s) {
+        super(s);
+        this.a = networkmanager;
+    }
+
+    public void run() {
+        Object object = NetworkManager.a;
+
+        synchronized (NetworkManager.a) {
+            ++NetworkManager.b;
+        }
+
+        while (true) {
+            boolean flag = false;
+
+            try {
+                flag = true;
+                if (!NetworkManager.a(this.a)) {
+                    flag = false;
+                    break;
+                }
+
+                if (NetworkManager.b(this.a)) {
+                    flag = false;
+                    break;
+                }
+
+                while (NetworkManager.c(this.a)) {
+                    ;
+                }
+
+                try {
+                    sleep(100L);
+                } catch (InterruptedException interruptedexception) {
+                    ;
+                }
+            } finally {
+                if (flag) {
+                    Object object1 = NetworkManager.a;
+
+                    synchronized (NetworkManager.a) {
+                        --NetworkManager.b;
+                    }
+                }
+            }
+        }
+
+        object = NetworkManager.a;
+        synchronized (NetworkManager.a) {
+            --NetworkManager.b;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkWriterThread.java b/src/main/java/net/minecraft/server/NetworkWriterThread.java
new file mode 100644
index 00000000..9f42388f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NetworkWriterThread.java
@@ -0,0 +1,68 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+class NetworkWriterThread extends Thread {
+
+    final NetworkManager a;
+
+    NetworkWriterThread(NetworkManager networkmanager, String s) {
+        super(s);
+        this.a = networkmanager;
+    }
+
+    public void run() {
+        Object object = NetworkManager.a;
+
+        synchronized (NetworkManager.a) {
+            ++NetworkManager.c;
+        }
+
+        while (true) {
+            boolean flag = false;
+
+            try {
+                flag = true;
+                if (!NetworkManager.a(this.a)) {
+                    flag = false;
+                    break;
+                }
+
+                while (NetworkManager.d(this.a)) {
+                    ;
+                }
+
+                try {
+                    sleep(100L);
+                } catch (InterruptedException interruptedexception) {
+                    ;
+                }
+
+                try {
+                    if (NetworkManager.e(this.a) != null) {
+                        NetworkManager.e(this.a).flush();
+                    }
+                } catch (IOException ioexception) {
+                    if (!NetworkManager.f(this.a)) {
+                        NetworkManager.a(this.a, (Exception) ioexception);
+                    }
+
+                    ioexception.printStackTrace();
+                }
+            } finally {
+                if (flag) {
+                    Object object1 = NetworkManager.a;
+
+                    synchronized (NetworkManager.a) {
+                        --NetworkManager.c;
+                    }
+                }
+            }
+        }
+
+        object = NetworkManager.a;
+        synchronized (NetworkManager.a) {
+            --NetworkManager.c;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NibbleArray.java b/src/main/java/net/minecraft/server/NibbleArray.java
new file mode 100644
index 00000000..186e8961
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NibbleArray.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+public class NibbleArray {
+
+    public final byte[] a;
+
+    public NibbleArray(int i) {
+        this.a = new byte[i >> 1];
+    }
+
+    public NibbleArray(byte[] abyte) {
+        this.a = abyte;
+    }
+
+    public int a(int i, int j, int k) {
+        int l = i << 11 | k << 7 | j;
+        int i1 = l >> 1;
+        int j1 = l & 1;
+
+        return j1 == 0 ? this.a[i1] & 15 : this.a[i1] >> 4 & 15;
+    }
+
+    public void a(int i, int j, int k, int l) {
+        int i1 = i << 11 | k << 7 | j;
+        int j1 = i1 >> 1;
+        int k1 = i1 & 1;
+
+        if (k1 == 0) {
+            this.a[j1] = (byte) (this.a[j1] & 240 | l & 15);
+        } else {
+            this.a[j1] = (byte) (this.a[j1] & 15 | (l & 15) << 4);
+        }
+    }
+
+    public boolean a() {
+        return this.a != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGenerator.java b/src/main/java/net/minecraft/server/NoiseGenerator.java
new file mode 100644
index 00000000..07827ede
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGenerator.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+public abstract class NoiseGenerator {
+
+    public NoiseGenerator() {}
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGenerator2.java b/src/main/java/net/minecraft/server/NoiseGenerator2.java
new file mode 100644
index 00000000..e672bdfc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGenerator2.java
@@ -0,0 +1,121 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class NoiseGenerator2 {
+
+    private static int[][] d = new int[][] { { 1, 1, 0}, { -1, 1, 0}, { 1, -1, 0}, { -1, -1, 0}, { 1, 0, 1}, { -1, 0, 1}, { 1, 0, -1}, { -1, 0, -1}, { 0, 1, 1}, { 0, -1, 1}, { 0, 1, -1}, { 0, -1, -1}};
+    private int[] e;
+    public double a;
+    public double b;
+    public double c;
+    private static final double f = 0.5D * (Math.sqrt(3.0D) - 1.0D);
+    private static final double g = (3.0D - Math.sqrt(3.0D)) / 6.0D;
+
+    public NoiseGenerator2() {
+        this(new Random());
+    }
+
+    public NoiseGenerator2(Random random) {
+        this.e = new int[512];
+        this.a = random.nextDouble() * 256.0D;
+        this.b = random.nextDouble() * 256.0D;
+        this.c = random.nextDouble() * 256.0D;
+
+        int i;
+
+        for (i = 0; i < 256; this.e[i] = i++) {
+            ;
+        }
+
+        for (i = 0; i < 256; ++i) {
+            int j = random.nextInt(256 - i) + i;
+            int k = this.e[i];
+
+            this.e[i] = this.e[j];
+            this.e[j] = k;
+            this.e[i + 256] = this.e[i];
+        }
+    }
+
+    private static int a(double d0) {
+        return d0 > 0.0D ? (int) d0 : (int) d0 - 1;
+    }
+
+    private static double a(int[] aint, double d0, double d1) {
+        return (double) aint[0] * d0 + (double) aint[1] * d1;
+    }
+
+    public void a(double[] adouble, double d0, double d1, int i, int j, double d2, double d3, double d4) {
+        int k = 0;
+
+        for (int l = 0; l < i; ++l) {
+            double d5 = (d0 + (double) l) * d2 + this.a;
+
+            for (int i1 = 0; i1 < j; ++i1) {
+                double d6 = (d1 + (double) i1) * d3 + this.b;
+                double d7 = (d5 + d6) * f;
+                int j1 = a(d5 + d7);
+                int k1 = a(d6 + d7);
+                double d8 = (double) (j1 + k1) * g;
+                double d9 = (double) j1 - d8;
+                double d10 = (double) k1 - d8;
+                double d11 = d5 - d9;
+                double d12 = d6 - d10;
+                byte b0;
+                byte b1;
+
+                if (d11 > d12) {
+                    b0 = 1;
+                    b1 = 0;
+                } else {
+                    b0 = 0;
+                    b1 = 1;
+                }
+
+                double d13 = d11 - (double) b0 + g;
+                double d14 = d12 - (double) b1 + g;
+                double d15 = d11 - 1.0D + 2.0D * g;
+                double d16 = d12 - 1.0D + 2.0D * g;
+                int l1 = j1 & 255;
+                int i2 = k1 & 255;
+                int j2 = this.e[l1 + this.e[i2]] % 12;
+                int k2 = this.e[l1 + b0 + this.e[i2 + b1]] % 12;
+                int l2 = this.e[l1 + 1 + this.e[i2 + 1]] % 12;
+                double d17 = 0.5D - d11 * d11 - d12 * d12;
+                double d18;
+
+                if (d17 < 0.0D) {
+                    d18 = 0.0D;
+                } else {
+                    d17 *= d17;
+                    d18 = d17 * d17 * a(d[j2], d11, d12);
+                }
+
+                double d19 = 0.5D - d13 * d13 - d14 * d14;
+                double d20;
+
+                if (d19 < 0.0D) {
+                    d20 = 0.0D;
+                } else {
+                    d19 *= d19;
+                    d20 = d19 * d19 * a(d[k2], d13, d14);
+                }
+
+                double d21 = 0.5D - d15 * d15 - d16 * d16;
+                double d22;
+
+                if (d21 < 0.0D) {
+                    d22 = 0.0D;
+                } else {
+                    d21 *= d21;
+                    d22 = d21 * d21 * a(d[l2], d15, d16);
+                }
+
+                int i3 = k++;
+
+                adouble[i3] += 70.0D * (d18 + d20 + d22) * d4;
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGeneratorOctaves.java b/src/main/java/net/minecraft/server/NoiseGeneratorOctaves.java
new file mode 100644
index 00000000..bab39a2b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGeneratorOctaves.java
@@ -0,0 +1,53 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class NoiseGeneratorOctaves extends NoiseGenerator {
+
+    private NoiseGeneratorPerlin[] a;
+    private int b;
+
+    public NoiseGeneratorOctaves(Random random, int i) {
+        this.b = i;
+        this.a = new NoiseGeneratorPerlin[i];
+
+        for (int j = 0; j < i; ++j) {
+            this.a[j] = new NoiseGeneratorPerlin(random);
+        }
+    }
+
+    public double a(double d0, double d1) {
+        double d2 = 0.0D;
+        double d3 = 1.0D;
+
+        for (int i = 0; i < this.b; ++i) {
+            d2 += this.a[i].a(d0 * d3, d1 * d3) / d3;
+            d3 /= 2.0D;
+        }
+
+        return d2;
+    }
+
+    public double[] a(double[] adouble, double d0, double d1, double d2, int i, int j, int k, double d3, double d4, double d5) {
+        if (adouble == null) {
+            adouble = new double[i * j * k];
+        } else {
+            for (int l = 0; l < adouble.length; ++l) {
+                adouble[l] = 0.0D;
+            }
+        }
+
+        double d6 = 1.0D;
+
+        for (int i1 = 0; i1 < this.b; ++i1) {
+            this.a[i1].a(adouble, d0, d1, d2, i, j, k, d3 * d6, d4 * d6, d5 * d6, d6);
+            d6 /= 2.0D;
+        }
+
+        return adouble;
+    }
+
+    public double[] a(double[] adouble, int i, int j, int k, int l, double d0, double d1, double d2) {
+        return this.a(adouble, (double) i, 10.0D, (double) j, k, 1, l, d0, 1.0D, d1);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGeneratorOctaves2.java b/src/main/java/net/minecraft/server/NoiseGeneratorOctaves2.java
new file mode 100644
index 00000000..0f1a6fa9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGeneratorOctaves2.java
@@ -0,0 +1,45 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class NoiseGeneratorOctaves2 extends NoiseGenerator {
+
+    private NoiseGenerator2[] a;
+    private int b;
+
+    public NoiseGeneratorOctaves2(Random random, int i) {
+        this.b = i;
+        this.a = new NoiseGenerator2[i];
+
+        for (int j = 0; j < i; ++j) {
+            this.a[j] = new NoiseGenerator2(random);
+        }
+    }
+
+    public double[] a(double[] adouble, double d0, double d1, int i, int j, double d2, double d3, double d4) {
+        return this.a(adouble, d0, d1, i, j, d2, d3, d4, 0.5D);
+    }
+
+    public double[] a(double[] adouble, double d0, double d1, int i, int j, double d2, double d3, double d4, double d5) {
+        d2 /= 1.5D;
+        d3 /= 1.5D;
+        if (adouble != null && adouble.length >= i * j) {
+            for (int k = 0; k < adouble.length; ++k) {
+                adouble[k] = 0.0D;
+            }
+        } else {
+            adouble = new double[i * j];
+        }
+
+        double d6 = 1.0D;
+        double d7 = 1.0D;
+
+        for (int l = 0; l < this.b; ++l) {
+            this.a[l].a(adouble, d0, d1, i, j, d2 * d7, d3 * d7, 0.55D / d6);
+            d7 *= d4;
+            d6 *= d5;
+        }
+
+        return adouble;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java b/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java
new file mode 100644
index 00000000..7051d597
--- /dev/null
+++ b/src/main/java/net/minecraft/server/NoiseGeneratorPerlin.java
@@ -0,0 +1,244 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class NoiseGeneratorPerlin extends NoiseGenerator {
+
+    private int[] d;
+    public double a;
+    public double b;
+    public double c;
+
+    public NoiseGeneratorPerlin() {
+        this(new Random());
+    }
+
+    public NoiseGeneratorPerlin(Random random) {
+        this.d = new int[512];
+        this.a = random.nextDouble() * 256.0D;
+        this.b = random.nextDouble() * 256.0D;
+        this.c = random.nextDouble() * 256.0D;
+
+        int i;
+
+        for (i = 0; i < 256; this.d[i] = i++) {
+            ;
+        }
+
+        for (i = 0; i < 256; ++i) {
+            int j = random.nextInt(256 - i) + i;
+            int k = this.d[i];
+
+            this.d[i] = this.d[j];
+            this.d[j] = k;
+            this.d[i + 256] = this.d[i];
+        }
+    }
+
+    public double a(double d0, double d1, double d2) {
+        double d3 = d0 + this.a;
+        double d4 = d1 + this.b;
+        double d5 = d2 + this.c;
+        int i = (int) d3;
+        int j = (int) d4;
+        int k = (int) d5;
+
+        if (d3 < (double) i) {
+            --i;
+        }
+
+        if (d4 < (double) j) {
+            --j;
+        }
+
+        if (d5 < (double) k) {
+            --k;
+        }
+
+        int l = i & 255;
+        int i1 = j & 255;
+        int j1 = k & 255;
+
+        d3 -= (double) i;
+        d4 -= (double) j;
+        d5 -= (double) k;
+        double d6 = d3 * d3 * d3 * (d3 * (d3 * 6.0D - 15.0D) + 10.0D);
+        double d7 = d4 * d4 * d4 * (d4 * (d4 * 6.0D - 15.0D) + 10.0D);
+        double d8 = d5 * d5 * d5 * (d5 * (d5 * 6.0D - 15.0D) + 10.0D);
+        int k1 = this.d[l] + i1;
+        int l1 = this.d[k1] + j1;
+        int i2 = this.d[k1 + 1] + j1;
+        int j2 = this.d[l + 1] + i1;
+        int k2 = this.d[j2] + j1;
+        int l2 = this.d[j2 + 1] + j1;
+
+        return this.b(d8, this.b(d7, this.b(d6, this.a(this.d[l1], d3, d4, d5), this.a(this.d[k2], d3 - 1.0D, d4, d5)), this.b(d6, this.a(this.d[i2], d3, d4 - 1.0D, d5), this.a(this.d[l2], d3 - 1.0D, d4 - 1.0D, d5))), this.b(d7, this.b(d6, this.a(this.d[l1 + 1], d3, d4, d5 - 1.0D), this.a(this.d[k2 + 1], d3 - 1.0D, d4, d5 - 1.0D)), this.b(d6, this.a(this.d[i2 + 1], d3, d4 - 1.0D, d5 - 1.0D), this.a(this.d[l2 + 1], d3 - 1.0D, d4 - 1.0D, d5 - 1.0D))));
+    }
+
+    public final double b(double d0, double d1, double d2) {
+        return d1 + d0 * (d2 - d1);
+    }
+
+    public final double a(int i, double d0, double d1) {
+        int j = i & 15;
+        double d2 = (double) (1 - ((j & 8) >> 3)) * d0;
+        double d3 = j < 4 ? 0.0D : (j != 12 && j != 14 ? d1 : d0);
+
+        return ((j & 1) == 0 ? d2 : -d2) + ((j & 2) == 0 ? d3 : -d3);
+    }
+
+    public final double a(int i, double d0, double d1, double d2) {
+        int j = i & 15;
+        double d3 = j < 8 ? d0 : d1;
+        double d4 = j < 4 ? d1 : (j != 12 && j != 14 ? d2 : d0);
+
+        return ((j & 1) == 0 ? d3 : -d3) + ((j & 2) == 0 ? d4 : -d4);
+    }
+
+    public double a(double d0, double d1) {
+        return this.a(d0, d1, 0.0D);
+    }
+
+    public void a(double[] adouble, double d0, double d1, double d2, int i, int j, int k, double d3, double d4, double d5, double d6) {
+        int l;
+        int i1;
+        double d7;
+        double d8;
+        double d9;
+        int j1;
+        double d10;
+        int k1;
+        int l1;
+        int i2;
+        int j2;
+
+        if (j == 1) {
+            boolean flag = false;
+            boolean flag1 = false;
+            boolean flag2 = false;
+            boolean flag3 = false;
+            double d11 = 0.0D;
+            double d12 = 0.0D;
+
+            j2 = 0;
+            double d13 = 1.0D / d6;
+
+            for (int k2 = 0; k2 < i; ++k2) {
+                d7 = (d0 + (double) k2) * d3 + this.a;
+                int l2 = (int) d7;
+
+                if (d7 < (double) l2) {
+                    --l2;
+                }
+
+                int i3 = l2 & 255;
+
+                d7 -= (double) l2;
+                d8 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
+
+                for (j1 = 0; j1 < k; ++j1) {
+                    d9 = (d2 + (double) j1) * d5 + this.c;
+                    k1 = (int) d9;
+                    if (d9 < (double) k1) {
+                        --k1;
+                    }
+
+                    l1 = k1 & 255;
+                    d9 -= (double) k1;
+                    d10 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+                    l = this.d[i3] + 0;
+                    int j3 = this.d[l] + l1;
+                    int k3 = this.d[i3 + 1] + 0;
+
+                    i1 = this.d[k3] + l1;
+                    d11 = this.b(d8, this.a(this.d[j3], d7, d9), this.a(this.d[i1], d7 - 1.0D, 0.0D, d9));
+                    d12 = this.b(d8, this.a(this.d[j3 + 1], d7, 0.0D, d9 - 1.0D), this.a(this.d[i1 + 1], d7 - 1.0D, 0.0D, d9 - 1.0D));
+                    double d14 = this.b(d10, d11, d12);
+
+                    i2 = j2++;
+                    adouble[i2] += d14 * d13;
+                }
+            }
+        } else {
+            l = 0;
+            double d15 = 1.0D / d6;
+
+            i1 = -1;
+            boolean flag4 = false;
+            boolean flag5 = false;
+            boolean flag6 = false;
+            boolean flag7 = false;
+            boolean flag8 = false;
+            boolean flag9 = false;
+            double d16 = 0.0D;
+
+            d7 = 0.0D;
+            double d17 = 0.0D;
+
+            d8 = 0.0D;
+
+            for (j1 = 0; j1 < i; ++j1) {
+                d9 = (d0 + (double) j1) * d3 + this.a;
+                k1 = (int) d9;
+                if (d9 < (double) k1) {
+                    --k1;
+                }
+
+                l1 = k1 & 255;
+                d9 -= (double) k1;
+                d10 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
+
+                for (int l3 = 0; l3 < k; ++l3) {
+                    double d18 = (d2 + (double) l3) * d5 + this.c;
+                    int i4 = (int) d18;
+
+                    if (d18 < (double) i4) {
+                        --i4;
+                    }
+
+                    int j4 = i4 & 255;
+
+                    d18 -= (double) i4;
+                    double d19 = d18 * d18 * d18 * (d18 * (d18 * 6.0D - 15.0D) + 10.0D);
+
+                    for (int k4 = 0; k4 < j; ++k4) {
+                        double d20 = (d1 + (double) k4) * d4 + this.b;
+                        int l4 = (int) d20;
+
+                        if (d20 < (double) l4) {
+                            --l4;
+                        }
+
+                        int i5 = l4 & 255;
+
+                        d20 -= (double) l4;
+                        double d21 = d20 * d20 * d20 * (d20 * (d20 * 6.0D - 15.0D) + 10.0D);
+
+                        if (k4 == 0 || i5 != i1) {
+                            i1 = i5;
+                            int j5 = this.d[l1] + i5;
+                            int k5 = this.d[j5] + j4;
+                            int l5 = this.d[j5 + 1] + j4;
+                            int i6 = this.d[l1 + 1] + i5;
+
+                            j2 = this.d[i6] + j4;
+                            int j6 = this.d[i6 + 1] + j4;
+
+                            d16 = this.b(d10, this.a(this.d[k5], d9, d20, d18), this.a(this.d[j2], d9 - 1.0D, d20, d18));
+                            d7 = this.b(d10, this.a(this.d[l5], d9, d20 - 1.0D, d18), this.a(this.d[j6], d9 - 1.0D, d20 - 1.0D, d18));
+                            d17 = this.b(d10, this.a(this.d[k5 + 1], d9, d20, d18 - 1.0D), this.a(this.d[j2 + 1], d9 - 1.0D, d20, d18 - 1.0D));
+                            d8 = this.b(d10, this.a(this.d[l5 + 1], d9, d20 - 1.0D, d18 - 1.0D), this.a(this.d[j6 + 1], d9 - 1.0D, d20 - 1.0D, d18 - 1.0D));
+                        }
+
+                        double d22 = this.b(d21, d16, d7);
+                        double d23 = this.b(d21, d17, d8);
+                        double d24 = this.b(d19, d22, d23);
+
+                        i2 = l++;
+                        adouble[i2] += d24 * d15;
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet0KeepAlive.java b/src/main/java/net/minecraft/server/Packet0KeepAlive.java
new file mode 100644
index 00000000..06ff6604
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet0KeepAlive.java
@@ -0,0 +1,19 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+
+public class Packet0KeepAlive extends Packet {
+
+    public Packet0KeepAlive() {}
+
+    public void a(NetHandler nethandler) {}
+
+    public void a(DataInputStream datainputstream) {}
+
+    public void a(DataOutputStream dataoutputstream) {}
+
+    public int a() {
+        return 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet100OpenWindow.java b/src/main/java/net/minecraft/server/Packet100OpenWindow.java
new file mode 100644
index 00000000..986e9311
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet100OpenWindow.java
@@ -0,0 +1,84 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet100OpenWindow extends Packet {
+
+    public int a;
+    public int b;
+    public String c;
+    public int d;
+
+    public Packet100OpenWindow() {}
+
+    public Packet100OpenWindow(int i, int j, String s, int k) {
+        this.a = i;
+        this.b = j;
+        this.c = s;
+        this.d = k;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readUTF();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeUTF(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 3 + this.c.length();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet101CloseWindow.java b/src/main/java/net/minecraft/server/Packet101CloseWindow.java
new file mode 100644
index 00000000..9f7ba796
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet101CloseWindow.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet101CloseWindow extends Packet {
+
+    public int a;
+
+    public Packet101CloseWindow() {}
+
+    public Packet101CloseWindow(int i) {
+        this.a = i;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet102WindowClick.java b/src/main/java/net/minecraft/server/Packet102WindowClick.java
new file mode 100644
index 00000000..8266e735
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet102WindowClick.java
@@ -0,0 +1,146 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet102WindowClick extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public short d;
+    public ItemStack e;
+    public boolean f;
+
+    public Packet102WindowClick() {}
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e8) {
+			// TODO Auto-generated catch block
+			e8.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e7) {
+			// TODO Auto-generated catch block
+			e7.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte();
+		} catch (IOException e6) {
+			// TODO Auto-generated catch block
+			e6.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readShort();
+		} catch (IOException e5) {
+			// TODO Auto-generated catch block
+			e5.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readBoolean();
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        short short1 = 0;
+		try {
+			short1 = datainputstream.readShort();
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+
+        if (short1 >= 0) {
+            byte b0 = 0;
+			try {
+				b0 = datainputstream.readByte();
+			} catch (IOException e2) {
+				// TODO Auto-generated catch block
+				e2.printStackTrace();
+			}
+            short short2 = 0;
+			try {
+				short2 = datainputstream.readShort();
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+
+            this.e = new ItemStack(short1, b0, short2);
+        } else {
+            this.e = null;
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e8) {
+			// TODO Auto-generated catch block
+			e8.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e7) {
+			// TODO Auto-generated catch block
+			e7.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c);
+		} catch (IOException e6) {
+			// TODO Auto-generated catch block
+			e6.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.d);
+		} catch (IOException e5) {
+			// TODO Auto-generated catch block
+			e5.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeBoolean(this.f);
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        if (this.e == null) {
+            try {
+				dataoutputstream.writeShort(-1);
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+        } else {
+            try {
+				dataoutputstream.writeShort(this.e.id);
+			} catch (IOException e3) {
+				// TODO Auto-generated catch block
+				e3.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(this.e.count);
+			} catch (IOException e2) {
+				// TODO Auto-generated catch block
+				e2.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(this.e.getData());
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+        }
+    }
+
+    public int a() {
+        return 11;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet103SetSlot.java b/src/main/java/net/minecraft/server/Packet103SetSlot.java
new file mode 100644
index 00000000..75c0caf3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet103SetSlot.java
@@ -0,0 +1,113 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet103SetSlot extends Packet {
+
+    public int a;
+    public int b;
+    public ItemStack c;
+
+    public Packet103SetSlot() {}
+
+    public Packet103SetSlot(int i, int j, ItemStack itemstack) {
+        this.a = i;
+        this.b = j;
+        this.c = itemstack == null ? itemstack : itemstack.cloneItemStack();
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        short short1 = 0;
+		try {
+			short1 = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        if (short1 >= 0) {
+            byte b0 = 0;
+			try {
+				b0 = datainputstream.readByte();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            short short2 = 0;
+			try {
+				short2 = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+            this.c = new ItemStack(short1, b0, short2);
+        } else {
+            this.c = null;
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        if (this.c == null) {
+            try {
+				dataoutputstream.writeShort(-1);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        } else {
+            try {
+				dataoutputstream.writeShort(this.c.id);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(this.c.count);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(this.c.getData());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public int a() {
+        return 8;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet104WindowItems.java b/src/main/java/net/minecraft/server/Packet104WindowItems.java
new file mode 100644
index 00000000..c341b799
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet104WindowItems.java
@@ -0,0 +1,125 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.List;
+
+public class Packet104WindowItems extends Packet {
+
+    public int a;
+    public ItemStack[] b;
+
+    public Packet104WindowItems() {}
+
+    public Packet104WindowItems(int i, List list) {
+        this.a = i;
+        this.b = new ItemStack[list.size()];
+
+        for (int j = 0; j < this.b.length; ++j) {
+            ItemStack itemstack = (ItemStack) list.get(j);
+
+            this.b[j] = itemstack == null ? null : itemstack.cloneItemStack();
+        }
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        short short1 = 0;
+		try {
+			short1 = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        this.b = new ItemStack[short1];
+
+        for (int i = 0; i < short1; ++i) {
+            short short2 = 0;
+			try {
+				short2 = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+            if (short2 >= 0) {
+                byte b0 = 0;
+				try {
+					b0 = datainputstream.readByte();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+                short short3 = 0;
+				try {
+					short3 = datainputstream.readShort();
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+
+                this.b[i] = new ItemStack(short2, b0, short3);
+            }
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b.length);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        for (int i = 0; i < this.b.length; ++i) {
+            if (this.b[i] == null) {
+                try {
+					dataoutputstream.writeShort(-1);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+            } else {
+                try {
+					dataoutputstream.writeShort((short) this.b[i].id);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+                try {
+					dataoutputstream.writeByte((byte) this.b[i].count);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+                try {
+					dataoutputstream.writeShort((short) this.b[i].getData());
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+            }
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 3 + this.b.length * 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet105CraftProgressBar.java b/src/main/java/net/minecraft/server/Packet105CraftProgressBar.java
new file mode 100644
index 00000000..1ccb3b01
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet105CraftProgressBar.java
@@ -0,0 +1,70 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet105CraftProgressBar extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+
+    public Packet105CraftProgressBar() {}
+
+    public Packet105CraftProgressBar(int i, int j, int k) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet106Transaction.java b/src/main/java/net/minecraft/server/Packet106Transaction.java
new file mode 100644
index 00000000..e3c33a10
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet106Transaction.java
@@ -0,0 +1,70 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet106Transaction extends Packet {
+
+    public int a;
+    public short b;
+    public boolean c;
+
+    public Packet106Transaction() {}
+
+    public Packet106Transaction(int i, short short1, boolean flag) {
+        this.a = i;
+        this.b = short1;
+        this.c = flag;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte() != 0;
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c ? 1 : 0);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet11PlayerPosition.java b/src/main/java/net/minecraft/server/Packet11PlayerPosition.java
new file mode 100644
index 00000000..3ca8dd6c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet11PlayerPosition.java
@@ -0,0 +1,82 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet11PlayerPosition extends Packet10Flying {
+
+    public Packet11PlayerPosition() {
+        this.h = true;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.x = datainputstream.readDouble();
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			this.y = datainputstream.readDouble();
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			this.stance = datainputstream.readDouble();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.z = datainputstream.readDouble();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			super.a(datainputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeDouble(this.x);
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.y);
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.stance);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.z);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			super.a(dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 33;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet12PlayerLook.java b/src/main/java/net/minecraft/server/Packet12PlayerLook.java
new file mode 100644
index 00000000..1f7345cc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet12PlayerLook.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet12PlayerLook extends Packet10Flying {
+
+    public Packet12PlayerLook() {
+        this.hasLook = true;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.yaw = datainputstream.readFloat();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.pitch = datainputstream.readFloat();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			super.a(datainputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeFloat(this.yaw);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.pitch);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			super.a(dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 9;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet130UpdateSign.java b/src/main/java/net/minecraft/server/Packet130UpdateSign.java
new file mode 100644
index 00000000..f7a627c0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet130UpdateSign.java
@@ -0,0 +1,100 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet130UpdateSign extends Packet {
+
+    public int x;
+    public int y;
+    public int z;
+    public String[] lines;
+
+    public Packet130UpdateSign() {
+        this.k = true;
+    }
+
+    public Packet130UpdateSign(int i, int j, int k, String[] astring) {
+        this.k = true;
+        this.x = i;
+        this.y = j;
+        this.z = k;
+        this.lines = astring;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.x = datainputstream.readInt();
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			this.y = datainputstream.readShort();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.z = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        this.lines = new String[4];
+
+        for (int i = 0; i < 4; ++i) {
+            try {
+				this.lines[i] = a(datainputstream, 15);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.x);
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.y);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.z);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+        for (int i = 0; i < 4; ++i) {
+            try {
+				a(this.lines[i], dataoutputstream);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        int i = 0;
+
+        for (int j = 0; j < 4; ++j) {
+            i += this.lines[j].length();
+        }
+
+        return i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet131.java b/src/main/java/net/minecraft/server/Packet131.java
new file mode 100644
index 00000000..56d0f389
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet131.java
@@ -0,0 +1,85 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet131 extends Packet {
+
+    public short a;
+    public short b;
+    public byte[] c;
+
+    public Packet131() {
+        this.k = true;
+    }
+
+    public Packet131(short short1, short short2, byte[] abyte) {
+        this.k = true;
+        this.a = short1;
+        this.b = short2;
+        this.c = abyte;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readShort();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = new byte[datainputstream.readByte() & 255];
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			datainputstream.readFully(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeShort(this.a);
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c.length);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 4 + this.c.length;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet13PlayerLookMove.java b/src/main/java/net/minecraft/server/Packet13PlayerLookMove.java
new file mode 100644
index 00000000..155f569c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet13PlayerLookMove.java
@@ -0,0 +1,119 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet13PlayerLookMove extends Packet10Flying {
+
+    public Packet13PlayerLookMove() {
+        this.hasLook = true;
+        this.h = true;
+    }
+
+    public Packet13PlayerLookMove(double d0, double d1, double d2, double d3, float f, float f1, boolean flag) {
+        this.x = d0;
+        this.y = d1;
+        this.stance = d2;
+        this.z = d3;
+        this.yaw = f;
+        this.pitch = f1;
+        this.g = flag;
+        this.hasLook = true;
+        this.h = true;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.x = datainputstream.readDouble();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.y = datainputstream.readDouble();
+		} catch (IOException e5) {
+			// TODO Auto-generated catch block
+			e5.printStackTrace();
+		}
+        try {
+			this.stance = datainputstream.readDouble();
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			this.z = datainputstream.readDouble();
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			this.yaw = datainputstream.readFloat();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.pitch = datainputstream.readFloat();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			super.a(datainputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeDouble(this.x);
+		} catch (IOException e6) {
+			// TODO Auto-generated catch block
+			e6.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.y);
+		} catch (IOException e5) {
+			// TODO Auto-generated catch block
+			e5.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.stance);
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.z);
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.yaw);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.pitch);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			super.a(dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 41;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet14BlockDig.java b/src/main/java/net/minecraft/server/Packet14BlockDig.java
new file mode 100644
index 00000000..181ef3e4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet14BlockDig.java
@@ -0,0 +1,90 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet14BlockDig extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int face;
+    public int e;
+
+    public Packet14BlockDig() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.e = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.face = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.write(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.face);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 11;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet15Place.java b/src/main/java/net/minecraft/server/Packet15Place.java
new file mode 100644
index 00000000..7b778128
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet15Place.java
@@ -0,0 +1,133 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet15Place extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int face;
+    public ItemStack itemstack;
+
+    public Packet15Place() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.face = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        short short1 = 0;
+		try {
+			short1 = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+        if (short1 >= 0) {
+            byte b0 = 0;
+			try {
+				b0 = datainputstream.readByte();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            short short2 = 0;
+			try {
+				short2 = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+
+            this.itemstack = new ItemStack(short1, b0, short2);
+        } else {
+            this.itemstack = null;
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.face);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        if (this.itemstack == null) {
+            try {
+				dataoutputstream.writeShort(-1);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        } else {
+            try {
+				dataoutputstream.writeShort(this.itemstack.id);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(this.itemstack.count);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(this.itemstack.getData());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 15;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet16BlockItemSwitch.java b/src/main/java/net/minecraft/server/Packet16BlockItemSwitch.java
new file mode 100644
index 00000000..11e59827
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet16BlockItemSwitch.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet16BlockItemSwitch extends Packet {
+
+    public int itemInHandIndex;
+
+    public Packet16BlockItemSwitch() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.itemInHandIndex = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeShort(this.itemInHandIndex);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 2;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet17.java b/src/main/java/net/minecraft/server/Packet17.java
new file mode 100644
index 00000000..966e3deb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet17.java
@@ -0,0 +1,98 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet17 extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+
+    public Packet17() {}
+
+    public Packet17(Entity entity, int i, int j, int k, int l) {
+        this.e = i;
+        this.b = j;
+        this.c = k;
+        this.d = l;
+        this.a = entity.id;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 14;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet18ArmAnimation.java b/src/main/java/net/minecraft/server/Packet18ArmAnimation.java
new file mode 100644
index 00000000..18ccac79
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet18ArmAnimation.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet18ArmAnimation extends Packet {
+
+    public int a;
+    public int b;
+
+    public Packet18ArmAnimation() {}
+
+    public Packet18ArmAnimation(Entity entity, int i) {
+        this.a = entity.id;
+        this.b = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet19EntityAction.java b/src/main/java/net/minecraft/server/Packet19EntityAction.java
new file mode 100644
index 00000000..665e22a8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet19EntityAction.java
@@ -0,0 +1,51 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet19EntityAction extends Packet {
+
+    public int a;
+    public int animation;
+
+    public Packet19EntityAction() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.animation = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.animation);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet1Login.java b/src/main/java/net/minecraft/server/Packet1Login.java
new file mode 100644
index 00000000..a7ae32e9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet1Login.java
@@ -0,0 +1,84 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet1Login extends Packet {
+
+    public int a;
+    public String name;
+    public long c;
+    public byte d;
+
+    public Packet1Login() {}
+
+    public Packet1Login(String s, int i, long j, byte b0) {
+        this.name = s;
+        this.a = i;
+        this.c = j;
+        this.d = b0;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.name = a(datainputstream, 16);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readLong();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			a(this.name, dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeLong(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 4 + this.name.length() + 4 + 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet200Statistic.java b/src/main/java/net/minecraft/server/Packet200Statistic.java
new file mode 100644
index 00000000..c4a29753
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet200Statistic.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet200Statistic extends Packet {
+
+    public int a;
+    public int b;
+
+    public Packet200Statistic() {}
+
+    public Packet200Statistic(int i, int j) {
+        this.a = i;
+        this.b = j;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 6;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet20NamedEntitySpawn.java b/src/main/java/net/minecraft/server/Packet20NamedEntitySpawn.java
new file mode 100644
index 00000000..1b46ebf5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet20NamedEntitySpawn.java
@@ -0,0 +1,142 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet20NamedEntitySpawn extends Packet {
+
+    public int a;
+    public String b;
+    public int c;
+    public int d;
+    public int e;
+    public byte f;
+    public byte g;
+    public int h;
+
+    public Packet20NamedEntitySpawn() {}
+
+    public Packet20NamedEntitySpawn(EntityHuman entityhuman) {
+        this.a = entityhuman.id;
+        this.b = entityhuman.name;
+        this.c = MathHelper.floor(entityhuman.locX * 32.0D);
+        this.d = MathHelper.floor(entityhuman.locY * 32.0D);
+        this.e = MathHelper.floor(entityhuman.locZ * 32.0D);
+        this.f = (byte) ((int) (entityhuman.yaw * 256.0F / 360.0F));
+        this.g = (byte) ((int) (entityhuman.pitch * 256.0F / 360.0F));
+        ItemStack itemstack = entityhuman.inventory.getItemInHand();
+
+        this.h = itemstack == null ? 0 : itemstack.id;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = a(datainputstream, 16);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.g = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.h = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			a(this.b, dataoutputstream);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.f);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.g);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.h);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 28;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet21PickupSpawn.java b/src/main/java/net/minecraft/server/Packet21PickupSpawn.java
new file mode 100644
index 00000000..28586b42
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet21PickupSpawn.java
@@ -0,0 +1,168 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet21PickupSpawn extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public byte e;
+    public byte f;
+    public byte g;
+    public int h;
+    public int i;
+    public int l;
+
+    public Packet21PickupSpawn() {}
+
+    public Packet21PickupSpawn(EntityItem entityitem) {
+        this.a = entityitem.id;
+        this.h = entityitem.itemStack.id;
+        this.i = entityitem.itemStack.count;
+        this.l = entityitem.itemStack.getData();
+        this.b = MathHelper.floor(entityitem.locX * 32.0D);
+        this.c = MathHelper.floor(entityitem.locY * 32.0D);
+        this.d = MathHelper.floor(entityitem.locZ * 32.0D);
+        this.e = (byte) ((int) (entityitem.motX * 128.0D));
+        this.f = (byte) ((int) (entityitem.motY * 128.0D));
+        this.g = (byte) ((int) (entityitem.motZ * 128.0D));
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.h = datainputstream.readShort();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.i = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.l = datainputstream.readShort();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.g = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.h);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.i);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.l);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.g);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 24;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet22Collect.java b/src/main/java/net/minecraft/server/Packet22Collect.java
new file mode 100644
index 00000000..2f24d642
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet22Collect.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet22Collect extends Packet {
+
+    public int a;
+    public int b;
+
+    public Packet22Collect() {}
+
+    public Packet22Collect(int i, int j) {
+        this.a = i;
+        this.b = j;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 8;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet23VehicleSpawn.java b/src/main/java/net/minecraft/server/Packet23VehicleSpawn.java
new file mode 100644
index 00000000..5a1e1eb8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet23VehicleSpawn.java
@@ -0,0 +1,193 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet23VehicleSpawn extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+    public int f;
+    public int g;
+    public int h;
+    public int i;
+
+    public Packet23VehicleSpawn() {}
+
+    public Packet23VehicleSpawn(Entity entity, int i) {
+        this(entity, i, 0);
+    }
+
+    public Packet23VehicleSpawn(Entity entity, int i, int j) {
+        this.a = entity.id;
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        this.h = i;
+        this.i = j;
+        if (j > 0) {
+            double d0 = entity.motX;
+            double d1 = entity.motY;
+            double d2 = entity.motZ;
+            double d3 = 3.9D;
+
+            if (d0 < -d3) {
+                d0 = -d3;
+            }
+
+            if (d1 < -d3) {
+                d1 = -d3;
+            }
+
+            if (d2 < -d3) {
+                d2 = -d3;
+            }
+
+            if (d0 > d3) {
+                d0 = d3;
+            }
+
+            if (d1 > d3) {
+                d1 = d3;
+            }
+
+            if (d2 > d3) {
+                d2 = d3;
+            }
+
+            this.e = (int) (d0 * 8000.0D);
+            this.f = (int) (d1 * 8000.0D);
+            this.g = (int) (d2 * 8000.0D);
+        }
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.h = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.i = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        if (this.i > 0) {
+            try {
+				this.e = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				this.f = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				this.g = datainputstream.readShort();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.h);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.i);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        if (this.i > 0) {
+            try {
+				dataoutputstream.writeShort(this.e);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(this.f);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeShort(this.g);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 21 + this.i > 0 ? 6 : 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet24MobSpawn.java b/src/main/java/net/minecraft/server/Packet24MobSpawn.java
new file mode 100644
index 00000000..da2ff44a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet24MobSpawn.java
@@ -0,0 +1,132 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.List;
+
+public class Packet24MobSpawn extends Packet {
+
+    public int a;
+    public byte b;
+    public int c;
+    public int d;
+    public int e;
+    public byte f;
+    public byte g;
+    private DataWatcher h;
+    private List i;
+
+    public Packet24MobSpawn() {}
+
+    public Packet24MobSpawn(EntityLiving entityliving) {
+        this.a = entityliving.id;
+        this.b = (byte) EntityTypes.a(entityliving);
+        this.c = MathHelper.floor(entityliving.locX * 32.0D);
+        this.d = MathHelper.floor(entityliving.locY * 32.0D);
+        this.e = MathHelper.floor(entityliving.locZ * 32.0D);
+        this.f = (byte) ((int) (entityliving.yaw * 256.0F / 360.0F));
+        this.g = (byte) ((int) (entityliving.pitch * 256.0F / 360.0F));
+        this.h = entityliving.aa();
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.g = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        this.i = DataWatcher.a(datainputstream);
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.g);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        this.h.a(dataoutputstream);
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 20;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet255KickDisconnect.java b/src/main/java/net/minecraft/server/Packet255KickDisconnect.java
new file mode 100644
index 00000000..344caa91
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet255KickDisconnect.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet255KickDisconnect extends Packet {
+
+    public String a;
+
+    public Packet255KickDisconnect() {}
+
+    public Packet255KickDisconnect(String s) {
+        this.a = s;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = a(datainputstream, 100);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			a(this.a, dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return this.a.length();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet25EntityPainting.java b/src/main/java/net/minecraft/server/Packet25EntityPainting.java
new file mode 100644
index 00000000..29ab7c78
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet25EntityPainting.java
@@ -0,0 +1,112 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet25EntityPainting extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+    public String f;
+
+    public Packet25EntityPainting() {}
+
+    public Packet25EntityPainting(EntityPainting entitypainting) {
+        this.a = entitypainting.id;
+        this.b = entitypainting.b;
+        this.c = entitypainting.c;
+        this.d = entitypainting.d;
+        this.e = entitypainting.a;
+        this.f = entitypainting.e.A;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.f = a(datainputstream, EnumArt.z);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			a(this.f, dataoutputstream);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 24;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet27.java b/src/main/java/net/minecraft/server/Packet27.java
new file mode 100644
index 00000000..d7cf70a8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet27.java
@@ -0,0 +1,127 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet27 extends Packet {
+
+    private float a;
+    private float b;
+    private boolean c;
+    private boolean d;
+    private float e;
+    private float f;
+
+    public Packet27() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readFloat();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readFloat();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readFloat();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readFloat();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readBoolean();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readBoolean();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeFloat(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeBoolean(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeBoolean(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 18;
+    }
+
+    public float c() {
+        return this.a;
+    }
+
+    public float d() {
+        return this.e;
+    }
+
+    public float e() {
+        return this.b;
+    }
+
+    public float f() {
+        return this.f;
+    }
+
+    public boolean g() {
+        return this.c;
+    }
+
+    public boolean h() {
+        return this.d;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet28EntityVelocity.java b/src/main/java/net/minecraft/server/Packet28EntityVelocity.java
new file mode 100644
index 00000000..aea95123
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet28EntityVelocity.java
@@ -0,0 +1,114 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet28EntityVelocity extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+
+    public Packet28EntityVelocity() {}
+
+    public Packet28EntityVelocity(Entity entity) {
+        this(entity.id, entity.motX, entity.motY, entity.motZ);
+    }
+
+    public Packet28EntityVelocity(int i, double d0, double d1, double d2) {
+        this.a = i;
+        double d3 = 3.9D;
+
+        if (d0 < -d3) {
+            d0 = -d3;
+        }
+
+        if (d1 < -d3) {
+            d1 = -d3;
+        }
+
+        if (d2 < -d3) {
+            d2 = -d3;
+        }
+
+        if (d0 > d3) {
+            d0 = d3;
+        }
+
+        if (d1 > d3) {
+            d1 = d3;
+        }
+
+        if (d2 > d3) {
+            d2 = d3;
+        }
+
+        this.b = (int) (d0 * 8000.0D);
+        this.c = (int) (d1 * 8000.0D);
+        this.d = (int) (d2 * 8000.0D);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 10;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet29DestroyEntity.java b/src/main/java/net/minecraft/server/Packet29DestroyEntity.java
new file mode 100644
index 00000000..1d82f30e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet29DestroyEntity.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet29DestroyEntity extends Packet {
+
+    public int a;
+
+    public Packet29DestroyEntity() {}
+
+    public Packet29DestroyEntity(int i) {
+        this.a = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet2Handshake.java b/src/main/java/net/minecraft/server/Packet2Handshake.java
new file mode 100644
index 00000000..d3ae676f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet2Handshake.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet2Handshake extends Packet {
+
+    public String a;
+
+    public Packet2Handshake() {}
+
+    public Packet2Handshake(String s) {
+        this.a = s;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = a(datainputstream, 32);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			a(this.a, dataoutputstream);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 4 + this.a.length() + 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet30Entity.java b/src/main/java/net/minecraft/server/Packet30Entity.java
new file mode 100644
index 00000000..74f68964
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet30Entity.java
@@ -0,0 +1,48 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet30Entity extends Packet {
+
+    public int a;
+    public byte b;
+    public byte c;
+    public byte d;
+    public byte e;
+    public byte f;
+    public boolean g = false;
+
+    public Packet30Entity() {}
+
+    public Packet30Entity(int i) {
+        this.a = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet31RelEntityMove.java b/src/main/java/net/minecraft/server/Packet31RelEntityMove.java
new file mode 100644
index 00000000..476fbfb2
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet31RelEntityMove.java
@@ -0,0 +1,65 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet31RelEntityMove extends Packet30Entity {
+
+    public Packet31RelEntityMove() {}
+
+    public Packet31RelEntityMove(int i, byte b0, byte b1, byte b2) {
+        super(i);
+        this.b = b0;
+        this.c = b1;
+        this.d = b2;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        super.a(datainputstream);
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        super.a(dataoutputstream);
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 7;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet32EntityLook.java b/src/main/java/net/minecraft/server/Packet32EntityLook.java
new file mode 100644
index 00000000..0943bdef
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet32EntityLook.java
@@ -0,0 +1,55 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet32EntityLook extends Packet30Entity {
+
+    public Packet32EntityLook() {
+        this.g = true;
+    }
+
+    public Packet32EntityLook(int i, byte b0, byte b1) {
+        super(i);
+        this.e = b0;
+        this.f = b1;
+        this.g = true;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        super.a(datainputstream);
+        try {
+			this.e = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        super.a(dataoutputstream);
+        try {
+			dataoutputstream.writeByte(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 6;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet33RelEntityMoveLook.java b/src/main/java/net/minecraft/server/Packet33RelEntityMoveLook.java
new file mode 100644
index 00000000..4c16d844
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet33RelEntityMoveLook.java
@@ -0,0 +1,94 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet33RelEntityMoveLook extends Packet30Entity {
+
+    public Packet33RelEntityMoveLook() {
+        this.g = true;
+    }
+
+    public Packet33RelEntityMoveLook(int i, byte b0, byte b1, byte b2, byte b3, byte b4) {
+        super(i);
+        this.b = b0;
+        this.c = b1;
+        this.d = b2;
+        this.e = b3;
+        this.f = b4;
+        this.g = true;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        super.a(datainputstream);
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        super.a(dataoutputstream);
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 9;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet34EntityTeleport.java b/src/main/java/net/minecraft/server/Packet34EntityTeleport.java
new file mode 100644
index 00000000..c8be133b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet34EntityTeleport.java
@@ -0,0 +1,121 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet34EntityTeleport extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public byte e;
+    public byte f;
+
+    public Packet34EntityTeleport() {}
+
+    public Packet34EntityTeleport(Entity entity) {
+        this.a = entity.id;
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        this.e = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
+        this.f = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
+    }
+
+    public Packet34EntityTeleport(int i, int j, int k, int l, byte b0, byte b1) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.d = l;
+        this.e = b0;
+        this.f = b1;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = (byte) datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.f = (byte) datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.f);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 34;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet38EntityStatus.java b/src/main/java/net/minecraft/server/Packet38EntityStatus.java
new file mode 100644
index 00000000..8f7fb465
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet38EntityStatus.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet38EntityStatus extends Packet {
+
+    public int a;
+    public byte b;
+
+    public Packet38EntityStatus() {}
+
+    public Packet38EntityStatus(int i, byte b0) {
+        this.a = i;
+        this.b = b0;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet39AttachEntity.java b/src/main/java/net/minecraft/server/Packet39AttachEntity.java
new file mode 100644
index 00000000..196a371e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet39AttachEntity.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet39AttachEntity extends Packet {
+
+    public int a;
+    public int b;
+
+    public Packet39AttachEntity() {}
+
+    public Packet39AttachEntity(Entity entity, Entity entity1) {
+        this.a = entity.id;
+        this.b = entity1 != null ? entity1.id : -1;
+    }
+
+    public int a() {
+        return 8;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet40EntityMetadata.java b/src/main/java/net/minecraft/server/Packet40EntityMetadata.java
new file mode 100644
index 00000000..8234bd8e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet40EntityMetadata.java
@@ -0,0 +1,47 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.List;
+
+public class Packet40EntityMetadata extends Packet {
+
+    public int a;
+    private List b;
+
+    public Packet40EntityMetadata() {}
+
+    public Packet40EntityMetadata(int i, DataWatcher datawatcher) {
+        this.a = i;
+        this.b = datawatcher.b();
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        this.b = DataWatcher.a(datainputstream);
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        DataWatcher.a(this.b, dataoutputstream);
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet4UpdateTime.java b/src/main/java/net/minecraft/server/Packet4UpdateTime.java
new file mode 100644
index 00000000..94efa840
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet4UpdateTime.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet4UpdateTime extends Packet {
+
+    public long a;
+
+    public Packet4UpdateTime() {}
+
+    public Packet4UpdateTime(long i) {
+        this.a = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readLong();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeLong(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 8;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet50PreChunk.java b/src/main/java/net/minecraft/server/Packet50PreChunk.java
new file mode 100644
index 00000000..0af1cdbd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet50PreChunk.java
@@ -0,0 +1,73 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet50PreChunk extends Packet {
+
+    public int a;
+    public int b;
+    public boolean c;
+
+    public Packet50PreChunk() {
+        this.k = false;
+    }
+
+    public Packet50PreChunk(int i, int j, boolean flag) {
+        this.k = false;
+        this.a = i;
+        this.b = j;
+        this.c = flag;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.read() != 0;
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.c ? 1 : 0);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 9;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet52MultiBlockChange.java b/src/main/java/net/minecraft/server/Packet52MultiBlockChange.java
new file mode 100644
index 00000000..ea91f26e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet52MultiBlockChange.java
@@ -0,0 +1,137 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet52MultiBlockChange extends Packet {
+
+    public int a;
+    public int b;
+    public short[] c;
+    public byte[] d;
+    public byte[] e;
+    public int f;
+
+    public Packet52MultiBlockChange() {
+        this.k = true;
+    }
+
+    public Packet52MultiBlockChange(int i, int j, short[] ashort, int k, World world) {
+        this.k = true;
+        this.a = i;
+        this.b = j;
+        this.f = k;
+        this.c = new short[k];
+        this.d = new byte[k];
+        this.e = new byte[k];
+        Chunk chunk = world.getChunkAt(i, j);
+
+        for (int l = 0; l < k; ++l) {
+            int i1 = ashort[l] >> 12 & 15;
+            int j1 = ashort[l] >> 8 & 15;
+            int k1 = ashort[l] & 255;
+
+            this.c[l] = ashort[l];
+            this.d[l] = (byte) chunk.getTypeId(i1, k1, j1);
+            this.e[l] = (byte) chunk.getData(i1, k1, j1);
+        }
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.f = datainputstream.readShort() & '\uffff';
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        this.c = new short[this.f];
+        this.d = new byte[this.f];
+        this.e = new byte[this.f];
+
+        for (int i = 0; i < this.f; ++i) {
+            try {
+				this.c[i] = datainputstream.readShort();
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+        }
+
+        try {
+			datainputstream.readFully(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			datainputstream.readFully(this.e);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort((short) this.f);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+        for (int i = 0; i < this.f; ++i) {
+            try {
+				dataoutputstream.writeShort(this.c[i]);
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+        }
+
+        try {
+			dataoutputstream.write(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 10 + this.f * 4;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet53BlockChange.java b/src/main/java/net/minecraft/server/Packet53BlockChange.java
new file mode 100644
index 00000000..85fa9d45
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet53BlockChange.java
@@ -0,0 +1,101 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet53BlockChange extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int material;
+    public int data;
+
+    public Packet53BlockChange() {
+        this.k = true;
+    }
+
+    public Packet53BlockChange(int i, int j, int k, World world) {
+        this.k = true;
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.material = world.getTypeId(i, j, k);
+        this.data = world.getData(i, j, k);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.material = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.data = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.material);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.data);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 11;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet54PlayNoteBlock.java b/src/main/java/net/minecraft/server/Packet54PlayNoteBlock.java
new file mode 100644
index 00000000..4fd1a393
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet54PlayNoteBlock.java
@@ -0,0 +1,98 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet54PlayNoteBlock extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+
+    public Packet54PlayNoteBlock() {}
+
+    public Packet54PlayNoteBlock(int i, int j, int k, int l, int i1) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.d = l;
+        this.e = i1;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.read();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.read();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.write(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 12;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet5EntityEquipment.java b/src/main/java/net/minecraft/server/Packet5EntityEquipment.java
new file mode 100644
index 00000000..702174bd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet5EntityEquipment.java
@@ -0,0 +1,89 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet5EntityEquipment extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+
+    public Packet5EntityEquipment() {}
+
+    public Packet5EntityEquipment(int i, int j, ItemStack itemstack) {
+        this.a = i;
+        this.b = j;
+        if (itemstack == null) {
+            this.c = -1;
+            this.d = 0;
+        } else {
+            this.c = itemstack.id;
+            this.d = itemstack.getData();
+        }
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeShort(this.d);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 8;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet60Explosion.java b/src/main/java/net/minecraft/server/Packet60Explosion.java
new file mode 100644
index 00000000..96733b69
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet60Explosion.java
@@ -0,0 +1,163 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+public class Packet60Explosion extends Packet {
+
+    public double a;
+    public double b;
+    public double c;
+    public float d;
+    public Set e;
+
+    public Packet60Explosion() {}
+
+    public Packet60Explosion(double d0, double d1, double d2, float f, Set set) {
+        this.a = d0;
+        this.b = d1;
+        this.c = d2;
+        this.d = f;
+        this.e = new HashSet(set);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readDouble();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readDouble();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readDouble();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readFloat();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        int i = 0;
+		try {
+			i = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+        this.e = new HashSet();
+        int j = (int) this.a;
+        int k = (int) this.b;
+        int l = (int) this.c;
+
+        for (int i1 = 0; i1 < i; ++i1) {
+            int j1 = 0;
+			try {
+				j1 = datainputstream.readByte() + j;
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+            int k1 = 0;
+			try {
+				k1 = datainputstream.readByte() + k;
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+            int l1 = 0;
+			try {
+				l1 = datainputstream.readByte() + l;
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+
+            this.e.add(new ChunkPosition(j1, k1, l1));
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeDouble(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.b);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeDouble(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeFloat(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.e.size());
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        int i = (int) this.a;
+        int j = (int) this.b;
+        int k = (int) this.c;
+        Iterator iterator = this.e.iterator();
+
+        while (iterator.hasNext()) {
+            ChunkPosition chunkposition = (ChunkPosition) iterator.next();
+            int l = chunkposition.x - i;
+            int i1 = chunkposition.y - j;
+            int j1 = chunkposition.z - k;
+
+            try {
+				dataoutputstream.writeByte(l);
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(i1);
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+            try {
+				dataoutputstream.writeByte(j1);
+			} catch (IOException e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 32 + this.e.size() * 3;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet61.java b/src/main/java/net/minecraft/server/Packet61.java
new file mode 100644
index 00000000..5cb1622b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet61.java
@@ -0,0 +1,98 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet61 extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+
+    public Packet61() {}
+
+    public Packet61(int i, int j, int k, int l, int i1) {
+        this.a = i;
+        this.c = j;
+        this.d = k;
+        this.e = l;
+        this.b = i1;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readByte();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 20;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet6SpawnPosition.java b/src/main/java/net/minecraft/server/Packet6SpawnPosition.java
new file mode 100644
index 00000000..6861cfb9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet6SpawnPosition.java
@@ -0,0 +1,70 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet6SpawnPosition extends Packet {
+
+    public int x;
+    public int y;
+    public int z;
+
+    public Packet6SpawnPosition() {}
+
+    public Packet6SpawnPosition(int i, int j, int k) {
+        this.x = i;
+        this.y = j;
+        this.z = k;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.x = datainputstream.readInt();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.y = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			this.z = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.x);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.y);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.z);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 12;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet70Bed.java b/src/main/java/net/minecraft/server/Packet70Bed.java
new file mode 100644
index 00000000..21fe44ed
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet70Bed.java
@@ -0,0 +1,43 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet70Bed extends Packet {
+
+    public static final String[] a = new String[] { "tile.bed.notValid", null, null};
+    public int b;
+
+    public Packet70Bed() {}
+
+    public Packet70Bed(int i) {
+        this.b = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.b = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.b);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet71Weather.java b/src/main/java/net/minecraft/server/Packet71Weather.java
new file mode 100644
index 00000000..9d56ace7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet71Weather.java
@@ -0,0 +1,100 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet71Weather extends Packet {
+
+    public int a;
+    public int b;
+    public int c;
+    public int d;
+    public int e;
+
+    public Packet71Weather() {}
+
+    public Packet71Weather(Entity entity) {
+        this.a = entity.id;
+        this.b = MathHelper.floor(entity.locX * 32.0D);
+        this.c = MathHelper.floor(entity.locY * 32.0D);
+        this.d = MathHelper.floor(entity.locZ * 32.0D);
+        if (entity instanceof EntityWeatherStorm) {
+            this.e = 1;
+        }
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			this.e = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.b = datainputstream.readInt();
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readInt();
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			this.d = datainputstream.readInt();
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e4) {
+			// TODO Auto-generated catch block
+			e4.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.b);
+		} catch (IOException e3) {
+			// TODO Auto-generated catch block
+			e3.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.c);
+		} catch (IOException e2) {
+			// TODO Auto-generated catch block
+			e2.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.d);
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 17;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet7UseEntity.java b/src/main/java/net/minecraft/server/Packet7UseEntity.java
new file mode 100644
index 00000000..7eaa33e6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet7UseEntity.java
@@ -0,0 +1,64 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet7UseEntity extends Packet {
+
+    public int a;
+    public int target;
+    public int c;
+
+    public Packet7UseEntity() {}
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.target = datainputstream.readInt();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			this.c = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeInt(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeInt(this.target);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+        try {
+			dataoutputstream.writeByte(this.c);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 9;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet8UpdateHealth.java b/src/main/java/net/minecraft/server/Packet8UpdateHealth.java
new file mode 100644
index 00000000..3a16105b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet8UpdateHealth.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet8UpdateHealth extends Packet {
+
+    public int a;
+
+    public Packet8UpdateHealth() {}
+
+    public Packet8UpdateHealth(int i) {
+        this.a = i;
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readShort();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeShort(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public int a() {
+        return 2;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet9Respawn.java b/src/main/java/net/minecraft/server/Packet9Respawn.java
new file mode 100644
index 00000000..82439638
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet9Respawn.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+public class Packet9Respawn extends Packet {
+
+    public byte a;
+
+    public Packet9Respawn() {}
+
+    public Packet9Respawn(byte b0) {
+        this.a = b0;
+    }
+
+    public void a(NetHandler nethandler) {
+        nethandler.a(this);
+    }
+
+    public void a(DataInputStream datainputstream) {
+        try {
+			this.a = datainputstream.readByte();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public void a(DataOutputStream dataoutputstream) {
+        try {
+			dataoutputstream.writeByte(this.a);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+    }
+
+    public int a() {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Path.java b/src/main/java/net/minecraft/server/Path.java
new file mode 100644
index 00000000..9575e13d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Path.java
@@ -0,0 +1,128 @@
+package net.minecraft.server;
+
+public class Path {
+
+    private PathPoint[] a = new PathPoint[1024];
+    private int b = 0;
+
+    public Path() {}
+
+    public PathPoint a(PathPoint pathpoint) {
+        if (pathpoint.d >= 0) {
+            throw new IllegalStateException("OW KNOWS!");
+        } else {
+            if (this.b == this.a.length) {
+                PathPoint[] apathpoint = new PathPoint[this.b << 1];
+
+                System.arraycopy(this.a, 0, apathpoint, 0, this.b);
+                this.a = apathpoint;
+            }
+
+            this.a[this.b] = pathpoint;
+            pathpoint.d = this.b;
+            this.a(this.b++);
+            return pathpoint;
+        }
+    }
+
+    public void a() {
+        this.b = 0;
+    }
+
+    public PathPoint b() {
+        PathPoint pathpoint = this.a[0];
+
+        this.a[0] = this.a[--this.b];
+        this.a[this.b] = null;
+        if (this.b > 0) {
+            this.b(0);
+        }
+
+        pathpoint.d = -1;
+        return pathpoint;
+    }
+
+    public void a(PathPoint pathpoint, float f) {
+        float f1 = pathpoint.g;
+
+        pathpoint.g = f;
+        if (f < f1) {
+            this.a(pathpoint.d);
+        } else {
+            this.b(pathpoint.d);
+        }
+    }
+
+    private void a(int i) {
+        PathPoint pathpoint = this.a[i];
+
+        int j;
+
+        for (float f = pathpoint.g; i > 0; i = j) {
+            j = i - 1 >> 1;
+            PathPoint pathpoint1 = this.a[j];
+
+            if (f >= pathpoint1.g) {
+                break;
+            }
+
+            this.a[i] = pathpoint1;
+            pathpoint1.d = i;
+        }
+
+        this.a[i] = pathpoint;
+        pathpoint.d = i;
+    }
+
+    private void b(int i) {
+        PathPoint pathpoint = this.a[i];
+        float f = pathpoint.g;
+
+        while (true) {
+            int j = 1 + (i << 1);
+            int k = j + 1;
+
+            if (j >= this.b) {
+                break;
+            }
+
+            PathPoint pathpoint1 = this.a[j];
+            float f1 = pathpoint1.g;
+            PathPoint pathpoint2;
+            float f2;
+
+            if (k >= this.b) {
+                pathpoint2 = null;
+                f2 = Float.POSITIVE_INFINITY;
+            } else {
+                pathpoint2 = this.a[k];
+                f2 = pathpoint2.g;
+            }
+
+            if (f1 < f2) {
+                if (f1 >= f) {
+                    break;
+                }
+
+                this.a[i] = pathpoint1;
+                pathpoint1.d = i;
+                i = j;
+            } else {
+                if (f2 >= f) {
+                    break;
+                }
+
+                this.a[i] = pathpoint2;
+                pathpoint2.d = i;
+                i = k;
+            }
+        }
+
+        this.a[i] = pathpoint;
+        pathpoint.d = i;
+    }
+
+    public boolean c() {
+        return this.b == 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PathEntity.java b/src/main/java/net/minecraft/server/PathEntity.java
new file mode 100644
index 00000000..2a6130de
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathEntity.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+public class PathEntity {
+
+    private final PathPoint[] b;
+    public final int a;
+    private int c;
+
+    public PathEntity(PathPoint[] apathpoint) {
+        this.b = apathpoint;
+        this.a = apathpoint.length;
+    }
+
+    public void a() {
+        ++this.c;
+    }
+
+    public boolean b() {
+        return this.c >= this.b.length;
+    }
+
+    public PathPoint c() {
+        return this.a > 0 ? this.b[this.a - 1] : null;
+    }
+
+    public Vec3D a(Entity entity) {
+        double d0 = (double) this.b[this.c].a + (double) ((int) (entity.length + 1.0F)) * 0.5D;
+        double d1 = (double) this.b[this.c].b;
+        double d2 = (double) this.b[this.c].c + (double) ((int) (entity.length + 1.0F)) * 0.5D;
+
+        return Vec3D.create(d0, d1, d2);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PathPoint.java b/src/main/java/net/minecraft/server/PathPoint.java
new file mode 100644
index 00000000..0f7e0008
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathPoint.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+public class PathPoint {
+
+    public final int a;
+    public final int b;
+    public final int c;
+    private final int j;
+    int d = -1;
+    float e;
+    float f;
+    float g;
+    PathPoint h;
+    public boolean i = false;
+
+    public PathPoint(int i, int j, int k) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.j = a(i, j, k);
+    }
+
+    public static int a(int i, int j, int k) {
+        return j & 255 | (i & 32767) << 8 | (k & 32767) << 24 | (i < 0 ? Integer.MIN_VALUE : 0) | (k < 0 ? '\u8000' : 0);
+    }
+
+    public float a(PathPoint pathpoint) {
+        float f = (float) (pathpoint.a - this.a);
+        float f1 = (float) (pathpoint.b - this.b);
+        float f2 = (float) (pathpoint.c - this.c);
+
+        return MathHelper.c(f * f + f1 * f1 + f2 * f2);
+    }
+
+    public boolean equals(Object object) {
+        if (!(object instanceof PathPoint)) {
+            return false;
+        } else {
+            PathPoint pathpoint = (PathPoint) object;
+
+            return this.j == pathpoint.j && this.a == pathpoint.a && this.b == pathpoint.b && this.c == pathpoint.c;
+        }
+    }
+
+    public int hashCode() {
+        return this.j;
+    }
+
+    public boolean a() {
+        return this.d >= 0;
+    }
+
+    public String toString() {
+        return this.a + ", " + this.b + ", " + this.c;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
new file mode 100644
index 00000000..b304b9fb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -0,0 +1,217 @@
+package net.minecraft.server;
+
+public class Pathfinder {
+
+    private IBlockAccess a;
+    private Path b = new Path();
+    private EntityList c = new EntityList();
+    private PathPoint[] d = new PathPoint[32];
+
+    public Pathfinder(IBlockAccess iblockaccess) {
+        this.a = iblockaccess;
+    }
+
+    public PathEntity a(Entity entity, Entity entity1, float f) {
+        return this.a(entity, entity1.locX, entity1.boundingBox.b, entity1.locZ, f);
+    }
+
+    public PathEntity a(Entity entity, int i, int j, int k, float f) {
+        return this.a(entity, (double) ((float) i + 0.5F), (double) ((float) j + 0.5F), (double) ((float) k + 0.5F), f);
+    }
+
+    private PathEntity a(Entity entity, double d0, double d1, double d2, float f) {
+        this.b.a();
+        this.c.a();
+        PathPoint pathpoint = this.a(MathHelper.floor(entity.boundingBox.a), MathHelper.floor(entity.boundingBox.b), MathHelper.floor(entity.boundingBox.c));
+        PathPoint pathpoint1 = this.a(MathHelper.floor(d0 - (double) (entity.length / 2.0F)), MathHelper.floor(d1), MathHelper.floor(d2 - (double) (entity.length / 2.0F)));
+        PathPoint pathpoint2 = new PathPoint(MathHelper.d(entity.length + 1.0F), MathHelper.d(entity.width + 1.0F), MathHelper.d(entity.length + 1.0F));
+        PathEntity pathentity = this.a(entity, pathpoint, pathpoint1, pathpoint2, f);
+
+        return pathentity;
+    }
+
+    private PathEntity a(Entity entity, PathPoint pathpoint, PathPoint pathpoint1, PathPoint pathpoint2, float f) {
+        pathpoint.e = 0.0F;
+        pathpoint.f = pathpoint.a(pathpoint1);
+        pathpoint.g = pathpoint.f;
+        this.b.a();
+        this.b.a(pathpoint);
+        PathPoint pathpoint3 = pathpoint;
+
+        while (!this.b.c()) {
+            PathPoint pathpoint4 = this.b.b();
+
+            if (pathpoint4.equals(pathpoint1)) {
+                return this.a(pathpoint, pathpoint1);
+            }
+
+            if (pathpoint4.a(pathpoint1) < pathpoint3.a(pathpoint1)) {
+                pathpoint3 = pathpoint4;
+            }
+
+            pathpoint4.i = true;
+            int i = this.b(entity, pathpoint4, pathpoint2, pathpoint1, f);
+
+            for (int j = 0; j < i; ++j) {
+                PathPoint pathpoint5 = this.d[j];
+                float f1 = pathpoint4.e + pathpoint4.a(pathpoint5);
+
+                if (!pathpoint5.a() || f1 < pathpoint5.e) {
+                    pathpoint5.h = pathpoint4;
+                    pathpoint5.e = f1;
+                    pathpoint5.f = pathpoint5.a(pathpoint1);
+                    if (pathpoint5.a()) {
+                        this.b.a(pathpoint5, pathpoint5.e + pathpoint5.f);
+                    } else {
+                        pathpoint5.g = pathpoint5.e + pathpoint5.f;
+                        this.b.a(pathpoint5);
+                    }
+                }
+            }
+        }
+
+        if (pathpoint3 == pathpoint) {
+            return null;
+        } else {
+            return this.a(pathpoint, pathpoint3);
+        }
+    }
+
+    private int b(Entity entity, PathPoint pathpoint, PathPoint pathpoint1, PathPoint pathpoint2, float f) {
+        int i = 0;
+        byte b0 = 0;
+
+        if (this.a(entity, pathpoint.a, pathpoint.b + 1, pathpoint.c, pathpoint1) == 1) {
+            b0 = 1;
+        }
+
+        PathPoint pathpoint3 = this.a(entity, pathpoint.a, pathpoint.b, pathpoint.c + 1, pathpoint1, b0);
+        PathPoint pathpoint4 = this.a(entity, pathpoint.a - 1, pathpoint.b, pathpoint.c, pathpoint1, b0);
+        PathPoint pathpoint5 = this.a(entity, pathpoint.a + 1, pathpoint.b, pathpoint.c, pathpoint1, b0);
+        PathPoint pathpoint6 = this.a(entity, pathpoint.a, pathpoint.b, pathpoint.c - 1, pathpoint1, b0);
+
+        if (pathpoint3 != null && !pathpoint3.i && pathpoint3.a(pathpoint2) < f) {
+            this.d[i++] = pathpoint3;
+        }
+
+        if (pathpoint4 != null && !pathpoint4.i && pathpoint4.a(pathpoint2) < f) {
+            this.d[i++] = pathpoint4;
+        }
+
+        if (pathpoint5 != null && !pathpoint5.i && pathpoint5.a(pathpoint2) < f) {
+            this.d[i++] = pathpoint5;
+        }
+
+        if (pathpoint6 != null && !pathpoint6.i && pathpoint6.a(pathpoint2) < f) {
+            this.d[i++] = pathpoint6;
+        }
+
+        return i;
+    }
+
+    private PathPoint a(Entity entity, int i, int j, int k, PathPoint pathpoint, int l) {
+        PathPoint pathpoint1 = null;
+
+        if (this.a(entity, i, j, k, pathpoint) == 1) {
+            pathpoint1 = this.a(i, j, k);
+        }
+
+        if (pathpoint1 == null && l > 0 && this.a(entity, i, j + l, k, pathpoint) == 1) {
+            pathpoint1 = this.a(i, j + l, k);
+            j += l;
+        }
+
+        if (pathpoint1 != null) {
+            int i1 = 0;
+            int j1 = 0;
+
+            while (j > 0 && (j1 = this.a(entity, i, j - 1, k, pathpoint)) == 1) {
+                ++i1;
+                if (i1 >= 4) {
+                    return null;
+                }
+
+                --j;
+                if (j > 0) {
+                    pathpoint1 = this.a(i, j, k);
+                }
+            }
+
+            if (j1 == -2) {
+                return null;
+            }
+        }
+
+        return pathpoint1;
+    }
+
+    private final PathPoint a(int i, int j, int k) {
+        int l = PathPoint.a(i, j, k);
+        PathPoint pathpoint = (PathPoint) this.c.a(l);
+
+        if (pathpoint == null) {
+            pathpoint = new PathPoint(i, j, k);
+            this.c.a(l, pathpoint);
+        }
+
+        return pathpoint;
+    }
+
+    private int a(Entity entity, int i, int j, int k, PathPoint pathpoint) {
+        for (int l = i; l < i + pathpoint.a; ++l) {
+            for (int i1 = j; i1 < j + pathpoint.b; ++i1) {
+                for (int j1 = k; j1 < k + pathpoint.c; ++j1) {
+                    int k1 = this.a.getTypeId(l, i1, j1);
+
+                    if (k1 > 0) {
+                        if (k1 != Block.IRON_DOOR_BLOCK.id && k1 != Block.WOODEN_DOOR.id) {
+                            Material material = Block.byId[k1].material;
+
+                            if (material.isSolid()) {
+                                return 0;
+                            }
+
+                            if (material == Material.WATER) {
+                                return -1;
+                            }
+
+                            if (material == Material.LAVA) {
+                                return -2;
+                            }
+                        } else {
+                            int l1 = this.a.getData(l, i1, j1);
+
+                            if (!BlockDoor.e(l1)) {
+                                return 0;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return 1;
+    }
+
+    private PathEntity a(PathPoint pathpoint, PathPoint pathpoint1) {
+        int i = 1;
+
+        PathPoint pathpoint2;
+
+        for (pathpoint2 = pathpoint1; pathpoint2.h != null; pathpoint2 = pathpoint2.h) {
+            ++i;
+        }
+
+        PathPoint[] apathpoint = new PathPoint[i];
+
+        pathpoint2 = pathpoint1;
+        --i;
+
+        for (apathpoint[i] = pathpoint1; pathpoint2.h != null; apathpoint[i] = pathpoint2) {
+            pathpoint2 = pathpoint2.h;
+            --i;
+        }
+
+        return new PathEntity(apathpoint);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PistonBlockTextures.java b/src/main/java/net/minecraft/server/PistonBlockTextures.java
new file mode 100644
index 00000000..1d2b2903
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PistonBlockTextures.java
@@ -0,0 +1,11 @@
+package net.minecraft.server;
+
+public class PistonBlockTextures {
+
+    public static final int[] a = new int[] { 1, 0, 3, 2, 5, 4};
+    public static final int[] b = new int[] { 0, 0, 0, 0, -1, 1};
+    public static final int[] c = new int[] { -1, 1, 0, 0, 0, 0};
+    public static final int[] d = new int[] { 0, 0, -1, 1, 0, 0};
+
+    public PistonBlockTextures() {}
+}
diff --git a/src/main/java/net/minecraft/server/PlayerFileData.java b/src/main/java/net/minecraft/server/PlayerFileData.java
new file mode 100644
index 00000000..078b785b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PlayerFileData.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+public interface PlayerFileData {
+
+    void a(EntityHuman entityhuman);
+
+    void b(EntityHuman entityhuman);
+}
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
new file mode 100644
index 00000000..e30fc3d7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -0,0 +1,137 @@
+package net.minecraft.server;
+
+public class PlayerList {
+
+    private transient PlayerListEntry[] a = new PlayerListEntry[16];
+    private transient int b;
+    private int c = 12;
+    private final float d = 0.75F;
+    private transient volatile int e;
+
+    public PlayerList() {}
+
+    private static int e(long i) {
+        return a((int) (i ^ i >>> 32));
+    }
+
+    private static int a(int i) {
+        i ^= i >>> 20 ^ i >>> 12;
+        return i ^ i >>> 7 ^ i >>> 4;
+    }
+
+    private static int a(int i, int j) {
+        return i & j - 1;
+    }
+
+    public Object a(long i) {
+        int j = e(i);
+
+        for (PlayerListEntry playerlistentry = this.a[a(j, this.a.length)]; playerlistentry != null; playerlistentry = playerlistentry.c) {
+            if (playerlistentry.a == i) {
+                return playerlistentry.b;
+            }
+        }
+
+        return null;
+    }
+
+    public void a(long i, Object object) {
+        int j = e(i);
+        int k = a(j, this.a.length);
+
+        for (PlayerListEntry playerlistentry = this.a[k]; playerlistentry != null; playerlistentry = playerlistentry.c) {
+            if (playerlistentry.a == i) {
+                playerlistentry.b = object;
+            }
+        }
+
+        ++this.e;
+        this.a(j, i, object, k);
+    }
+
+    private void b(int i) {
+        PlayerListEntry[] aplayerlistentry = this.a;
+        int j = aplayerlistentry.length;
+
+        if (j == 1073741824) {
+            this.c = Integer.MAX_VALUE;
+        } else {
+            PlayerListEntry[] aplayerlistentry1 = new PlayerListEntry[i];
+
+            this.a(aplayerlistentry1);
+            this.a = aplayerlistentry1;
+            this.c = (int) ((float) i * this.d);
+        }
+    }
+
+    private void a(PlayerListEntry[] aplayerlistentry) {
+        PlayerListEntry[] aplayerlistentry1 = this.a;
+        int i = aplayerlistentry.length;
+
+        for (int j = 0; j < aplayerlistentry1.length; ++j) {
+            PlayerListEntry playerlistentry = aplayerlistentry1[j];
+
+            if (playerlistentry != null) {
+                aplayerlistentry1[j] = null;
+
+                PlayerListEntry playerlistentry1;
+
+                do {
+                    playerlistentry1 = playerlistentry.c;
+                    int k = a(playerlistentry.d, i);
+
+                    playerlistentry.c = aplayerlistentry[k];
+                    aplayerlistentry[k] = playerlistentry;
+                    playerlistentry = playerlistentry1;
+                } while (playerlistentry1 != null);
+            }
+        }
+    }
+
+    public Object b(long i) {
+        PlayerListEntry playerlistentry = this.c(i);
+
+        return playerlistentry == null ? null : playerlistentry.b;
+    }
+
+    final PlayerListEntry c(long i) {
+        int j = e(i);
+        int k = a(j, this.a.length);
+        PlayerListEntry playerlistentry = this.a[k];
+
+        PlayerListEntry playerlistentry1;
+        PlayerListEntry playerlistentry2;
+
+        for (playerlistentry1 = playerlistentry; playerlistentry1 != null; playerlistentry1 = playerlistentry2) {
+            playerlistentry2 = playerlistentry1.c;
+            if (playerlistentry1.a == i) {
+                ++this.e;
+                --this.b;
+                if (playerlistentry == playerlistentry1) {
+                    this.a[k] = playerlistentry2;
+                } else {
+                    playerlistentry.c = playerlistentry2;
+                }
+
+                return playerlistentry1;
+            }
+
+            playerlistentry = playerlistentry1;
+        }
+
+        return playerlistentry1;
+    }
+
+    private void a(int i, long j, Object object, int k) {
+        PlayerListEntry playerlistentry = this.a[k];
+
+        this.a[k] = new PlayerListEntry(i, j, object, playerlistentry);
+        if (this.b++ >= this.c) {
+            this.b(2 * this.a.length);
+        }
+    }
+
+    static int d(long i) {
+        return e(i);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerListBox.java b/src/main/java/net/minecraft/server/PlayerListBox.java
new file mode 100644
index 00000000..53ea2259
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PlayerListBox.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+import java.util.Vector;
+import javax.swing.JList;
+
+public class PlayerListBox extends JList implements IUpdatePlayerListBox {
+
+    private MinecraftServer a;
+    private int b = 0;
+
+    public PlayerListBox(MinecraftServer minecraftserver) {
+        this.a = minecraftserver;
+        minecraftserver.a((IUpdatePlayerListBox) this);
+    }
+
+    public void a() {
+        if (this.b++ % 20 == 0) {
+            Vector vector = new Vector();
+
+            for (int i = 0; i < this.a.serverConfigurationManager.players.size(); ++i) {
+                vector.add(((EntityPlayer) this.a.serverConfigurationManager.players.get(i)).name);
+            }
+
+            this.setListData(vector);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerListEntry.java b/src/main/java/net/minecraft/server/PlayerListEntry.java
new file mode 100644
index 00000000..2466c69a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PlayerListEntry.java
@@ -0,0 +1,53 @@
+package net.minecraft.server;
+
+class PlayerListEntry {
+
+    final long a;
+    Object b;
+    PlayerListEntry c;
+    final int d;
+
+    PlayerListEntry(int i, long j, Object object, PlayerListEntry playerlistentry) {
+        this.b = object;
+        this.c = playerlistentry;
+        this.a = j;
+        this.d = i;
+    }
+
+    public final long a() {
+        return this.a;
+    }
+
+    public final Object b() {
+        return this.b;
+    }
+
+    public final boolean equals(Object object) {
+        if (!(object instanceof PlayerListEntry)) {
+            return false;
+        } else {
+            PlayerListEntry playerlistentry = (PlayerListEntry) object;
+            Long olong = Long.valueOf(this.a());
+            Long olong1 = Long.valueOf(playerlistentry.a());
+
+            if (olong == olong1 || olong != null && olong.equals(olong1)) {
+                Object object1 = this.b();
+                Object object2 = playerlistentry.b();
+
+                if (object1 == object2 || object1 != null && object1.equals(object2)) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+
+    public final int hashCode() {
+        return PlayerList.d(this.a);
+    }
+
+    public final String toString() {
+        return this.a() + "=" + this.b();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipeIngots.java b/src/main/java/net/minecraft/server/RecipeIngots.java
new file mode 100644
index 00000000..20076a0d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipeIngots.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public class RecipeIngots {
+
+    private Object[][] a;
+
+    public RecipeIngots() {
+        this.a = new Object[][] { { Block.GOLD_BLOCK, new ItemStack(Item.GOLD_INGOT, 9)}, { Block.IRON_BLOCK, new ItemStack(Item.IRON_INGOT, 9)}, { Block.DIAMOND_BLOCK, new ItemStack(Item.DIAMOND, 9)}, { Block.LAPIS_BLOCK, new ItemStack(Item.INK_SACK, 9, 4)}};
+    }
+
+    public void a(CraftingManager craftingmanager) {
+        for (int i = 0; i < this.a.length; ++i) {
+            Block block = (Block) this.a[i][0];
+            ItemStack itemstack = (ItemStack) this.a[i][1];
+
+            craftingmanager.registerShapedRecipe(new ItemStack(block), new Object[] { "###", "###", "###", Character.valueOf('#'), itemstack});
+            craftingmanager.registerShapedRecipe(itemstack, new Object[] { "#", Character.valueOf('#'), block});
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipeSorter.java b/src/main/java/net/minecraft/server/RecipeSorter.java
new file mode 100644
index 00000000..d0eaf7de
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipeSorter.java
@@ -0,0 +1,17 @@
+package net.minecraft.server;
+
+import java.util.Comparator;
+
+
+class RecipeSorter implements Comparator<CraftingRecipe> {
+
+    final CraftingManager a;
+
+    RecipeSorter(CraftingManager craftingmanager) {
+        this.a = craftingmanager;
+    }
+
+    public int compare(CraftingRecipe craftingrecipe, CraftingRecipe craftingrecipe1) {
+        return craftingrecipe instanceof ShapelessRecipes && craftingrecipe1 instanceof ShapedRecipes ? 1 : (craftingrecipe1 instanceof ShapelessRecipes && craftingrecipe instanceof ShapedRecipes ? -1 : (craftingrecipe1.a() < craftingrecipe.a() ? -1 : (craftingrecipe1.a() > craftingrecipe.a() ? 1 : 0)));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesArmor.java b/src/main/java/net/minecraft/server/RecipesArmor.java
new file mode 100644
index 00000000..805a533a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesArmor.java
@@ -0,0 +1,23 @@
+package net.minecraft.server;
+
+public class RecipesArmor {
+
+    private String[][] a = new String[][] { { "XXX", "X X"}, { "X X", "XXX", "XXX"}, { "XXX", "X X", "X X"}, { "X X", "X X"}};
+    private Object[][] b;
+
+    public RecipesArmor() {
+        this.b = new Object[][] { { Item.LEATHER, Block.FIRE, Item.IRON_INGOT, Item.DIAMOND, Item.GOLD_INGOT}, { Item.LEATHER_HELMET, Item.CHAINMAIL_HELMET, Item.IRON_HELMET, Item.DIAMOND_HELMET, Item.GOLD_HELMET}, { Item.LEATHER_CHESTPLATE, Item.CHAINMAIL_CHESTPLATE, Item.IRON_CHESTPLATE, Item.DIAMOND_CHESTPLATE, Item.GOLD_CHESTPLATE}, { Item.LEATHER_LEGGINGS, Item.CHAINMAIL_LEGGINGS, Item.IRON_LEGGINGS, Item.DIAMOND_LEGGINGS, Item.GOLD_LEGGINGS}, { Item.LEATHER_BOOTS, Item.CHAINMAIL_BOOTS, Item.IRON_BOOTS, Item.DIAMOND_BOOTS, Item.GOLD_BOOTS}};
+    }
+
+    public void a(CraftingManager craftingmanager) {
+        for (int i = 0; i < this.b[0].length; ++i) {
+            Object object = this.b[0][i];
+
+            for (int j = 0; j < this.b.length - 1; ++j) {
+                Item item = (Item) this.b[j + 1][i];
+
+                craftingmanager.registerShapedRecipe(new ItemStack(item), new Object[] { this.a[j], Character.valueOf('X'), object});
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesCrafting.java b/src/main/java/net/minecraft/server/RecipesCrafting.java
new file mode 100644
index 00000000..b4bbb780
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesCrafting.java
@@ -0,0 +1,13 @@
+package net.minecraft.server;
+
+public class RecipesCrafting {
+
+    public RecipesCrafting() {}
+
+    public void a(CraftingManager craftingmanager) {
+        craftingmanager.registerShapedRecipe(new ItemStack(Block.CHEST), new Object[] { "###", "# #", "###", Character.valueOf('#'), Block.WOOD});
+        craftingmanager.registerShapedRecipe(new ItemStack(Block.FURNACE), new Object[] { "###", "# #", "###", Character.valueOf('#'), Block.COBBLESTONE});
+        craftingmanager.registerShapedRecipe(new ItemStack(Block.WORKBENCH), new Object[] { "##", "##", Character.valueOf('#'), Block.WOOD});
+        craftingmanager.registerShapedRecipe(new ItemStack(Block.SANDSTONE), new Object[] { "##", "##", Character.valueOf('#'), Block.SAND});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesDyes.java b/src/main/java/net/minecraft/server/RecipesDyes.java
new file mode 100644
index 00000000..16105ae1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesDyes.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class RecipesDyes {
+
+    public RecipesDyes() {}
+
+    public void a(CraftingManager craftingmanager) {
+        for (int i = 0; i < 16; ++i) {
+            craftingmanager.registerShapelessRecipe(new ItemStack(Block.WOOL, 1, BlockCloth.d(i)), new Object[] { new ItemStack(Item.INK_SACK, 1, i), new ItemStack(Item.byId[Block.WOOL.id], 1, 0)});
+        }
+
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 11), new Object[] { Block.YELLOW_FLOWER});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 1), new Object[] { Block.RED_ROSE});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 3, 15), new Object[] { Item.BONE});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 9), new Object[] { new ItemStack(Item.INK_SACK, 1, 1), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 14), new Object[] { new ItemStack(Item.INK_SACK, 1, 1), new ItemStack(Item.INK_SACK, 1, 11)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 10), new Object[] { new ItemStack(Item.INK_SACK, 1, 2), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 8), new Object[] { new ItemStack(Item.INK_SACK, 1, 0), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 7), new Object[] { new ItemStack(Item.INK_SACK, 1, 8), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 3, 7), new Object[] { new ItemStack(Item.INK_SACK, 1, 0), new ItemStack(Item.INK_SACK, 1, 15), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 12), new Object[] { new ItemStack(Item.INK_SACK, 1, 4), new ItemStack(Item.INK_SACK, 1, 15)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 6), new Object[] { new ItemStack(Item.INK_SACK, 1, 4), new ItemStack(Item.INK_SACK, 1, 2)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 5), new Object[] { new ItemStack(Item.INK_SACK, 1, 4), new ItemStack(Item.INK_SACK, 1, 1)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 2, 13), new Object[] { new ItemStack(Item.INK_SACK, 1, 5), new ItemStack(Item.INK_SACK, 1, 9)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 3, 13), new Object[] { new ItemStack(Item.INK_SACK, 1, 4), new ItemStack(Item.INK_SACK, 1, 1), new ItemStack(Item.INK_SACK, 1, 9)});
+        craftingmanager.registerShapelessRecipe(new ItemStack(Item.INK_SACK, 4, 13), new Object[] { new ItemStack(Item.INK_SACK, 1, 4), new ItemStack(Item.INK_SACK, 1, 1), new ItemStack(Item.INK_SACK, 1, 1), new ItemStack(Item.INK_SACK, 1, 15)});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesFood.java b/src/main/java/net/minecraft/server/RecipesFood.java
new file mode 100644
index 00000000..428b89e7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesFood.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class RecipesFood {
+
+    public RecipesFood() {}
+
+    public void a(CraftingManager craftingmanager) {
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.MUSHROOM_SOUP), new Object[] { "Y", "X", "#", Character.valueOf('X'), Block.BROWN_MUSHROOM, Character.valueOf('Y'), Block.RED_MUSHROOM, Character.valueOf('#'), Item.BOWL});
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.MUSHROOM_SOUP), new Object[] { "Y", "X", "#", Character.valueOf('X'), Block.RED_MUSHROOM, Character.valueOf('Y'), Block.BROWN_MUSHROOM, Character.valueOf('#'), Item.BOWL});
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.COOKIE, 8), new Object[] { "#X#", Character.valueOf('X'), new ItemStack(Item.INK_SACK, 1, 3), Character.valueOf('#'), Item.WHEAT});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesTools.java b/src/main/java/net/minecraft/server/RecipesTools.java
new file mode 100644
index 00000000..27fcd586
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesTools.java
@@ -0,0 +1,25 @@
+package net.minecraft.server;
+
+public class RecipesTools {
+
+    private String[][] a = new String[][] { { "XXX", " # ", " # "}, { "X", "#", "#"}, { "XX", "X#", " #"}, { "XX", " #", " #"}};
+    private Object[][] b;
+
+    public RecipesTools() {
+        this.b = new Object[][] { { Block.WOOD, Block.COBBLESTONE, Item.IRON_INGOT, Item.DIAMOND, Item.GOLD_INGOT}, { Item.WOOD_PICKAXE, Item.STONE_PICKAXE, Item.IRON_PICKAXE, Item.DIAMOND_PICKAXE, Item.GOLD_PICKAXE}, { Item.WOOD_SPADE, Item.STONE_SPADE, Item.IRON_SPADE, Item.DIAMOND_SPADE, Item.GOLD_SPADE}, { Item.WOOD_AXE, Item.STONE_AXE, Item.IRON_AXE, Item.DIAMOND_AXE, Item.GOLD_AXE}, { Item.WOOD_HOE, Item.STONE_HOE, Item.IRON_HOE, Item.DIAMOND_HOE, Item.GOLD_HOE}};
+    }
+
+    public void a(CraftingManager craftingmanager) {
+        for (int i = 0; i < this.b[0].length; ++i) {
+            Object object = this.b[0][i];
+
+            for (int j = 0; j < this.b.length - 1; ++j) {
+                Item item = (Item) this.b[j + 1][i];
+
+                craftingmanager.registerShapedRecipe(new ItemStack(item), new Object[] { this.a[j], Character.valueOf('#'), Item.STICK, Character.valueOf('X'), object});
+            }
+        }
+
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.SHEARS), new Object[] { " #", "# ", Character.valueOf('#'), Item.IRON_INGOT});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RecipesWeapons.java b/src/main/java/net/minecraft/server/RecipesWeapons.java
new file mode 100644
index 00000000..6c6ed564
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RecipesWeapons.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+public class RecipesWeapons {
+
+    private String[][] a = new String[][] { { "X", "X", "#"}};
+    private Object[][] b;
+
+    public RecipesWeapons() {
+        this.b = new Object[][] { { Block.WOOD, Block.COBBLESTONE, Item.IRON_INGOT, Item.DIAMOND, Item.GOLD_INGOT}, { Item.WOOD_SWORD, Item.STONE_SWORD, Item.IRON_SWORD, Item.DIAMOND_SWORD, Item.GOLD_SWORD}};
+    }
+
+    public void a(CraftingManager craftingmanager) {
+        for (int i = 0; i < this.b[0].length; ++i) {
+            Object object = this.b[0][i];
+
+            for (int j = 0; j < this.b.length - 1; ++j) {
+                Item item = (Item) this.b[j + 1][i];
+
+                craftingmanager.registerShapedRecipe(new ItemStack(item), new Object[] { this.a[j], Character.valueOf('#'), Item.STICK, Character.valueOf('X'), object});
+            }
+        }
+
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.BOW, 1), new Object[] { " #X", "# X", " #X", Character.valueOf('X'), Item.STRING, Character.valueOf('#'), Item.STICK});
+        craftingmanager.registerShapedRecipe(new ItemStack(Item.ARROW, 4), new Object[] { "X", "#", "Y", Character.valueOf('Y'), Item.FEATHER, Character.valueOf('X'), Item.FLINT, Character.valueOf('#'), Item.STICK});
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RedstoneUpdateInfo.java b/src/main/java/net/minecraft/server/RedstoneUpdateInfo.java
new file mode 100644
index 00000000..1fbe56a9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RedstoneUpdateInfo.java
@@ -0,0 +1,16 @@
+package net.minecraft.server;
+
+class RedstoneUpdateInfo {
+
+    int a;
+    int b;
+    int c;
+    long d;
+
+    public RedstoneUpdateInfo(int i, int j, int k, long l) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+        this.d = l;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
new file mode 100644
index 00000000..d8f23110
--- /dev/null
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -0,0 +1,82 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.lang.ref.Reference;
+import java.lang.ref.SoftReference;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+public class RegionFileCache {
+
+    private static final Map a = new HashMap();
+
+    private RegionFileCache() {}
+
+    public static synchronized RegionFile a(File file1, int i, int j) {
+        File file2 = new File(file1, "region");
+        File file3 = new File(file2, "r." + (i >> 5) + "." + (j >> 5) + ".mcr");
+        Reference reference = (Reference) a.get(file3);
+        RegionFile regionfile;
+
+        if (reference != null) {
+            regionfile = (RegionFile) reference.get();
+            if (regionfile != null) {
+                return regionfile;
+            }
+        }
+
+        if (!file2.exists()) {
+            file2.mkdirs();
+        }
+
+        if (a.size() >= 256) {
+            a();
+        }
+
+        regionfile = new RegionFile(file3);
+        a.put(file3, new SoftReference(regionfile));
+        return regionfile;
+    }
+
+    public static synchronized void a() {
+        Iterator iterator = a.values().iterator();
+
+        while (iterator.hasNext()) {
+            Reference reference = (Reference) iterator.next();
+
+            try {
+                RegionFile regionfile = (RegionFile) reference.get();
+
+                if (regionfile != null) {
+                    regionfile.b();
+                }
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+        }
+
+        a.clear();
+    }
+
+    public static int b(File file1, int i, int j) {
+        RegionFile regionfile = a(file1, i, j);
+
+        return regionfile.a();
+    }
+
+    public static DataInputStream c(File file1, int i, int j) {
+        RegionFile regionfile = a(file1, i, j);
+
+        return regionfile.a(i & 31, j & 31);
+    }
+
+    public static DataOutputStream d(File file1, int i, int j) {
+        RegionFile regionfile = a(file1, i, j);
+
+        return regionfile.b(i & 31, j & 31);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerCommand.java b/src/main/java/net/minecraft/server/ServerCommand.java
new file mode 100644
index 00000000..b4361dfb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerCommand.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+public class ServerCommand {
+
+    public final String command;
+    public final ICommandListener b;
+
+    public ServerCommand(String s, ICommandListener icommandlistener) {
+        this.command = s;
+        this.b = icommandlistener;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerGUI.java b/src/main/java/net/minecraft/server/ServerGUI.java
new file mode 100644
index 00000000..1434a17c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerGUI.java
@@ -0,0 +1,98 @@
+package net.minecraft.server;
+
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.util.logging.Logger;
+import javax.swing.JComponent;
+import javax.swing.JFrame;
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JTextArea;
+import javax.swing.JTextField;
+import javax.swing.UIManager;
+import javax.swing.border.EtchedBorder;
+import javax.swing.border.TitledBorder;
+
+public class ServerGUI extends JComponent implements ICommandListener {
+
+    public static Logger a = Logger.getLogger("Minecraft");
+    private MinecraftServer b;
+
+    public static void a(MinecraftServer minecraftserver) {
+        try {
+            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
+        } catch (Exception exception) {
+            ;
+        }
+
+        ServerGUI servergui = new ServerGUI(minecraftserver);
+        JFrame jframe = new JFrame("Minecraft server");
+
+        jframe.add(servergui);
+        jframe.pack();
+        jframe.setLocationRelativeTo((Component) null);
+        jframe.setVisible(true);
+        jframe.addWindowListener(new ServerWindowAdapter(minecraftserver));
+    }
+
+    public ServerGUI(MinecraftServer minecraftserver) {
+        this.b = minecraftserver;
+        this.setPreferredSize(new Dimension(854, 480));
+        this.setLayout(new BorderLayout());
+
+        try {
+            this.add(this.c(), "Center");
+            this.add(this.a(), "West");
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    private JComponent a() {
+        JPanel jpanel = new JPanel(new BorderLayout());
+
+        jpanel.add(new GuiStatsComponent(), "North");
+        jpanel.add(this.b(), "Center");
+        jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
+        return jpanel;
+    }
+
+    private JComponent b() {
+        PlayerListBox playerlistbox = new PlayerListBox(this.b);
+        JScrollPane jscrollpane = new JScrollPane(playerlistbox, 22, 30);
+
+        jscrollpane.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
+        return jscrollpane;
+    }
+
+    private JComponent c() {
+        JPanel jpanel = new JPanel(new BorderLayout());
+        JTextArea jtextarea = new JTextArea();
+
+        a.addHandler(new GuiLogOutputHandler(jtextarea));
+        JScrollPane jscrollpane = new JScrollPane(jtextarea, 22, 30);
+
+        jtextarea.setEditable(false);
+        JTextField jtextfield = new JTextField();
+
+        jtextfield.addActionListener(new ServerGuiCommandListener(this, jtextfield));
+        jtextarea.addFocusListener(new ServerGuiFocusAdapter(this));
+        jpanel.add(jscrollpane, "Center");
+        jpanel.add(jtextfield, "South");
+        jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
+        return jpanel;
+    }
+
+    public void sendMessage(String s) {
+        a.info(s);
+    }
+
+    public String getName() {
+        return "CONSOLE";
+    }
+
+    static MinecraftServer a(ServerGUI servergui) {
+        return servergui.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerGuiCommandListener.java b/src/main/java/net/minecraft/server/ServerGuiCommandListener.java
new file mode 100644
index 00000000..c91e90d1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerGuiCommandListener.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import javax.swing.JTextField;
+
+class ServerGuiCommandListener implements ActionListener {
+
+    final JTextField a;
+
+    final ServerGUI b;
+
+    ServerGuiCommandListener(ServerGUI servergui, JTextField jtextfield) {
+        this.b = servergui;
+        this.a = jtextfield;
+    }
+
+    public void actionPerformed(ActionEvent actionevent) {
+        String s = this.a.getText().trim();
+
+        if (s.length() > 0) {
+            ServerGUI.a(this.b).issueCommand(s, this.b);
+        }
+
+        this.a.setText("");
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerGuiFocusAdapter.java b/src/main/java/net/minecraft/server/ServerGuiFocusAdapter.java
new file mode 100644
index 00000000..aede72f8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerGuiFocusAdapter.java
@@ -0,0 +1,15 @@
+package net.minecraft.server;
+
+import java.awt.event.FocusAdapter;
+import java.awt.event.FocusEvent;
+
+class ServerGuiFocusAdapter extends FocusAdapter {
+
+    final ServerGUI a;
+
+    ServerGuiFocusAdapter(ServerGUI servergui) {
+        this.a = servergui;
+    }
+
+    public void focusGained(FocusEvent focusevent) {}
+}
diff --git a/src/main/java/net/minecraft/server/ServerNBTManager.java b/src/main/java/net/minecraft/server/ServerNBTManager.java
new file mode 100644
index 00000000..360efbf6
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerNBTManager.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.util.List;
+
+public class ServerNBTManager extends PlayerNBTManager {
+
+    public ServerNBTManager(File file1, String s, boolean flag) {
+        super(file1, s, flag);
+    }
+
+    public IChunkLoader a(WorldProvider worldprovider) {
+        File file1 = this.a();
+
+        if (worldprovider instanceof WorldProviderHell) {
+            File file2 = new File(file1, "DIM-1");
+
+            file2.mkdirs();
+            return new ChunkRegionLoader(file2);
+        } else {
+            return new ChunkRegionLoader(file1);
+        }
+    }
+
+    public void a(WorldData worlddata, List list) {
+        worlddata.a(19132);
+        super.a(worlddata, list);
+    }
+
+    public void e() {
+        RegionFileCache.a();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerWindowAdapter.java b/src/main/java/net/minecraft/server/ServerWindowAdapter.java
new file mode 100644
index 00000000..cb839479
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerWindowAdapter.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+
+final class ServerWindowAdapter extends WindowAdapter {
+
+    final MinecraftServer a;
+
+    ServerWindowAdapter(MinecraftServer minecraftserver) {
+        this.a = minecraftserver;
+    }
+
+    public void windowClosing(WindowEvent windowevent) {
+        this.a.a();
+
+        while (!this.a.isStopped) {
+            try {
+                Thread.sleep(100L);
+            } catch (InterruptedException interruptedexception) {
+                interruptedexception.printStackTrace();
+            }
+        }
+
+        System.exit(0);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ShapedRecipes.java b/src/main/java/net/minecraft/server/ShapedRecipes.java
new file mode 100644
index 00000000..6fde0c73
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ShapedRecipes.java
@@ -0,0 +1,82 @@
+package net.minecraft.server;
+
+public class ShapedRecipes implements CraftingRecipe {
+
+    private int b;
+    private int c;
+    private ItemStack[] d;
+    private ItemStack e;
+    public final int a;
+
+    public ShapedRecipes(int i, int j, ItemStack[] aitemstack, ItemStack itemstack) {
+        this.a = itemstack.id;
+        this.b = i;
+        this.c = j;
+        this.d = aitemstack;
+        this.e = itemstack;
+    }
+
+    public ItemStack b() {
+        return this.e;
+    }
+
+    public boolean a(InventoryCrafting inventorycrafting) {
+        for (int i = 0; i <= 3 - this.b; ++i) {
+            for (int j = 0; j <= 3 - this.c; ++j) {
+                if (this.a(inventorycrafting, i, j, true)) {
+                    return true;
+                }
+
+                if (this.a(inventorycrafting, i, j, false)) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private boolean a(InventoryCrafting inventorycrafting, int i, int j, boolean flag) {
+        for (int k = 0; k < 3; ++k) {
+            for (int l = 0; l < 3; ++l) {
+                int i1 = k - i;
+                int j1 = l - j;
+                ItemStack itemstack = null;
+
+                if (i1 >= 0 && j1 >= 0 && i1 < this.b && j1 < this.c) {
+                    if (flag) {
+                        itemstack = this.d[this.b - i1 - 1 + j1 * this.b];
+                    } else {
+                        itemstack = this.d[i1 + j1 * this.b];
+                    }
+                }
+
+                ItemStack itemstack1 = inventorycrafting.b(k, l);
+
+                if (itemstack1 != null || itemstack != null) {
+                    if (itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null) {
+                        return false;
+                    }
+
+                    if (itemstack.id != itemstack1.id) {
+                        return false;
+                    }
+
+                    if (itemstack.getData() != -1 && itemstack.getData() != itemstack1.getData()) {
+                        return false;
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+
+    public ItemStack b(InventoryCrafting inventorycrafting) {
+        return new ItemStack(this.e.id, this.e.count, this.e.getData());
+    }
+
+    public int a() {
+        return this.b * this.c;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ShapelessRecipes.java b/src/main/java/net/minecraft/server/ShapelessRecipes.java
new file mode 100644
index 00000000..d38896a4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ShapelessRecipes.java
@@ -0,0 +1,59 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class ShapelessRecipes implements CraftingRecipe {
+
+    private final ItemStack a;
+    private final List b;
+
+    public ShapelessRecipes(ItemStack itemstack, List list) {
+        this.a = itemstack;
+        this.b = list;
+    }
+
+    public ItemStack b() {
+        return this.a;
+    }
+
+    public boolean a(InventoryCrafting inventorycrafting) {
+        ArrayList arraylist = new ArrayList(this.b);
+
+        for (int i = 0; i < 3; ++i) {
+            for (int j = 0; j < 3; ++j) {
+                ItemStack itemstack = inventorycrafting.b(j, i);
+
+                if (itemstack != null) {
+                    boolean flag = false;
+                    Iterator iterator = arraylist.iterator();
+
+                    while (iterator.hasNext()) {
+                        ItemStack itemstack1 = (ItemStack) iterator.next();
+
+                        if (itemstack.id == itemstack1.id && (itemstack1.getData() == -1 || itemstack.getData() == itemstack1.getData())) {
+                            flag = true;
+                            arraylist.remove(itemstack1);
+                            break;
+                        }
+                    }
+
+                    if (!flag) {
+                        return false;
+                    }
+                }
+            }
+        }
+
+        return arraylist.isEmpty();
+    }
+
+    public ItemStack b(InventoryCrafting inventorycrafting) {
+        return this.a.cloneItemStack();
+    }
+
+    public int a() {
+        return this.b.size();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SlotArmor.java b/src/main/java/net/minecraft/server/SlotArmor.java
new file mode 100644
index 00000000..4883a7e4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SlotArmor.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+class SlotArmor extends Slot {
+
+    final int d;
+
+    final ContainerPlayer e;
+
+    SlotArmor(ContainerPlayer containerplayer, IInventory iinventory, int i, int j, int k, int l) {
+        super(iinventory, i, j, k);
+        this.e = containerplayer;
+        this.d = l;
+    }
+
+    public int d() {
+        return 1;
+    }
+
+    public boolean isAllowed(ItemStack itemstack) {
+        return itemstack.getItem() instanceof ItemArmor ? ((ItemArmor) itemstack.getItem()).bk == this.d : (itemstack.getItem().id == Block.PUMPKIN.id ? this.d == 0 : false);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SlotResult.java b/src/main/java/net/minecraft/server/SlotResult.java
new file mode 100644
index 00000000..bc851727
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SlotResult.java
@@ -0,0 +1,49 @@
+package net.minecraft.server;
+
+public class SlotResult extends Slot {
+
+    private final IInventory d;
+    private EntityHuman e;
+
+    public SlotResult(EntityHuman entityhuman, IInventory iinventory, IInventory iinventory1, int i, int j, int k) {
+        super(iinventory1, i, j, k);
+        this.e = entityhuman;
+        this.d = iinventory;
+    }
+
+    public boolean isAllowed(ItemStack itemstack) {
+        return false;
+    }
+
+    public void a(ItemStack itemstack) {
+        itemstack.b(this.e.world, this.e);
+        if (itemstack.id == Block.WORKBENCH.id) {
+            this.e.a(AchievementList.h, 1);
+        } else if (itemstack.id == Item.WOOD_PICKAXE.id) {
+            this.e.a(AchievementList.i, 1);
+        } else if (itemstack.id == Block.FURNACE.id) {
+            this.e.a(AchievementList.j, 1);
+        } else if (itemstack.id == Item.WOOD_HOE.id) {
+            this.e.a(AchievementList.l, 1);
+        } else if (itemstack.id == Item.BREAD.id) {
+            this.e.a(AchievementList.m, 1);
+        } else if (itemstack.id == Item.CAKE.id) {
+            this.e.a(AchievementList.n, 1);
+        } else if (itemstack.id == Item.STONE_PICKAXE.id) {
+            this.e.a(AchievementList.o, 1);
+        } else if (itemstack.id == Item.WOOD_SWORD.id) {
+            this.e.a(AchievementList.r, 1);
+        }
+
+        for (int i = 0; i < this.d.getSize(); ++i) {
+            ItemStack itemstack1 = this.d.getItem(i);
+
+            if (itemstack1 != null) {
+                this.d.splitStack(i, 1);
+                if (itemstack1.getItem().i()) {
+                    this.d.setItem(i, new ItemStack(itemstack1.getItem().h()));
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SlotResult2.java b/src/main/java/net/minecraft/server/SlotResult2.java
new file mode 100644
index 00000000..8488019c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SlotResult2.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class SlotResult2 extends Slot {
+
+    private EntityHuman d;
+
+    public SlotResult2(EntityHuman entityhuman, IInventory iinventory, int i, int j, int k) {
+        super(iinventory, i, j, k);
+        this.d = entityhuman;
+    }
+
+    public boolean isAllowed(ItemStack itemstack) {
+        return false;
+    }
+
+    public void a(ItemStack itemstack) {
+        itemstack.b(this.d.world, this.d);
+        if (itemstack.id == Item.IRON_INGOT.id) {
+            this.d.a(AchievementList.k, 1);
+        }
+
+        if (itemstack.id == Item.COOKED_FISH.id) {
+            this.d.a(AchievementList.p, 1);
+        }
+
+        super.a(itemstack);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Statistic.java b/src/main/java/net/minecraft/server/Statistic.java
new file mode 100644
index 00000000..771ce931
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Statistic.java
@@ -0,0 +1,50 @@
+package net.minecraft.server;
+
+import java.text.DecimalFormat;
+import java.text.NumberFormat;
+import java.util.Locale;
+
+public class Statistic {
+
+    public final int e;
+    public final String f;
+    public boolean g;
+    public String h;
+    private final Counter a;
+    private static NumberFormat b = NumberFormat.getIntegerInstance(Locale.US);
+    public static Counter i = new UnknownCounter();
+    private static DecimalFormat c = new DecimalFormat("########0.00");
+    public static Counter j = new TimeCounter();
+    public static Counter k = new DistancesCounter();
+
+    public Statistic(int i, String s, Counter counter) {
+        this.g = false;
+        this.e = i;
+        this.f = s;
+        this.a = counter;
+    }
+
+    public Statistic(int i, String s) {
+        this(i, s, Statistic.i);
+    }
+
+    public Statistic e() {
+        this.g = true;
+        return this;
+    }
+
+    public Statistic d() {
+        if (StatisticList.a.containsKey(Integer.valueOf(this.e))) {
+            throw new RuntimeException("Duplicate stat id: \"" + ((Statistic) StatisticList.a.get(Integer.valueOf(this.e))).f + "\" and \"" + this.f + "\" at id " + this.e);
+        } else {
+            StatisticList.b.add(this);
+            StatisticList.a.put(Integer.valueOf(this.e), this);
+            this.h = AchievementMap.a(this.e);
+            return this;
+        }
+    }
+
+    public String toString() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StatisticCollector.java b/src/main/java/net/minecraft/server/StatisticCollector.java
new file mode 100644
index 00000000..3841a4e8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StatisticCollector.java
@@ -0,0 +1,16 @@
+package net.minecraft.server;
+
+public class StatisticCollector {
+
+    private static StatisticStorage a = StatisticStorage.a();
+
+    public StatisticCollector() {}
+
+    public static String a(String s) {
+        return a.a(s);
+    }
+
+    public static String a(String s, Object... aobject) {
+        return a.a(s, aobject);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StatisticList.java b/src/main/java/net/minecraft/server/StatisticList.java
new file mode 100644
index 00000000..3a36e702
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StatisticList.java
@@ -0,0 +1,184 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class StatisticList {
+
+    protected static Map a = new HashMap();
+    public static List b = new ArrayList();
+    public static List c = new ArrayList();
+    public static List d = new ArrayList();
+    public static List e = new ArrayList();
+    public static Statistic f = (new CounterStatistic(1000, StatisticCollector.a("stat.startGame"))).e().d();
+    public static Statistic g = (new CounterStatistic(1001, StatisticCollector.a("stat.createWorld"))).e().d();
+    public static Statistic h = (new CounterStatistic(1002, StatisticCollector.a("stat.loadWorld"))).e().d();
+    public static Statistic i = (new CounterStatistic(1003, StatisticCollector.a("stat.joinMultiplayer"))).e().d();
+    public static Statistic j = (new CounterStatistic(1004, StatisticCollector.a("stat.leaveGame"))).e().d();
+    public static Statistic k = (new CounterStatistic(1100, StatisticCollector.a("stat.playOneMinute"), Statistic.j)).e().d();
+    public static Statistic l = (new CounterStatistic(2000, StatisticCollector.a("stat.walkOneCm"), Statistic.k)).e().d();
+    public static Statistic m = (new CounterStatistic(2001, StatisticCollector.a("stat.swimOneCm"), Statistic.k)).e().d();
+    public static Statistic n = (new CounterStatistic(2002, StatisticCollector.a("stat.fallOneCm"), Statistic.k)).e().d();
+    public static Statistic o = (new CounterStatistic(2003, StatisticCollector.a("stat.climbOneCm"), Statistic.k)).e().d();
+    public static Statistic p = (new CounterStatistic(2004, StatisticCollector.a("stat.flyOneCm"), Statistic.k)).e().d();
+    public static Statistic q = (new CounterStatistic(2005, StatisticCollector.a("stat.diveOneCm"), Statistic.k)).e().d();
+    public static Statistic r = (new CounterStatistic(2006, StatisticCollector.a("stat.minecartOneCm"), Statistic.k)).e().d();
+    public static Statistic s = (new CounterStatistic(2007, StatisticCollector.a("stat.boatOneCm"), Statistic.k)).e().d();
+    public static Statistic t = (new CounterStatistic(2008, StatisticCollector.a("stat.pigOneCm"), Statistic.k)).e().d();
+    public static Statistic u = (new CounterStatistic(2010, StatisticCollector.a("stat.jump"))).e().d();
+    public static Statistic v = (new CounterStatistic(2011, StatisticCollector.a("stat.drop"))).e().d();
+    public static Statistic w = (new CounterStatistic(2020, StatisticCollector.a("stat.damageDealt"))).d();
+    public static Statistic x = (new CounterStatistic(2021, StatisticCollector.a("stat.damageTaken"))).d();
+    public static Statistic y = (new CounterStatistic(2022, StatisticCollector.a("stat.deaths"))).d();
+    public static Statistic z = (new CounterStatistic(2023, StatisticCollector.a("stat.mobKills"))).d();
+    public static Statistic A = (new CounterStatistic(2024, StatisticCollector.a("stat.playerKills"))).d();
+    public static Statistic B = (new CounterStatistic(2025, StatisticCollector.a("stat.fishCaught"))).d();
+    public static Statistic[] C = a("stat.mineBlock", 16777216);
+    public static Statistic[] D;
+    public static Statistic[] E;
+    public static Statistic[] F;
+    private static boolean G;
+    private static boolean H;
+
+    public StatisticList() {}
+
+    public static void a() {}
+
+    public static void b() {
+        E = a(E, "stat.useItem", 16908288, 0, Block.byId.length);
+        F = b(F, "stat.breakItem", 16973824, 0, Block.byId.length);
+        G = true;
+        d();
+    }
+
+    public static void c() {
+        E = a(E, "stat.useItem", 16908288, Block.byId.length, 32000);
+        F = b(F, "stat.breakItem", 16973824, Block.byId.length, 32000);
+        H = true;
+        d();
+    }
+
+    public static void d() {
+        if (G && H) {
+            HashSet hashset = new HashSet();
+            Iterator iterator = CraftingManager.getInstance().b().iterator();
+
+            while (iterator.hasNext()) {
+                CraftingRecipe craftingrecipe = (CraftingRecipe) iterator.next();
+
+                hashset.add(Integer.valueOf(craftingrecipe.b().id));
+            }
+
+            iterator = FurnaceRecipes.getInstance().b().values().iterator();
+
+            while (iterator.hasNext()) {
+                ItemStack itemstack = (ItemStack) iterator.next();
+
+                hashset.add(Integer.valueOf(itemstack.id));
+            }
+
+            D = new Statistic[32000];
+            iterator = hashset.iterator();
+
+            while (iterator.hasNext()) {
+                Integer integer = (Integer) iterator.next();
+
+                if (Item.byId[integer.intValue()] != null) {
+                    String s = StatisticCollector.a("stat.craftItem", new Object[] { Item.byId[integer.intValue()].j()});
+
+                    D[integer.intValue()] = (new CraftingStatistic(16842752 + integer.intValue(), s, integer.intValue())).d();
+                }
+            }
+
+            a(D);
+        }
+    }
+
+    private static Statistic[] a(String s, int i) {
+        Statistic[] astatistic = new Statistic[256];
+
+        for (int j = 0; j < 256; ++j) {
+            if (Block.byId[j] != null && Block.byId[j].m()) {
+                String s1 = StatisticCollector.a(s, new Object[] { Block.byId[j].k()});
+
+                astatistic[j] = (new CraftingStatistic(i + j, s1, j)).d();
+                e.add((CraftingStatistic) astatistic[j]);
+            }
+        }
+
+        a(astatistic);
+        return astatistic;
+    }
+
+    private static Statistic[] a(Statistic[] astatistic, String s, int i, int j, int k) {
+        if (astatistic == null) {
+            astatistic = new Statistic[32000];
+        }
+
+        for (int l = j; l < k; ++l) {
+            if (Item.byId[l] != null) {
+                String s1 = StatisticCollector.a(s, new Object[] { Item.byId[l].j()});
+
+                astatistic[l] = (new CraftingStatistic(i + l, s1, l)).d();
+                if (l >= Block.byId.length) {
+                    d.add((CraftingStatistic) astatistic[l]);
+                }
+            }
+        }
+
+        a(astatistic);
+        return astatistic;
+    }
+
+    private static Statistic[] b(Statistic[] astatistic, String s, int i, int j, int k) {
+        if (astatistic == null) {
+            astatistic = new Statistic[32000];
+        }
+
+        for (int l = j; l < k; ++l) {
+            if (Item.byId[l] != null && Item.byId[l].f()) {
+                String s1 = StatisticCollector.a(s, new Object[] { Item.byId[l].j()});
+
+                astatistic[l] = (new CraftingStatistic(i + l, s1, l)).d();
+            }
+        }
+
+        a(astatistic);
+        return astatistic;
+    }
+
+    private static void a(Statistic[] astatistic) {
+        a(astatistic, Block.STATIONARY_WATER.id, Block.WATER.id);
+        a(astatistic, Block.STATIONARY_LAVA.id, Block.STATIONARY_LAVA.id);
+        a(astatistic, Block.JACK_O_LANTERN.id, Block.PUMPKIN.id);
+        a(astatistic, Block.BURNING_FURNACE.id, Block.FURNACE.id);
+        a(astatistic, Block.GLOWING_REDSTONE_ORE.id, Block.REDSTONE_ORE.id);
+        a(astatistic, Block.DIODE_ON.id, Block.DIODE_OFF.id);
+        a(astatistic, Block.REDSTONE_TORCH_ON.id, Block.REDSTONE_TORCH_OFF.id);
+        a(astatistic, Block.RED_MUSHROOM.id, Block.BROWN_MUSHROOM.id);
+        a(astatistic, Block.DOUBLE_STEP.id, Block.STEP.id);
+        a(astatistic, Block.GRASS.id, Block.DIRT.id);
+        a(astatistic, Block.SOIL.id, Block.DIRT.id);
+    }
+
+    private static void a(Statistic[] astatistic, int i, int j) {
+        if (astatistic[i] != null && astatistic[j] == null) {
+            astatistic[j] = astatistic[i];
+        } else {
+            b.remove(astatistic[i]);
+            e.remove(astatistic[i]);
+            c.remove(astatistic[i]);
+            astatistic[i] = astatistic[j];
+        }
+    }
+
+    static {
+        AchievementList.a();
+        G = false;
+        H = false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StatisticStorage.java b/src/main/java/net/minecraft/server/StatisticStorage.java
new file mode 100644
index 00000000..1f8a08a0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StatisticStorage.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.Properties;
+
+public class StatisticStorage {
+
+    private static StatisticStorage a = new StatisticStorage();
+    private Properties b = new Properties();
+
+    private StatisticStorage() {
+        try {
+            this.b.load(StatisticStorage.class.getResourceAsStream("/lang/en_US.lang"));
+            this.b.load(StatisticStorage.class.getResourceAsStream("/lang/stats_US.lang"));
+        } catch (IOException ioexception) {
+            ioexception.printStackTrace();
+        }
+    }
+
+    public static StatisticStorage a() {
+        return a;
+    }
+
+    public String a(String s) {
+        return this.b.getProperty(s, s);
+    }
+
+    public String a(String s, Object... aobject) {
+        String s1 = this.b.getProperty(s, s);
+
+        return String.format(s1, aobject);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StepSound.java b/src/main/java/net/minecraft/server/StepSound.java
new file mode 100644
index 00000000..8a2a3f88
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StepSound.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+public class StepSound {
+
+    public final String a;
+    public final float b;
+    public final float c;
+
+    public StepSound(String s, float f, float f1) {
+        this.a = s;
+        this.b = f;
+        this.c = f1;
+    }
+
+    public float getVolume1() {
+        return this.b;
+    }
+
+    public float getVolume2() {
+        return this.c;
+    }
+
+    public String getName() {
+        return "step." + this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StepSoundSand.java b/src/main/java/net/minecraft/server/StepSoundSand.java
new file mode 100644
index 00000000..a3b7eddf
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StepSoundSand.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+final class StepSoundSand extends StepSound {
+
+    StepSoundSand(String s, float f, float f1) {
+        super(s, f, f1);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/StepSoundStone.java b/src/main/java/net/minecraft/server/StepSoundStone.java
new file mode 100644
index 00000000..4fd2eeb1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/StepSoundStone.java
@@ -0,0 +1,8 @@
+package net.minecraft.server;
+
+final class StepSoundStone extends StepSound {
+
+    StepSoundStone(String s, float f, float f1) {
+        super(s, f, f1);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ThreadMonitorConnection.java b/src/main/java/net/minecraft/server/ThreadMonitorConnection.java
new file mode 100644
index 00000000..f9745c92
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ThreadMonitorConnection.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+class ThreadMonitorConnection extends Thread {
+
+    final NetworkManager a;
+
+    ThreadMonitorConnection(NetworkManager networkmanager) {
+        this.a = networkmanager;
+    }
+
+    public void run() {
+        try {
+            Thread.sleep(2000L);
+            if (NetworkManager.a(this.a)) {
+                NetworkManager.h(this.a).interrupt();
+                this.a.a("disconnect.closed", new Object[0]);
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ThreadSleepForever.java b/src/main/java/net/minecraft/server/ThreadSleepForever.java
new file mode 100644
index 00000000..1aa96d72
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ThreadSleepForever.java
@@ -0,0 +1,24 @@
+package net.minecraft.server;
+
+public class ThreadSleepForever extends Thread {
+
+    final MinecraftServer a;
+
+    public ThreadSleepForever(MinecraftServer minecraftserver) {
+        this.a = minecraftserver;
+        this.setDaemon(true);
+        this.start();
+    }
+
+    public void run() {
+        while (true) {
+            try {
+                while (true) {
+                    Thread.sleep(2147483647L);
+                }
+            } catch (InterruptedException interruptedexception) {
+                ;
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
new file mode 100644
index 00000000..64f1f3c7
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -0,0 +1,106 @@
+package net.minecraft.server;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class TileEntity {
+
+    private static Map a = new HashMap();
+    private static Map b = new HashMap();
+    public World world;
+    public int x;
+    public int y;
+    public int z;
+    protected boolean h;
+
+    public TileEntity() {}
+
+    private static void a(Class oclass, String s) {
+        if (b.containsKey(s)) {
+            throw new IllegalArgumentException("Duplicate id: " + s);
+        } else {
+            a.put(s, oclass);
+            b.put(oclass, s);
+        }
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        this.x = nbttagcompound.e("x");
+        this.y = nbttagcompound.e("y");
+        this.z = nbttagcompound.e("z");
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        String s = (String) b.get(this.getClass());
+
+        if (s == null) {
+            throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
+        } else {
+            nbttagcompound.setString("id", s);
+            nbttagcompound.a("x", this.x);
+            nbttagcompound.a("y", this.y);
+            nbttagcompound.a("z", this.z);
+        }
+    }
+
+    public void g_() {}
+
+    public static TileEntity c(NBTTagCompound nbttagcompound) {
+        TileEntity tileentity = null;
+
+        try {
+            Class oclass = (Class) a.get(nbttagcompound.getString("id"));
+
+            if (oclass != null) {
+                tileentity = (TileEntity) oclass.newInstance();
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        if (tileentity != null) {
+            tileentity.a(nbttagcompound);
+        } else {
+            System.out.println("Skipping TileEntity with id " + nbttagcompound.getString("id"));
+        }
+
+        return tileentity;
+    }
+
+    public int e() {
+        return this.world.getData(this.x, this.y, this.z);
+    }
+
+    public void update() {
+        if (this.world != null) {
+            this.world.b(this.x, this.y, this.z, this);
+        }
+    }
+
+    public Packet f() {
+        return null;
+    }
+
+    public boolean g() {
+        return this.h;
+    }
+
+    public void h() {
+        this.h = true;
+    }
+
+    public void j() {
+        this.h = false;
+    }
+
+    static {
+        a(TileEntityFurnace.class, "Furnace");
+        a(TileEntityChest.class, "Chest");
+        a(TileEntityRecordPlayer.class, "RecordPlayer");
+        a(TileEntityDispenser.class, "Trap");
+        a(TileEntitySign.class, "Sign");
+        a(TileEntityMobSpawner.class, "MobSpawner");
+        a(TileEntityNote.class, "Music");
+        a(TileEntityPiston.class, "Piston");
+    }
+}
diff --git a/src/main/java/net/minecraft/server/TileEntityNote.java b/src/main/java/net/minecraft/server/TileEntityNote.java
new file mode 100644
index 00000000..9b5ea77a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntityNote.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+public class TileEntityNote extends TileEntity {
+
+    public byte note = 0;
+    public boolean b = false;
+
+    public TileEntityNote() {}
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+        nbttagcompound.a("note", this.note);
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.note = nbttagcompound.c("note");
+        if (this.note < 0) {
+            this.note = 0;
+        }
+
+        if (this.note > 24) {
+            this.note = 24;
+        }
+    }
+
+    public void a() {
+        this.note = (byte) ((this.note + 1) % 25);
+        this.update();
+    }
+
+    public void play(World world, int i, int j, int k) {
+        if (world.getMaterial(i, j + 1, k) == Material.AIR) {
+            Material material = world.getMaterial(i, j - 1, k);
+            byte b0 = 0;
+
+            if (material == Material.STONE) {
+                b0 = 1;
+            }
+
+            if (material == Material.SAND) {
+                b0 = 2;
+            }
+
+            if (material == Material.SHATTERABLE) {
+                b0 = 3;
+            }
+
+            if (material == Material.WOOD) {
+                b0 = 4;
+            }
+
+            world.playNote(i, j, k, b0, this.note);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/TileEntityRecordPlayer.java b/src/main/java/net/minecraft/server/TileEntityRecordPlayer.java
new file mode 100644
index 00000000..329e9b40
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntityRecordPlayer.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public class TileEntityRecordPlayer extends TileEntity {
+
+    public int a;
+
+    public TileEntityRecordPlayer() {}
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.a = nbttagcompound.e("Record");
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+        if (this.a > 0) {
+            nbttagcompound.a("Record", this.a);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/TimeCounter.java b/src/main/java/net/minecraft/server/TimeCounter.java
new file mode 100644
index 00000000..746fbfc3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TimeCounter.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+final class TimeCounter implements Counter {
+
+    TimeCounter() {}
+}
diff --git a/src/main/java/net/minecraft/server/UnknownCounter.java b/src/main/java/net/minecraft/server/UnknownCounter.java
new file mode 100644
index 00000000..ee119fea
--- /dev/null
+++ b/src/main/java/net/minecraft/server/UnknownCounter.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+final class UnknownCounter implements Counter {
+
+    UnknownCounter() {}
+}
diff --git a/src/main/java/net/minecraft/server/Vec3D.java b/src/main/java/net/minecraft/server/Vec3D.java
new file mode 100644
index 00000000..8eac3b70
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Vec3D.java
@@ -0,0 +1,138 @@
+package net.minecraft.server;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Vec3D {
+
+    private static List d = new ArrayList();
+    private static int e = 0;
+    public double a;
+    public double b;
+    public double c;
+
+    public static Vec3D a(double d0, double d1, double d2) {
+        return new Vec3D(d0, d1, d2);
+    }
+
+    public static void a() {
+        e = 0;
+    }
+
+    public static Vec3D create(double d0, double d1, double d2) {
+        if (e >= d.size()) {
+            d.add(a(0.0D, 0.0D, 0.0D));
+        }
+
+        return ((Vec3D) d.get(e++)).e(d0, d1, d2);
+    }
+
+    private Vec3D(double d0, double d1, double d2) {
+        if (d0 == -0.0D) {
+            d0 = 0.0D;
+        }
+
+        if (d1 == -0.0D) {
+            d1 = 0.0D;
+        }
+
+        if (d2 == -0.0D) {
+            d2 = 0.0D;
+        }
+
+        this.a = d0;
+        this.b = d1;
+        this.c = d2;
+    }
+
+    private Vec3D e(double d0, double d1, double d2) {
+        this.a = d0;
+        this.b = d1;
+        this.c = d2;
+        return this;
+    }
+
+    public Vec3D b() {
+        double d0 = (double) MathHelper.a(this.a * this.a + this.b * this.b + this.c * this.c);
+
+        return d0 < 1.0E-4D ? create(0.0D, 0.0D, 0.0D) : create(this.a / d0, this.b / d0, this.c / d0);
+    }
+
+    public Vec3D add(double d0, double d1, double d2) {
+        return create(this.a + d0, this.b + d1, this.c + d2);
+    }
+
+    public double a(Vec3D vec3d) {
+        double d0 = vec3d.a - this.a;
+        double d1 = vec3d.b - this.b;
+        double d2 = vec3d.c - this.c;
+
+        return (double) MathHelper.a(d0 * d0 + d1 * d1 + d2 * d2);
+    }
+
+    public double b(Vec3D vec3d) {
+        double d0 = vec3d.a - this.a;
+        double d1 = vec3d.b - this.b;
+        double d2 = vec3d.c - this.c;
+
+        return d0 * d0 + d1 * d1 + d2 * d2;
+    }
+
+    public double d(double d0, double d1, double d2) {
+        double d3 = d0 - this.a;
+        double d4 = d1 - this.b;
+        double d5 = d2 - this.c;
+
+        return d3 * d3 + d4 * d4 + d5 * d5;
+    }
+
+    public double c() {
+        return (double) MathHelper.a(this.a * this.a + this.b * this.b + this.c * this.c);
+    }
+
+    public Vec3D a(Vec3D vec3d, double d0) {
+        double d1 = vec3d.a - this.a;
+        double d2 = vec3d.b - this.b;
+        double d3 = vec3d.c - this.c;
+
+        if (d1 * d1 < 1.0000000116860974E-7D) {
+            return null;
+        } else {
+            double d4 = (d0 - this.a) / d1;
+
+            return d4 >= 0.0D && d4 <= 1.0D ? create(this.a + d1 * d4, this.b + d2 * d4, this.c + d3 * d4) : null;
+        }
+    }
+
+    public Vec3D b(Vec3D vec3d, double d0) {
+        double d1 = vec3d.a - this.a;
+        double d2 = vec3d.b - this.b;
+        double d3 = vec3d.c - this.c;
+
+        if (d2 * d2 < 1.0000000116860974E-7D) {
+            return null;
+        } else {
+            double d4 = (d0 - this.b) / d2;
+
+            return d4 >= 0.0D && d4 <= 1.0D ? create(this.a + d1 * d4, this.b + d2 * d4, this.c + d3 * d4) : null;
+        }
+    }
+
+    public Vec3D c(Vec3D vec3d, double d0) {
+        double d1 = vec3d.a - this.a;
+        double d2 = vec3d.b - this.b;
+        double d3 = vec3d.c - this.c;
+
+        if (d3 * d3 < 1.0000000116860974E-7D) {
+            return null;
+        } else {
+            double d4 = (d0 - this.c) / d3;
+
+            return d4 >= 0.0D && d4 <= 1.0D ? create(this.a + d1 * d4, this.b + d2 * d4, this.c + d3 * d4) : null;
+        }
+    }
+
+    public String toString() {
+        return "(" + this.a + ", " + this.b + ", " + this.c + ")";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WatchableObject.java b/src/main/java/net/minecraft/server/WatchableObject.java
new file mode 100644
index 00000000..8a62006a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WatchableObject.java
@@ -0,0 +1,40 @@
+package net.minecraft.server;
+
+public class WatchableObject {
+
+    private final int a;
+    private final int b;
+    private Object c;
+    private boolean d;
+
+    public WatchableObject(int i, int j, Object object) {
+        this.b = j;
+        this.c = object;
+        this.a = i;
+        this.d = true;
+    }
+
+    public int a() {
+        return this.b;
+    }
+
+    public void a(Object object) {
+        this.c = object;
+    }
+
+    public Object b() {
+        return this.c;
+    }
+
+    public int c() {
+        return this.a;
+    }
+
+    public boolean d() {
+        return this.d;
+    }
+
+    public void a(boolean flag) {
+        this.d = flag;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerHell.java b/src/main/java/net/minecraft/server/WorldChunkManagerHell.java
new file mode 100644
index 00000000..031c6b47
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldChunkManagerHell.java
@@ -0,0 +1,54 @@
+package net.minecraft.server;
+
+import java.util.Arrays;
+
+public class WorldChunkManagerHell extends WorldChunkManager {
+
+    private BiomeBase e;
+    private double f;
+    private double g;
+
+    public WorldChunkManagerHell(BiomeBase biomebase, double d0, double d1) {
+        this.e = biomebase;
+        this.f = d0;
+        this.g = d1;
+    }
+
+    public BiomeBase a(ChunkCoordIntPair chunkcoordintpair) {
+        return this.e;
+    }
+
+    public BiomeBase getBiome(int i, int j) {
+        return this.e;
+    }
+
+    public BiomeBase[] getBiomeData(int i, int j, int k, int l) {
+        this.d = this.a(this.d, i, j, k, l);
+        return this.d;
+    }
+
+    public double[] a(double[] adouble, int i, int j, int k, int l) {
+        if (adouble == null || adouble.length < k * l) {
+            adouble = new double[k * l];
+        }
+
+        Arrays.fill(adouble, 0, k * l, this.f);
+        return adouble;
+    }
+
+    public BiomeBase[] a(BiomeBase[] abiomebase, int i, int j, int k, int l) {
+        if (abiomebase == null || abiomebase.length < k * l) {
+            abiomebase = new BiomeBase[k * l];
+        }
+
+        if (this.temperature == null || this.temperature.length < k * l) {
+            this.temperature = new double[k * l];
+            this.rain = new double[k * l];
+        }
+
+        Arrays.fill(abiomebase, 0, k * l, this.e);
+        Arrays.fill(this.rain, 0, k * l, this.g);
+        Arrays.fill(this.temperature, 0, k * l, this.f);
+        return abiomebase;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenCactus.java b/src/main/java/net/minecraft/server/WorldGenCactus.java
new file mode 100644
index 00000000..02b32d92
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenCactus.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenCactus extends WorldGenerator {
+
+    public WorldGenCactus() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        for (int l = 0; l < 10; ++l) {
+            int i1 = i + random.nextInt(8) - random.nextInt(8);
+            int j1 = j + random.nextInt(4) - random.nextInt(4);
+            int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(i1, j1, k1)) {
+                int l1 = 1 + random.nextInt(random.nextInt(3) + 1);
+
+                for (int i2 = 0; i2 < l1; ++i2) {
+                    if (Block.CACTUS.f(world, i1, j1 + i2, k1)) {
+                        world.setRawTypeId(i1, j1 + i2, k1, Block.CACTUS.id);
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenDeadBush.java b/src/main/java/net/minecraft/server/WorldGenDeadBush.java
new file mode 100644
index 00000000..c99fcc8f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenDeadBush.java
@@ -0,0 +1,32 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenDeadBush extends WorldGenerator {
+
+    private int a;
+
+    public WorldGenDeadBush(int i) {
+        this.a = i;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        int l;
+
+        for (boolean flag = false; ((l = world.getTypeId(i, j, k)) == 0 || l == Block.LEAVES.id) && j > 0; --j) {
+            ;
+        }
+
+        for (int i1 = 0; i1 < 4; ++i1) {
+            int j1 = i + random.nextInt(8) - random.nextInt(8);
+            int k1 = j + random.nextInt(4) - random.nextInt(4);
+            int l1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(j1, k1, l1) && ((BlockFlower) Block.byId[this.a]).f(world, j1, k1, l1)) {
+                world.setRawTypeId(j1, k1, l1, this.a);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenDungeons.java b/src/main/java/net/minecraft/server/WorldGenDungeons.java
new file mode 100644
index 00000000..f398ea16
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenDungeons.java
@@ -0,0 +1,134 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenDungeons extends WorldGenerator {
+
+    public WorldGenDungeons() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        byte b0 = 3;
+        int l = random.nextInt(2) + 2;
+        int i1 = random.nextInt(2) + 2;
+        int j1 = 0;
+
+        int k1;
+        int l1;
+        int i2;
+
+        for (k1 = i - l - 1; k1 <= i + l + 1; ++k1) {
+            for (l1 = j - 1; l1 <= j + b0 + 1; ++l1) {
+                for (i2 = k - i1 - 1; i2 <= k + i1 + 1; ++i2) {
+                    Material material = world.getMaterial(k1, l1, i2);
+
+                    if (l1 == j - 1 && !material.isBuildable()) {
+                        return false;
+                    }
+
+                    if (l1 == j + b0 + 1 && !material.isBuildable()) {
+                        return false;
+                    }
+
+                    if ((k1 == i - l - 1 || k1 == i + l + 1 || i2 == k - i1 - 1 || i2 == k + i1 + 1) && l1 == j && world.isEmpty(k1, l1, i2) && world.isEmpty(k1, l1 + 1, i2)) {
+                        ++j1;
+                    }
+                }
+            }
+        }
+
+        if (j1 >= 1 && j1 <= 5) {
+            for (k1 = i - l - 1; k1 <= i + l + 1; ++k1) {
+                for (l1 = j + b0; l1 >= j - 1; --l1) {
+                    for (i2 = k - i1 - 1; i2 <= k + i1 + 1; ++i2) {
+                        if (k1 != i - l - 1 && l1 != j - 1 && i2 != k - i1 - 1 && k1 != i + l + 1 && l1 != j + b0 + 1 && i2 != k + i1 + 1) {
+                            world.setTypeId(k1, l1, i2, 0);
+                        } else if (l1 >= 0 && !world.getMaterial(k1, l1 - 1, i2).isBuildable()) {
+                            world.setTypeId(k1, l1, i2, 0);
+                        } else if (world.getMaterial(k1, l1, i2).isBuildable()) {
+                            if (l1 == j - 1 && random.nextInt(4) != 0) {
+                                world.setTypeId(k1, l1, i2, Block.MOSSY_COBBLESTONE.id);
+                            } else {
+                                world.setTypeId(k1, l1, i2, Block.COBBLESTONE.id);
+                            }
+                        }
+                    }
+                }
+            }
+
+            k1 = 0;
+
+            while (k1 < 2) {
+                l1 = 0;
+
+                while (true) {
+                    if (l1 < 3) {
+                        label204: {
+                            i2 = i + random.nextInt(l * 2 + 1) - l;
+                            int j2 = k + random.nextInt(i1 * 2 + 1) - i1;
+
+                            if (world.isEmpty(i2, j, j2)) {
+                                int k2 = 0;
+
+                                if (world.getMaterial(i2 - 1, j, j2).isBuildable()) {
+                                    ++k2;
+                                }
+
+                                if (world.getMaterial(i2 + 1, j, j2).isBuildable()) {
+                                    ++k2;
+                                }
+
+                                if (world.getMaterial(i2, j, j2 - 1).isBuildable()) {
+                                    ++k2;
+                                }
+
+                                if (world.getMaterial(i2, j, j2 + 1).isBuildable()) {
+                                    ++k2;
+                                }
+
+                                if (k2 == 1) {
+                                    world.setTypeId(i2, j, j2, Block.CHEST.id);
+                                    TileEntityChest tileentitychest = (TileEntityChest) world.getTileEntity(i2, j, j2);
+
+                                    for (int l2 = 0; l2 < 8; ++l2) {
+                                        ItemStack itemstack = this.a(random);
+
+                                        if (itemstack != null) {
+                                            tileentitychest.setItem(random.nextInt(tileentitychest.getSize()), itemstack);
+                                        }
+                                    }
+                                    break label204;
+                                }
+                            }
+
+                            ++l1;
+                            continue;
+                        }
+                    }
+
+                    ++k1;
+                    break;
+                }
+            }
+
+            world.setTypeId(i, j, k, Block.MOB_SPAWNER.id);
+            TileEntityMobSpawner tileentitymobspawner = (TileEntityMobSpawner) world.getTileEntity(i, j, k);
+
+            tileentitymobspawner.a(this.b(random));
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private ItemStack a(Random random) {
+        int i = random.nextInt(11);
+
+        return i == 0 ? new ItemStack(Item.SADDLE) : (i == 1 ? new ItemStack(Item.IRON_INGOT, random.nextInt(4) + 1) : (i == 2 ? new ItemStack(Item.BREAD) : (i == 3 ? new ItemStack(Item.WHEAT, random.nextInt(4) + 1) : (i == 4 ? new ItemStack(Item.SULPHUR, random.nextInt(4) + 1) : (i == 5 ? new ItemStack(Item.STRING, random.nextInt(4) + 1) : (i == 6 ? new ItemStack(Item.BUCKET) : (i == 7 && random.nextInt(100) == 0 ? new ItemStack(Item.GOLDEN_APPLE) : (i == 8 && random.nextInt(2) == 0 ? new ItemStack(Item.REDSTONE, random.nextInt(4) + 1) : (i == 9 && random.nextInt(10) == 0 ? new ItemStack(Item.byId[Item.GOLD_RECORD.id + random.nextInt(2)]) : (i == 10 ? new ItemStack(Item.INK_SACK, 1, 3) : null))))))))));
+    }
+
+    private String b(Random random) {
+        int i = random.nextInt(4);
+
+        return i == 0 ? "Skeleton" : (i == 1 ? "Zombie" : (i == 2 ? "Zombie" : (i == 3 ? "Spider" : "")));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenFire.java b/src/main/java/net/minecraft/server/WorldGenFire.java
new file mode 100644
index 00000000..75b01de5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenFire.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenFire extends WorldGenerator {
+
+    public WorldGenFire() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        for (int l = 0; l < 64; ++l) {
+            int i1 = i + random.nextInt(8) - random.nextInt(8);
+            int j1 = j + random.nextInt(4) - random.nextInt(4);
+            int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(i1, j1, k1) && world.getTypeId(i1, j1 - 1, k1) == Block.NETHERRACK.id) {
+                world.setTypeId(i1, j1, k1, Block.FIRE.id);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenFlowers.java b/src/main/java/net/minecraft/server/WorldGenFlowers.java
new file mode 100644
index 00000000..673eff59
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenFlowers.java
@@ -0,0 +1,26 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenFlowers extends WorldGenerator {
+
+    private int a;
+
+    public WorldGenFlowers(int i) {
+        this.a = i;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        for (int l = 0; l < 64; ++l) {
+            int i1 = i + random.nextInt(8) - random.nextInt(8);
+            int j1 = j + random.nextInt(4) - random.nextInt(4);
+            int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(i1, j1, k1) && ((BlockFlower) Block.byId[this.a]).f(world, i1, j1, k1)) {
+                world.setRawTypeId(i1, j1, k1, this.a);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenGrass.java b/src/main/java/net/minecraft/server/WorldGenGrass.java
new file mode 100644
index 00000000..1e5f7003
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenGrass.java
@@ -0,0 +1,34 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenGrass extends WorldGenerator {
+
+    private int a;
+    private int b;
+
+    public WorldGenGrass(int i, int j) {
+        this.a = i;
+        this.b = j;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        int l;
+
+        for (boolean flag = false; ((l = world.getTypeId(i, j, k)) == 0 || l == Block.LEAVES.id) && j > 0; --j) {
+            ;
+        }
+
+        for (int i1 = 0; i1 < 128; ++i1) {
+            int j1 = i + random.nextInt(8) - random.nextInt(8);
+            int k1 = j + random.nextInt(4) - random.nextInt(4);
+            int l1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(j1, k1, l1) && ((BlockFlower) Block.byId[this.a]).f(world, j1, k1, l1)) {
+                world.setRawTypeIdAndData(j1, k1, l1, this.a, this.b);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenHellLava.java b/src/main/java/net/minecraft/server/WorldGenHellLava.java
new file mode 100644
index 00000000..2e0cf657
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenHellLava.java
@@ -0,0 +1,73 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenHellLava extends WorldGenerator {
+
+    private int a;
+
+    public WorldGenHellLava(int i) {
+        this.a = i;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        if (world.getTypeId(i, j + 1, k) != Block.NETHERRACK.id) {
+            return false;
+        } else if (world.getTypeId(i, j, k) != 0 && world.getTypeId(i, j, k) != Block.NETHERRACK.id) {
+            return false;
+        } else {
+            int l = 0;
+
+            if (world.getTypeId(i - 1, j, k) == Block.NETHERRACK.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i + 1, j, k) == Block.NETHERRACK.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i, j, k - 1) == Block.NETHERRACK.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i, j, k + 1) == Block.NETHERRACK.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i, j - 1, k) == Block.NETHERRACK.id) {
+                ++l;
+            }
+
+            int i1 = 0;
+
+            if (world.isEmpty(i - 1, j, k)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i + 1, j, k)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i, j, k - 1)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i, j, k + 1)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i, j - 1, k)) {
+                ++i1;
+            }
+
+            if (l == 4 && i1 == 1) {
+                world.setTypeId(i, j, k, this.a);
+                world.a = true;
+                Block.byId[this.a].a(world, i, j, k, random);
+                world.a = false;
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenLakes.java b/src/main/java/net/minecraft/server/WorldGenLakes.java
new file mode 100644
index 00000000..9df6a092
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenLakes.java
@@ -0,0 +1,108 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenLakes extends WorldGenerator {
+
+    private int a;
+
+    public WorldGenLakes(int i) {
+        this.a = i;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        i -= 8;
+
+        for (k -= 8; j > 0 && world.isEmpty(i, j, k); --j) {
+            ;
+        }
+
+        j -= 4;
+        boolean[] aboolean = new boolean[2048];
+        int l = random.nextInt(4) + 4;
+
+        int i1;
+
+        for (i1 = 0; i1 < l; ++i1) {
+            double d0 = random.nextDouble() * 6.0D + 3.0D;
+            double d1 = random.nextDouble() * 4.0D + 2.0D;
+            double d2 = random.nextDouble() * 6.0D + 3.0D;
+            double d3 = random.nextDouble() * (16.0D - d0 - 2.0D) + 1.0D + d0 / 2.0D;
+            double d4 = random.nextDouble() * (8.0D - d1 - 4.0D) + 2.0D + d1 / 2.0D;
+            double d5 = random.nextDouble() * (16.0D - d2 - 2.0D) + 1.0D + d2 / 2.0D;
+
+            for (int j1 = 1; j1 < 15; ++j1) {
+                for (int k1 = 1; k1 < 15; ++k1) {
+                    for (int l1 = 1; l1 < 7; ++l1) {
+                        double d6 = ((double) j1 - d3) / (d0 / 2.0D);
+                        double d7 = ((double) l1 - d4) / (d1 / 2.0D);
+                        double d8 = ((double) k1 - d5) / (d2 / 2.0D);
+                        double d9 = d6 * d6 + d7 * d7 + d8 * d8;
+
+                        if (d9 < 1.0D) {
+                            aboolean[(j1 * 16 + k1) * 8 + l1] = true;
+                        }
+                    }
+                }
+            }
+        }
+
+        boolean flag;
+        int i2;
+        int j2;
+
+        for (i1 = 0; i1 < 16; ++i1) {
+            for (i2 = 0; i2 < 16; ++i2) {
+                for (j2 = 0; j2 < 8; ++j2) {
+                    flag = !aboolean[(i1 * 16 + i2) * 8 + j2] && (i1 < 15 && aboolean[((i1 + 1) * 16 + i2) * 8 + j2] || i1 > 0 && aboolean[((i1 - 1) * 16 + i2) * 8 + j2] || i2 < 15 && aboolean[(i1 * 16 + i2 + 1) * 8 + j2] || i2 > 0 && aboolean[(i1 * 16 + (i2 - 1)) * 8 + j2] || j2 < 7 && aboolean[(i1 * 16 + i2) * 8 + j2 + 1] || j2 > 0 && aboolean[(i1 * 16 + i2) * 8 + (j2 - 1)]);
+                    if (flag) {
+                        Material material = world.getMaterial(i + i1, j + j2, k + i2);
+
+                        if (j2 >= 4 && material.isLiquid()) {
+                            return false;
+                        }
+
+                        if (j2 < 4 && !material.isBuildable() && world.getTypeId(i + i1, j + j2, k + i2) != this.a) {
+                            return false;
+                        }
+                    }
+                }
+            }
+        }
+
+        for (i1 = 0; i1 < 16; ++i1) {
+            for (i2 = 0; i2 < 16; ++i2) {
+                for (j2 = 0; j2 < 8; ++j2) {
+                    if (aboolean[(i1 * 16 + i2) * 8 + j2]) {
+                        world.setRawTypeId(i + i1, j + j2, k + i2, j2 >= 4 ? 0 : this.a);
+                    }
+                }
+            }
+        }
+
+        for (i1 = 0; i1 < 16; ++i1) {
+            for (i2 = 0; i2 < 16; ++i2) {
+                for (j2 = 4; j2 < 8; ++j2) {
+                    if (aboolean[(i1 * 16 + i2) * 8 + j2] && world.getTypeId(i + i1, j + j2 - 1, k + i2) == Block.DIRT.id && world.a(EnumSkyBlock.SKY, i + i1, j + j2, k + i2) > 0) {
+                        world.setRawTypeId(i + i1, j + j2 - 1, k + i2, Block.GRASS.id);
+                    }
+                }
+            }
+        }
+
+        if (Block.byId[this.a].material == Material.LAVA) {
+            for (i1 = 0; i1 < 16; ++i1) {
+                for (i2 = 0; i2 < 16; ++i2) {
+                    for (j2 = 0; j2 < 8; ++j2) {
+                        flag = !aboolean[(i1 * 16 + i2) * 8 + j2] && (i1 < 15 && aboolean[((i1 + 1) * 16 + i2) * 8 + j2] || i1 > 0 && aboolean[((i1 - 1) * 16 + i2) * 8 + j2] || i2 < 15 && aboolean[(i1 * 16 + i2 + 1) * 8 + j2] || i2 > 0 && aboolean[(i1 * 16 + (i2 - 1)) * 8 + j2] || j2 < 7 && aboolean[(i1 * 16 + i2) * 8 + j2 + 1] || j2 > 0 && aboolean[(i1 * 16 + i2) * 8 + (j2 - 1)]);
+                        if (flag && (j2 < 4 || random.nextInt(2) != 0) && world.getMaterial(i + i1, j + j2, k + i2).isBuildable()) {
+                            world.setRawTypeId(i + i1, j + j2, k + i2, Block.STONE.id);
+                        }
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone1.java b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
new file mode 100644
index 00000000..27064363
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone1.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenLightStone1 extends WorldGenerator {
+
+    public WorldGenLightStone1() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        if (!world.isEmpty(i, j, k)) {
+            return false;
+        } else if (world.getTypeId(i, j + 1, k) != Block.NETHERRACK.id) {
+            return false;
+        } else {
+            world.setTypeId(i, j, k, Block.GLOWSTONE.id);
+
+            for (int l = 0; l < 1500; ++l) {
+                int i1 = i + random.nextInt(8) - random.nextInt(8);
+                int j1 = j - random.nextInt(12);
+                int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+                if (world.getTypeId(i1, j1, k1) == 0) {
+                    int l1 = 0;
+
+                    for (int i2 = 0; i2 < 6; ++i2) {
+                        int j2 = 0;
+
+                        if (i2 == 0) {
+                            j2 = world.getTypeId(i1 - 1, j1, k1);
+                        }
+
+                        if (i2 == 1) {
+                            j2 = world.getTypeId(i1 + 1, j1, k1);
+                        }
+
+                        if (i2 == 2) {
+                            j2 = world.getTypeId(i1, j1 - 1, k1);
+                        }
+
+                        if (i2 == 3) {
+                            j2 = world.getTypeId(i1, j1 + 1, k1);
+                        }
+
+                        if (i2 == 4) {
+                            j2 = world.getTypeId(i1, j1, k1 - 1);
+                        }
+
+                        if (i2 == 5) {
+                            j2 = world.getTypeId(i1, j1, k1 + 1);
+                        }
+
+                        if (j2 == Block.GLOWSTONE.id) {
+                            ++l1;
+                        }
+                    }
+
+                    if (l1 == 1) {
+                        world.setTypeId(i1, j1, k1, Block.GLOWSTONE.id);
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenLightStone2.java b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
new file mode 100644
index 00000000..97eeeac8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenLightStone2.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenLightStone2 extends WorldGenerator {
+
+    public WorldGenLightStone2() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        if (!world.isEmpty(i, j, k)) {
+            return false;
+        } else if (world.getTypeId(i, j + 1, k) != Block.NETHERRACK.id) {
+            return false;
+        } else {
+            world.setTypeId(i, j, k, Block.GLOWSTONE.id);
+
+            for (int l = 0; l < 1500; ++l) {
+                int i1 = i + random.nextInt(8) - random.nextInt(8);
+                int j1 = j - random.nextInt(12);
+                int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+                if (world.getTypeId(i1, j1, k1) == 0) {
+                    int l1 = 0;
+
+                    for (int i2 = 0; i2 < 6; ++i2) {
+                        int j2 = 0;
+
+                        if (i2 == 0) {
+                            j2 = world.getTypeId(i1 - 1, j1, k1);
+                        }
+
+                        if (i2 == 1) {
+                            j2 = world.getTypeId(i1 + 1, j1, k1);
+                        }
+
+                        if (i2 == 2) {
+                            j2 = world.getTypeId(i1, j1 - 1, k1);
+                        }
+
+                        if (i2 == 3) {
+                            j2 = world.getTypeId(i1, j1 + 1, k1);
+                        }
+
+                        if (i2 == 4) {
+                            j2 = world.getTypeId(i1, j1, k1 - 1);
+                        }
+
+                        if (i2 == 5) {
+                            j2 = world.getTypeId(i1, j1, k1 + 1);
+                        }
+
+                        if (j2 == Block.GLOWSTONE.id) {
+                            ++l1;
+                        }
+                    }
+
+                    if (l1 == 1) {
+                        world.setTypeId(i1, j1, k1, Block.GLOWSTONE.id);
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenLiquids.java b/src/main/java/net/minecraft/server/WorldGenLiquids.java
new file mode 100644
index 00000000..e5dc2d62
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenLiquids.java
@@ -0,0 +1,67 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenLiquids extends WorldGenerator {
+
+    private int a;
+
+    public WorldGenLiquids(int i) {
+        this.a = i;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        if (world.getTypeId(i, j + 1, k) != Block.STONE.id) {
+            return false;
+        } else if (world.getTypeId(i, j - 1, k) != Block.STONE.id) {
+            return false;
+        } else if (world.getTypeId(i, j, k) != 0 && world.getTypeId(i, j, k) != Block.STONE.id) {
+            return false;
+        } else {
+            int l = 0;
+
+            if (world.getTypeId(i - 1, j, k) == Block.STONE.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i + 1, j, k) == Block.STONE.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i, j, k - 1) == Block.STONE.id) {
+                ++l;
+            }
+
+            if (world.getTypeId(i, j, k + 1) == Block.STONE.id) {
+                ++l;
+            }
+
+            int i1 = 0;
+
+            if (world.isEmpty(i - 1, j, k)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i + 1, j, k)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i, j, k - 1)) {
+                ++i1;
+            }
+
+            if (world.isEmpty(i, j, k + 1)) {
+                ++i1;
+            }
+
+            if (l == 3 && i1 == 1) {
+                world.setTypeId(i, j, k, this.a);
+                world.a = true;
+                Block.byId[this.a].a(world, i, j, k, random);
+                world.a = false;
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenMinable.java b/src/main/java/net/minecraft/server/WorldGenMinable.java
new file mode 100644
index 00000000..bf580443
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenMinable.java
@@ -0,0 +1,61 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenMinable extends WorldGenerator {
+
+    private int a;
+    private int b;
+
+    public WorldGenMinable(int i, int j) {
+        this.a = i;
+        this.b = j;
+    }
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        float f = random.nextFloat() * 3.1415927F;
+        double d0 = (double) ((float) (i + 8) + MathHelper.sin(f) * (float) this.b / 8.0F);
+        double d1 = (double) ((float) (i + 8) - MathHelper.sin(f) * (float) this.b / 8.0F);
+        double d2 = (double) ((float) (k + 8) + MathHelper.cos(f) * (float) this.b / 8.0F);
+        double d3 = (double) ((float) (k + 8) - MathHelper.cos(f) * (float) this.b / 8.0F);
+        double d4 = (double) (j + random.nextInt(3) + 2);
+        double d5 = (double) (j + random.nextInt(3) + 2);
+
+        for (int l = 0; l <= this.b; ++l) {
+            double d6 = d0 + (d1 - d0) * (double) l / (double) this.b;
+            double d7 = d4 + (d5 - d4) * (double) l / (double) this.b;
+            double d8 = d2 + (d3 - d2) * (double) l / (double) this.b;
+            double d9 = random.nextDouble() * (double) this.b / 16.0D;
+            double d10 = (double) (MathHelper.sin((float) l * 3.1415927F / (float) this.b) + 1.0F) * d9 + 1.0D;
+            double d11 = (double) (MathHelper.sin((float) l * 3.1415927F / (float) this.b) + 1.0F) * d9 + 1.0D;
+            int i1 = MathHelper.floor(d6 - d10 / 2.0D);
+            int j1 = MathHelper.floor(d7 - d11 / 2.0D);
+            int k1 = MathHelper.floor(d8 - d10 / 2.0D);
+            int l1 = MathHelper.floor(d6 + d10 / 2.0D);
+            int i2 = MathHelper.floor(d7 + d11 / 2.0D);
+            int j2 = MathHelper.floor(d8 + d10 / 2.0D);
+
+            for (int k2 = i1; k2 <= l1; ++k2) {
+                double d12 = ((double) k2 + 0.5D - d6) / (d10 / 2.0D);
+
+                if (d12 * d12 < 1.0D) {
+                    for (int l2 = j1; l2 <= i2; ++l2) {
+                        double d13 = ((double) l2 + 0.5D - d7) / (d11 / 2.0D);
+
+                        if (d12 * d12 + d13 * d13 < 1.0D) {
+                            for (int i3 = k1; i3 <= j2; ++i3) {
+                                double d14 = ((double) i3 + 0.5D - d8) / (d10 / 2.0D);
+
+                                if (d12 * d12 + d13 * d13 + d14 * d14 < 1.0D && world.getTypeId(k2, l2, i3) == Block.STONE.id) {
+                                    world.setRawTypeId(k2, l2, i3, this.a);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenPumpkin.java b/src/main/java/net/minecraft/server/WorldGenPumpkin.java
new file mode 100644
index 00000000..c4893933
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenPumpkin.java
@@ -0,0 +1,22 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenPumpkin extends WorldGenerator {
+
+    public WorldGenPumpkin() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        for (int l = 0; l < 64; ++l) {
+            int i1 = i + random.nextInt(8) - random.nextInt(8);
+            int j1 = j + random.nextInt(4) - random.nextInt(4);
+            int k1 = k + random.nextInt(8) - random.nextInt(8);
+
+            if (world.isEmpty(i1, j1, k1) && world.getTypeId(i1, j1 - 1, k1) == Block.GRASS.id && Block.PUMPKIN.canPlace(world, i1, j1, k1)) {
+                world.setRawTypeIdAndData(i1, j1, k1, Block.PUMPKIN.id, random.nextInt(4));
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenReed.java b/src/main/java/net/minecraft/server/WorldGenReed.java
new file mode 100644
index 00000000..02691f73
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenReed.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class WorldGenReed extends WorldGenerator {
+
+    public WorldGenReed() {}
+
+    public boolean a(World world, Random random, int i, int j, int k) {
+        for (int l = 0; l < 20; ++l) {
+            int i1 = i + random.nextInt(4) - random.nextInt(4);
+            int j1 = j;
+            int k1 = k + random.nextInt(4) - random.nextInt(4);
+
+            if (world.isEmpty(i1, j, k1) && (world.getMaterial(i1 - 1, j - 1, k1) == Material.WATER || world.getMaterial(i1 + 1, j - 1, k1) == Material.WATER || world.getMaterial(i1, j - 1, k1 - 1) == Material.WATER || world.getMaterial(i1, j - 1, k1 + 1) == Material.WATER)) {
+                int l1 = 2 + random.nextInt(random.nextInt(3) + 1);
+
+                for (int i2 = 0; i2 < l1; ++i2) {
+                    if (Block.SUGAR_CANE_BLOCK.f(world, i1, j1 + i2, k1)) {
+                        world.setRawTypeId(i1, j1 + i2, k1, Block.SUGAR_CANE_BLOCK.id);
+                    }
+                }
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldGenerator.java b/src/main/java/net/minecraft/server/WorldGenerator.java
new file mode 100644
index 00000000..7d659080
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldGenerator.java
@@ -0,0 +1,12 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public abstract class WorldGenerator {
+
+    public WorldGenerator() {}
+
+    public abstract boolean a(World world, Random random, int i, int j, int k);
+
+    public void a(double d0, double d1, double d2) {}
+}
diff --git a/src/main/java/net/minecraft/server/WorldLoader.java b/src/main/java/net/minecraft/server/WorldLoader.java
new file mode 100644
index 00000000..e0067898
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldLoader.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+
+public class WorldLoader implements Convertable {
+
+    protected final File a;
+
+    public WorldLoader(File file1) {
+        if (!file1.exists()) {
+            file1.mkdirs();
+        }
+
+        this.a = file1;
+    }
+
+    public WorldData b(String s) {
+        File file1 = new File(this.a, s);
+
+        if (!file1.exists()) {
+            return null;
+        } else {
+            File file2 = new File(file1, "level.dat");
+            NBTTagCompound nbttagcompound;
+            NBTTagCompound nbttagcompound1;
+
+            if (file2.exists()) {
+                try {
+                    nbttagcompound = CompressedStreamTools.a((InputStream) (new FileInputStream(file2)));
+                    nbttagcompound1 = nbttagcompound.k("Data");
+                    return new WorldData(nbttagcompound1);
+                } catch (Exception exception) {
+                    exception.printStackTrace();
+                }
+            }
+
+            file2 = new File(file1, "level.dat_old");
+            if (file2.exists()) {
+                try {
+                    nbttagcompound = CompressedStreamTools.a((InputStream) (new FileInputStream(file2)));
+                    nbttagcompound1 = nbttagcompound.k("Data");
+                    return new WorldData(nbttagcompound1);
+                } catch (Exception exception1) {
+                    exception1.printStackTrace();
+                }
+            }
+
+            return null;
+        }
+    }
+
+    protected static void a(File[] afile) {
+        for (int i = 0; i < afile.length; ++i) {
+            if (afile[i].isDirectory()) {
+                a(afile[i].listFiles());
+            }
+
+            afile[i].delete();
+        }
+    }
+
+    public IDataManager a(String s, boolean flag) {
+        return new PlayerNBTManager(this.a, s, flag);
+    }
+
+    public boolean isConvertable(String s) {
+        return false;
+    }
+
+    public boolean convert(String s, IProgressUpdate iprogressupdate) {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldLoaderServer.java b/src/main/java/net/minecraft/server/WorldLoaderServer.java
new file mode 100644
index 00000000..88c7cf20
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldLoaderServer.java
@@ -0,0 +1,147 @@
+package net.minecraft.server;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.zip.GZIPInputStream;
+
+public class WorldLoaderServer extends WorldLoader {
+
+    public WorldLoaderServer(File file1) {
+        super(file1);
+    }
+
+    public IDataManager a(String s, boolean flag) {
+        return new ServerNBTManager(this.a, s, flag);
+    }
+
+    public boolean isConvertable(String s) {
+        WorldData worlddata = this.b(s);
+
+        return worlddata != null && worlddata.i() == 0;
+    }
+
+    public boolean convert(String s, IProgressUpdate iprogressupdate) {
+        iprogressupdate.a(0);
+        ArrayList arraylist = new ArrayList();
+        ArrayList arraylist1 = new ArrayList();
+        ArrayList arraylist2 = new ArrayList();
+        ArrayList arraylist3 = new ArrayList();
+        File file1 = new File(this.a, s);
+        File file2 = new File(file1, "DIM-1");
+
+        System.out.println("Scanning folders...");
+        this.a(file1, arraylist, arraylist1);
+        if (file2.exists()) {
+            this.a(file2, arraylist2, arraylist3);
+        }
+
+        int i = arraylist.size() + arraylist2.size() + arraylist1.size() + arraylist3.size();
+
+        System.out.println("Total conversion count is " + i);
+        this.a(file1, arraylist, 0, i, iprogressupdate);
+        this.a(file2, arraylist2, arraylist.size(), i, iprogressupdate);
+        WorldData worlddata = this.b(s);
+
+        worlddata.a(19132);
+        IDataManager idatamanager = this.a(s, false);
+
+        idatamanager.a(worlddata);
+        this.a(arraylist1, arraylist.size() + arraylist2.size(), i, iprogressupdate);
+        if (file2.exists()) {
+            this.a(arraylist3, arraylist.size() + arraylist2.size() + arraylist1.size(), i, iprogressupdate);
+        }
+
+        return true;
+    }
+
+    private void a(File file1, ArrayList arraylist, ArrayList arraylist1) {
+        ChunkFileFilter chunkfilefilter = new ChunkFileFilter((EmptyClass2) null);
+        ChunkFilenameFilter chunkfilenamefilter = new ChunkFilenameFilter((EmptyClass2) null);
+        File[] afile = file1.listFiles(chunkfilefilter);
+        File[] afile1 = afile;
+        int i = afile.length;
+
+        for (int j = 0; j < i; ++j) {
+            File file2 = afile1[j];
+
+            arraylist1.add(file2);
+            File[] afile2 = file2.listFiles(chunkfilefilter);
+            File[] afile3 = afile2;
+            int k = afile2.length;
+
+            for (int l = 0; l < k; ++l) {
+                File file3 = afile3[l];
+                File[] afile4 = file3.listFiles(chunkfilenamefilter);
+                File[] afile5 = afile4;
+                int i1 = afile4.length;
+
+                for (int j1 = 0; j1 < i1; ++j1) {
+                    File file4 = afile5[j1];
+
+                    arraylist.add(new ChunkFile(file4));
+                }
+            }
+        }
+    }
+
+    private void a(File file1, ArrayList arraylist, int i, int j, IProgressUpdate iprogressupdate) {
+        Collections.sort(arraylist);
+        byte[] abyte = new byte[4096];
+        Iterator iterator = arraylist.iterator();
+
+        while (iterator.hasNext()) {
+            ChunkFile chunkfile = (ChunkFile) iterator.next();
+            int k = chunkfile.b();
+            int l = chunkfile.c();
+            RegionFile regionfile = RegionFileCache.a(file1, k, l);
+
+            if (!regionfile.c(k & 31, l & 31)) {
+                try {
+                    DataInputStream datainputstream = new DataInputStream(new GZIPInputStream(new FileInputStream(chunkfile.a())));
+                    DataOutputStream dataoutputstream = regionfile.b(k & 31, l & 31);
+                    boolean flag = false;
+
+                    int i1;
+
+                    while ((i1 = datainputstream.read(abyte)) != -1) {
+                        dataoutputstream.write(abyte, 0, i1);
+                    }
+
+                    dataoutputstream.close();
+                    datainputstream.close();
+                } catch (IOException ioexception) {
+                    ioexception.printStackTrace();
+                }
+            }
+
+            ++i;
+            int j1 = (int) Math.round(100.0D * (double) i / (double) j);
+
+            iprogressupdate.a(j1);
+        }
+
+        RegionFileCache.a();
+    }
+
+    private void a(ArrayList arraylist, int i, int j, IProgressUpdate iprogressupdate) {
+        Iterator iterator = arraylist.iterator();
+
+        while (iterator.hasNext()) {
+            File file1 = (File) iterator.next();
+            File[] afile = file1.listFiles();
+
+            a(afile);
+            file1.delete();
+            ++i;
+            int k = (int) Math.round(100.0D * (double) i / (double) j);
+
+            iprogressupdate.a(k);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldMapBase.java b/src/main/java/net/minecraft/server/WorldMapBase.java
new file mode 100644
index 00000000..d275be03
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldMapBase.java
@@ -0,0 +1,27 @@
+package net.minecraft.server;
+
+public abstract class WorldMapBase {
+
+    public final String a;
+    private boolean b;
+
+    public WorldMapBase(String s) {
+        this.a = s;
+    }
+
+    public abstract void a(NBTTagCompound nbttagcompound);
+
+    public abstract void b(NBTTagCompound nbttagcompound);
+
+    public void a() {
+        this.a(true);
+    }
+
+    public void a(boolean flag) {
+        this.b = flag;
+    }
+
+    public boolean b() {
+        return this.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldMapCollection.java b/src/main/java/net/minecraft/server/WorldMapCollection.java
new file mode 100644
index 00000000..b7017aa2
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldMapCollection.java
@@ -0,0 +1,186 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+public class WorldMapCollection {
+
+    private IDataManager a;
+    private Map b = new HashMap();
+    private List c = new ArrayList();
+    private Map d = new HashMap();
+
+    public WorldMapCollection(IDataManager idatamanager) {
+        this.a = idatamanager;
+        this.b();
+    }
+
+    public WorldMapBase a(Class oclass, String s) {
+        WorldMapBase worldmapbase = (WorldMapBase) this.b.get(s);
+
+        if (worldmapbase != null) {
+            return worldmapbase;
+        } else {
+            if (this.a != null) {
+                try {
+                    File file1 = this.a.b(s);
+
+                    if (file1 != null && file1.exists()) {
+                        try {
+                            worldmapbase = (WorldMapBase) oclass.getConstructor(new Class[] { String.class}).newInstance(new Object[] { s});
+                        } catch (Exception exception) {
+                            throw new RuntimeException("Failed to instantiate " + oclass.toString(), exception);
+                        }
+
+                        FileInputStream fileinputstream = new FileInputStream(file1);
+                        NBTTagCompound nbttagcompound = CompressedStreamTools.a((InputStream) fileinputstream);
+
+                        fileinputstream.close();
+                        worldmapbase.a(nbttagcompound.k("data"));
+                    }
+                } catch (Exception exception1) {
+                    exception1.printStackTrace();
+                }
+            }
+
+            if (worldmapbase != null) {
+                this.b.put(s, worldmapbase);
+                this.c.add(worldmapbase);
+            }
+
+            return worldmapbase;
+        }
+    }
+
+    public void a(String s, WorldMapBase worldmapbase) {
+        if (worldmapbase == null) {
+            throw new RuntimeException("Can\'t set null data");
+        } else {
+            if (this.b.containsKey(s)) {
+                this.c.remove(this.b.remove(s));
+            }
+
+            this.b.put(s, worldmapbase);
+            this.c.add(worldmapbase);
+        }
+    }
+
+    public void a() {
+        for (int i = 0; i < this.c.size(); ++i) {
+            WorldMapBase worldmapbase = (WorldMapBase) this.c.get(i);
+
+            if (worldmapbase.b()) {
+                this.a(worldmapbase);
+                worldmapbase.a(false);
+            }
+        }
+    }
+
+    private void a(WorldMapBase worldmapbase) {
+        if (this.a != null) {
+            try {
+                File file1 = this.a.b(worldmapbase.a);
+
+                if (file1 != null) {
+                    NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+                    worldmapbase.b(nbttagcompound);
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+                    nbttagcompound1.a("data", nbttagcompound);
+                    FileOutputStream fileoutputstream = new FileOutputStream(file1);
+
+                    CompressedStreamTools.a(nbttagcompound1, (OutputStream) fileoutputstream);
+                    fileoutputstream.close();
+                }
+            } catch (Exception exception) {
+                exception.printStackTrace();
+            }
+        }
+    }
+
+    private void b() {
+        try {
+            this.d.clear();
+            if (this.a == null) {
+                return;
+            }
+
+            File file1 = this.a.b("idcounts");
+
+            if (file1 != null && file1.exists()) {
+                DataInputStream datainputstream = new DataInputStream(new FileInputStream(file1));
+                NBTTagCompound nbttagcompound = CompressedStreamTools.a((DataInput) datainputstream);
+
+                datainputstream.close();
+                Iterator iterator = nbttagcompound.c().iterator();
+
+                while (iterator.hasNext()) {
+                    NBTBase nbtbase = (NBTBase) iterator.next();
+
+                    if (nbtbase instanceof NBTTagShort) {
+                        NBTTagShort nbttagshort = (NBTTagShort) nbtbase;
+                        String s = nbttagshort.b();
+                        short short1 = nbttagshort.a;
+
+                        this.d.put(s, Short.valueOf(short1));
+                    }
+                }
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    public int a(String s) {
+        Short oshort = (Short) this.d.get(s);
+
+        if (oshort == null) {
+            oshort = Short.valueOf((short) 0);
+        } else {
+            oshort = Short.valueOf((short) (oshort.shortValue() + 1));
+        }
+
+        this.d.put(s, oshort);
+        if (this.a == null) {
+            return oshort.shortValue();
+        } else {
+            try {
+                File file1 = this.a.b("idcounts");
+
+                if (file1 != null) {
+                    NBTTagCompound nbttagcompound = new NBTTagCompound();
+                    Iterator iterator = this.d.keySet().iterator();
+
+                    while (iterator.hasNext()) {
+                        String s1 = (String) iterator.next();
+                        short short1 = ((Short) this.d.get(s1)).shortValue();
+
+                        nbttagcompound.a(s1, short1);
+                    }
+
+                    DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file1));
+
+                    CompressedStreamTools.a(nbttagcompound, (DataOutput) dataoutputstream);
+                    dataoutputstream.close();
+                }
+            } catch (Exception exception) {
+                exception.printStackTrace();
+            }
+
+            return oshort.shortValue();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldMapOrienter.java b/src/main/java/net/minecraft/server/WorldMapOrienter.java
new file mode 100644
index 00000000..72ebd954
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldMapOrienter.java
@@ -0,0 +1,19 @@
+package net.minecraft.server;
+
+public class WorldMapOrienter {
+
+    public byte a;
+    public byte b;
+    public byte c;
+    public byte d;
+
+    final WorldMap e;
+
+    public WorldMapOrienter(WorldMap worldmap, byte b0, byte b1, byte b2, byte b3) {
+        this.e = worldmap;
+        this.a = b0;
+        this.b = b1;
+        this.c = b2;
+        this.d = b3;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
new file mode 100644
index 00000000..f6ea42fd
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -0,0 +1,72 @@
+package net.minecraft.server;
+
+public abstract class WorldProvider {
+
+    public World a;
+    public WorldChunkManager b;
+    public boolean c = false;
+    public boolean d = false;
+    public boolean e = false;
+    public float[] f = new float[16];
+    public int dimension = 0;
+    private float[] h = new float[4];
+
+    public WorldProvider() {}
+
+    public final void a(World world) {
+        this.a = world;
+        this.a();
+        this.c();
+    }
+
+    protected void c() {
+        float f = 0.05F;
+
+        for (int i = 0; i <= 15; ++i) {
+            float f1 = 1.0F - (float) i / 15.0F;
+
+            this.f[i] = (1.0F - f1) / (f1 * 3.0F + 1.0F) * (1.0F - f) + f;
+        }
+    }
+
+    protected void a() {
+        this.b = new WorldChunkManager(this.a);
+    }
+
+    public IChunkProvider getChunkProvider() {
+        return new ChunkProviderGenerate(this.a, this.a.getSeed());
+    }
+
+    public boolean canSpawn(int i, int j) {
+        int k = this.a.a(i, j);
+
+        return k == Block.SAND.id;
+    }
+
+    public float a(long i, float f) {
+        int j = (int) (i % 24000L);
+        float f1 = ((float) j + f) / 24000.0F - 0.25F;
+
+        if (f1 < 0.0F) {
+            ++f1;
+        }
+
+        if (f1 > 1.0F) {
+            --f1;
+        }
+
+        float f2 = f1;
+
+        f1 = 1.0F - (float) ((Math.cos((double) f1 * 3.141592653589793D) + 1.0D) / 2.0D);
+        f1 = f2 + (f1 - f2) / 3.0F;
+        return f1;
+    }
+
+    public boolean d() {
+        return true;
+    }
+
+    public static WorldProvider byDimension(int i) {
+        return (WorldProvider) (i == -1 ? new WorldProviderHell() : (i == 0 ? new WorldProviderNormal() : (i == 1 ? new WorldProviderSky() : null)));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldProviderHell.java b/src/main/java/net/minecraft/server/WorldProviderHell.java
new file mode 100644
index 00000000..47570f6f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldProviderHell.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+public class WorldProviderHell extends WorldProvider {
+
+    public WorldProviderHell() {}
+
+    public void a() {
+        this.b = new WorldChunkManagerHell(BiomeBase.HELL, 1.0D, 0.0D);
+        this.c = true;
+        this.d = true;
+        this.e = true;
+        this.dimension = -1;
+    }
+
+    protected void c() {
+        float f = 0.1F;
+
+        for (int i = 0; i <= 15; ++i) {
+            float f1 = 1.0F - (float) i / 15.0F;
+
+            this.f[i] = (1.0F - f1) / (f1 * 3.0F + 1.0F) * (1.0F - f) + f;
+        }
+    }
+
+    public IChunkProvider getChunkProvider() {
+        return new ChunkProviderHell(this.a, this.a.getSeed());
+    }
+
+    public boolean canSpawn(int i, int j) {
+        int k = this.a.a(i, j);
+
+        return k == Block.BEDROCK.id ? false : (k == 0 ? false : Block.o[k]);
+    }
+
+    public float a(long i, float f) {
+        return 0.5F;
+    }
+
+    public boolean d() {
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WorldProviderNormal.java b/src/main/java/net/minecraft/server/WorldProviderNormal.java
new file mode 100644
index 00000000..497e89d8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldProviderNormal.java
@@ -0,0 +1,6 @@
+package net.minecraft.server;
+
+public class WorldProviderNormal extends WorldProvider {
+
+    public WorldProviderNormal() {}
+}
diff --git a/src/main/java/net/minecraft/server/WorldProviderSky.java b/src/main/java/net/minecraft/server/WorldProviderSky.java
new file mode 100644
index 00000000..b9de10c0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WorldProviderSky.java
@@ -0,0 +1,25 @@
+package net.minecraft.server;
+
+public class WorldProviderSky extends WorldProvider {
+
+    public WorldProviderSky() {}
+
+    public void a() {
+        this.b = new WorldChunkManagerHell(BiomeBase.SKY, 0.5D, 0.0D);
+        this.dimension = 1;
+    }
+
+    public IChunkProvider getChunkProvider() {
+        return new ChunkProviderSky(this.a, this.a.getSeed());
+    }
+
+    public float a(long i, float f) {
+        return 0.0F;
+    }
+
+    public boolean canSpawn(int i, int j) {
+        int k = this.a.a(i, j);
+
+        return k == 0 ? false : Block.byId[k].material.isSolid();
+    }
+}
-- 
2.30.2

